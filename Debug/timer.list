
timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000501c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  080051ac  080051ac  000151ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005214  08005214  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08005214  08005214  00015214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800521c  0800521c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800521c  0800521c  0001521c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005220  08005220  00015220  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005224  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00000338  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200003b0  200003b0  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000e27a  00000000  00000000  000200eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000023dd  00000000  00000000  0002e365  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000d90  00000000  00000000  00030748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000a81  00000000  00000000  000314d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000223db  00000000  00000000  00031f59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00010b1b  00000000  00000000  00054334  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cd074  00000000  00000000  00064e4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003f44  00000000  00000000  00131ec4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  00135e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005194 	.word	0x08005194

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08005194 	.word	0x08005194

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000572:	2300      	movs	r3, #0
 8000574:	607b      	str	r3, [r7, #4]
 8000576:	4b0c      	ldr	r3, [pc, #48]	; (80005a8 <MX_DMA_Init+0x3c>)
 8000578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057a:	4a0b      	ldr	r2, [pc, #44]	; (80005a8 <MX_DMA_Init+0x3c>)
 800057c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000580:	6313      	str	r3, [r2, #48]	; 0x30
 8000582:	4b09      	ldr	r3, [pc, #36]	; (80005a8 <MX_DMA_Init+0x3c>)
 8000584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000586:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800058a:	607b      	str	r3, [r7, #4]
 800058c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800058e:	2200      	movs	r2, #0
 8000590:	2100      	movs	r1, #0
 8000592:	2011      	movs	r0, #17
 8000594:	f000 fedd 	bl	8001352 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000598:	2011      	movs	r0, #17
 800059a:	f000 fef6 	bl	800138a <HAL_NVIC_EnableIRQ>

}
 800059e:	bf00      	nop
 80005a0:	3708      	adds	r7, #8
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	40023800 	.word	0x40023800

080005ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b08a      	sub	sp, #40	; 0x28
 80005b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b2:	f107 0314 	add.w	r3, r7, #20
 80005b6:	2200      	movs	r2, #0
 80005b8:	601a      	str	r2, [r3, #0]
 80005ba:	605a      	str	r2, [r3, #4]
 80005bc:	609a      	str	r2, [r3, #8]
 80005be:	60da      	str	r2, [r3, #12]
 80005c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005c2:	2300      	movs	r3, #0
 80005c4:	613b      	str	r3, [r7, #16]
 80005c6:	4b2d      	ldr	r3, [pc, #180]	; (800067c <MX_GPIO_Init+0xd0>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ca:	4a2c      	ldr	r2, [pc, #176]	; (800067c <MX_GPIO_Init+0xd0>)
 80005cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005d0:	6313      	str	r3, [r2, #48]	; 0x30
 80005d2:	4b2a      	ldr	r3, [pc, #168]	; (800067c <MX_GPIO_Init+0xd0>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005da:	613b      	str	r3, [r7, #16]
 80005dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005de:	2300      	movs	r3, #0
 80005e0:	60fb      	str	r3, [r7, #12]
 80005e2:	4b26      	ldr	r3, [pc, #152]	; (800067c <MX_GPIO_Init+0xd0>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	4a25      	ldr	r2, [pc, #148]	; (800067c <MX_GPIO_Init+0xd0>)
 80005e8:	f043 0301 	orr.w	r3, r3, #1
 80005ec:	6313      	str	r3, [r2, #48]	; 0x30
 80005ee:	4b23      	ldr	r3, [pc, #140]	; (800067c <MX_GPIO_Init+0xd0>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f2:	f003 0301 	and.w	r3, r3, #1
 80005f6:	60fb      	str	r3, [r7, #12]
 80005f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005fa:	2300      	movs	r3, #0
 80005fc:	60bb      	str	r3, [r7, #8]
 80005fe:	4b1f      	ldr	r3, [pc, #124]	; (800067c <MX_GPIO_Init+0xd0>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000602:	4a1e      	ldr	r2, [pc, #120]	; (800067c <MX_GPIO_Init+0xd0>)
 8000604:	f043 0302 	orr.w	r3, r3, #2
 8000608:	6313      	str	r3, [r2, #48]	; 0x30
 800060a:	4b1c      	ldr	r3, [pc, #112]	; (800067c <MX_GPIO_Init+0xd0>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	f003 0302 	and.w	r3, r3, #2
 8000612:	60bb      	str	r3, [r7, #8]
 8000614:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000616:	2300      	movs	r3, #0
 8000618:	607b      	str	r3, [r7, #4]
 800061a:	4b18      	ldr	r3, [pc, #96]	; (800067c <MX_GPIO_Init+0xd0>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061e:	4a17      	ldr	r2, [pc, #92]	; (800067c <MX_GPIO_Init+0xd0>)
 8000620:	f043 0308 	orr.w	r3, r3, #8
 8000624:	6313      	str	r3, [r2, #48]	; 0x30
 8000626:	4b15      	ldr	r3, [pc, #84]	; (800067c <MX_GPIO_Init+0xd0>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062a:	f003 0308 	and.w	r3, r3, #8
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 8000632:	2200      	movs	r2, #0
 8000634:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000638:	4811      	ldr	r0, [pc, #68]	; (8000680 <MX_GPIO_Init+0xd4>)
 800063a:	f001 fbf1 	bl	8001e20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800063e:	2301      	movs	r3, #1
 8000640:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000642:	2300      	movs	r3, #0
 8000644:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000646:	2300      	movs	r3, #0
 8000648:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800064a:	f107 0314 	add.w	r3, r7, #20
 800064e:	4619      	mov	r1, r3
 8000650:	480c      	ldr	r0, [pc, #48]	; (8000684 <MX_GPIO_Init+0xd8>)
 8000652:	f001 fa31 	bl	8001ab8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RED_LED_Pin;
 8000656:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800065a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800065c:	2301      	movs	r3, #1
 800065e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000660:	2300      	movs	r3, #0
 8000662:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000664:	2300      	movs	r3, #0
 8000666:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RED_LED_GPIO_Port, &GPIO_InitStruct);
 8000668:	f107 0314 	add.w	r3, r7, #20
 800066c:	4619      	mov	r1, r3
 800066e:	4804      	ldr	r0, [pc, #16]	; (8000680 <MX_GPIO_Init+0xd4>)
 8000670:	f001 fa22 	bl	8001ab8 <HAL_GPIO_Init>

}
 8000674:	bf00      	nop
 8000676:	3728      	adds	r7, #40	; 0x28
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	40023800 	.word	0x40023800
 8000680:	40020c00 	.word	0x40020c00
 8000684:	40020000 	.word	0x40020000

08000688 <handleButtonPress1>:
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

void handleButtonPress1(TIM_HandleTypeDef *htim) {
 8000688:	b580      	push	{r7, lr}
 800068a:	b084      	sub	sp, #16
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]




			uint16_t timer_val;
			timer_val = __HAL_TIM_GET_COUNTER(htim);
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000696:	81fb      	strh	r3, [r7, #14]
			 if (timer_val>=2000)
 8000698:	89fb      	ldrh	r3, [r7, #14]
 800069a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800069e:	d30d      	bcc.n	80006bc <handleButtonPress1+0x34>
			 {
			 HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 80006a0:	2201      	movs	r2, #1
 80006a2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006a6:	4807      	ldr	r0, [pc, #28]	; (80006c4 <handleButtonPress1+0x3c>)
 80006a8:	f001 fbba 	bl	8001e20 <HAL_GPIO_WritePin>





			 printf("Wartosc timera: %d\n", timer_val);
 80006ac:	89fb      	ldrh	r3, [r7, #14]
 80006ae:	4619      	mov	r1, r3
 80006b0:	4805      	ldr	r0, [pc, #20]	; (80006c8 <handleButtonPress1+0x40>)
 80006b2:	f003 fef9 	bl	80044a8 <iprintf>
			 HAL_Delay(100);
 80006b6:	2064      	movs	r0, #100	; 0x64
 80006b8:	f000 fd4c 	bl	8001154 <HAL_Delay>
			 }

}
 80006bc:	bf00      	nop
 80006be:	3710      	adds	r7, #16
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	40020c00 	.word	0x40020c00
 80006c8:	080051ac 	.word	0x080051ac

080006cc <handleButtonRelease1>:

void handleButtonRelease1(TIM_HandleTypeDef *htim) {
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]

			HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 80006d4:	2200      	movs	r2, #0
 80006d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006da:	4805      	ldr	r0, [pc, #20]	; (80006f0 <handleButtonRelease1+0x24>)
 80006dc:	f001 fba0 	bl	8001e20 <HAL_GPIO_WritePin>
			htim->Instance->CNT = 0;
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	2200      	movs	r2, #0
 80006e6:	625a      	str	r2, [r3, #36]	; 0x24
}
 80006e8:	bf00      	nop
 80006ea:	3708      	adds	r7, #8
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	40020c00 	.word	0x40020c00

080006f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006fa:	f000 fcb9 	bl	8001070 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006fe:	f000 f861 	bl	80007c4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000702:	f7ff ff53 	bl	80005ac <MX_GPIO_Init>
  MX_DMA_Init();
 8000706:	f7ff ff31 	bl	800056c <MX_DMA_Init>
  MX_TIM14_Init();
 800070a:	f000 fae3 	bl	8000cd4 <MX_TIM14_Init>
  MX_USART2_UART_Init();
 800070e:	f000 fbd9 	bl	8000ec4 <MX_USART2_UART_Init>
  MX_TIM13_Init();
 8000712:	f000 fabb 	bl	8000c8c <MX_TIM13_Init>
  MX_TIM4_Init();
 8000716:	f000 f9fd 	bl	8000b14 <MX_TIM4_Init>
  MX_TIM12_Init();
 800071a:	f000 fa71 	bl	8000c00 <MX_TIM12_Init>
  /* USER CODE BEGIN 2 */
 // uart_buf_len = sprintf(uart_buf, "Timer test\r\n");
 // HAL_UART_Transmit(&husart2, (uint8_t *)uart_buf, uart_buf_len, 100);
  //Start timer
  HAL_TIM_Base_Start(&htim14);
 800071e:	4826      	ldr	r0, [pc, #152]	; (80007b8 <main+0xc4>)
 8000720:	f002 f840 	bl	80027a4 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8000724:	210c      	movs	r1, #12
 8000726:	4825      	ldr	r0, [pc, #148]	; (80007bc <main+0xc8>)
 8000728:	f002 f8f4 	bl	8002914 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	 uint32_t dutyCycle = 500; // Example: 50% duty cycle
 800072c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000730:	603b      	str	r3, [r7, #0]
	 __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, dutyCycle);
 8000732:	4b22      	ldr	r3, [pc, #136]	; (80007bc <main+0xc8>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	683a      	ldr	r2, [r7, #0]
 8000738:	641a      	str	r2, [r3, #64]	; 0x40





	  for (int i = 0; i < NUM_BUTTONS; i++)
 800073a:	2300      	movs	r3, #0
 800073c:	607b      	str	r3, [r7, #4]
 800073e:	e036      	b.n	80007ae <main+0xba>
	  {
	              if (HAL_GPIO_ReadPin(buttons[i].port, buttons[i].pin) == 1)
 8000740:	4a1f      	ldr	r2, [pc, #124]	; (80007c0 <main+0xcc>)
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	011b      	lsls	r3, r3, #4
 8000746:	4413      	add	r3, r2
 8000748:	681a      	ldr	r2, [r3, #0]
 800074a:	491d      	ldr	r1, [pc, #116]	; (80007c0 <main+0xcc>)
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	011b      	lsls	r3, r3, #4
 8000750:	440b      	add	r3, r1
 8000752:	3304      	adds	r3, #4
 8000754:	881b      	ldrh	r3, [r3, #0]
 8000756:	4619      	mov	r1, r3
 8000758:	4610      	mov	r0, r2
 800075a:	f001 fb49 	bl	8001df0 <HAL_GPIO_ReadPin>
 800075e:	4603      	mov	r3, r0
 8000760:	2b01      	cmp	r3, #1
 8000762:	d107      	bne.n	8000774 <main+0x80>
	              {
	                  buttons[i].press_callback(&htim14);
 8000764:	4a16      	ldr	r2, [pc, #88]	; (80007c0 <main+0xcc>)
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	011b      	lsls	r3, r3, #4
 800076a:	4413      	add	r3, r2
 800076c:	3308      	adds	r3, #8
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4811      	ldr	r0, [pc, #68]	; (80007b8 <main+0xc4>)
 8000772:	4798      	blx	r3
	              }
	              if (HAL_GPIO_ReadPin(buttons[i].port, buttons[i].pin) == 0)
 8000774:	4a12      	ldr	r2, [pc, #72]	; (80007c0 <main+0xcc>)
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	011b      	lsls	r3, r3, #4
 800077a:	4413      	add	r3, r2
 800077c:	681a      	ldr	r2, [r3, #0]
 800077e:	4910      	ldr	r1, [pc, #64]	; (80007c0 <main+0xcc>)
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	011b      	lsls	r3, r3, #4
 8000784:	440b      	add	r3, r1
 8000786:	3304      	adds	r3, #4
 8000788:	881b      	ldrh	r3, [r3, #0]
 800078a:	4619      	mov	r1, r3
 800078c:	4610      	mov	r0, r2
 800078e:	f001 fb2f 	bl	8001df0 <HAL_GPIO_ReadPin>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d107      	bne.n	80007a8 <main+0xb4>
	              {
	            	  buttons[i].release_callback(&htim14);
 8000798:	4a09      	ldr	r2, [pc, #36]	; (80007c0 <main+0xcc>)
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	011b      	lsls	r3, r3, #4
 800079e:	4413      	add	r3, r2
 80007a0:	330c      	adds	r3, #12
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4804      	ldr	r0, [pc, #16]	; (80007b8 <main+0xc4>)
 80007a6:	4798      	blx	r3
	  for (int i = 0; i < NUM_BUTTONS; i++)
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	3301      	adds	r3, #1
 80007ac:	607b      	str	r3, [r7, #4]
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d0c5      	beq.n	8000740 <main+0x4c>
 80007b4:	e7c1      	b.n	800073a <main+0x46>
 80007b6:	bf00      	nop
 80007b8:	20000170 	.word	0x20000170
 80007bc:	20000098 	.word	0x20000098
 80007c0:	20000000 	.word	0x20000000

080007c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b094      	sub	sp, #80	; 0x50
 80007c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ca:	f107 0320 	add.w	r3, r7, #32
 80007ce:	2230      	movs	r2, #48	; 0x30
 80007d0:	2100      	movs	r1, #0
 80007d2:	4618      	mov	r0, r3
 80007d4:	f003 febd 	bl	8004552 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007d8:	f107 030c 	add.w	r3, r7, #12
 80007dc:	2200      	movs	r2, #0
 80007de:	601a      	str	r2, [r3, #0]
 80007e0:	605a      	str	r2, [r3, #4]
 80007e2:	609a      	str	r2, [r3, #8]
 80007e4:	60da      	str	r2, [r3, #12]
 80007e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007e8:	2300      	movs	r3, #0
 80007ea:	60bb      	str	r3, [r7, #8]
 80007ec:	4b22      	ldr	r3, [pc, #136]	; (8000878 <SystemClock_Config+0xb4>)
 80007ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f0:	4a21      	ldr	r2, [pc, #132]	; (8000878 <SystemClock_Config+0xb4>)
 80007f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007f6:	6413      	str	r3, [r2, #64]	; 0x40
 80007f8:	4b1f      	ldr	r3, [pc, #124]	; (8000878 <SystemClock_Config+0xb4>)
 80007fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000800:	60bb      	str	r3, [r7, #8]
 8000802:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000804:	2300      	movs	r3, #0
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	4b1c      	ldr	r3, [pc, #112]	; (800087c <SystemClock_Config+0xb8>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a1b      	ldr	r2, [pc, #108]	; (800087c <SystemClock_Config+0xb8>)
 800080e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000812:	6013      	str	r3, [r2, #0]
 8000814:	4b19      	ldr	r3, [pc, #100]	; (800087c <SystemClock_Config+0xb8>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800081c:	607b      	str	r3, [r7, #4]
 800081e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000820:	2302      	movs	r3, #2
 8000822:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000824:	2301      	movs	r3, #1
 8000826:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000828:	2310      	movs	r3, #16
 800082a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800082c:	2300      	movs	r3, #0
 800082e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000830:	f107 0320 	add.w	r3, r7, #32
 8000834:	4618      	mov	r0, r3
 8000836:	f001 fb0d 	bl	8001e54 <HAL_RCC_OscConfig>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000840:	f000 f81e 	bl	8000880 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000844:	230f      	movs	r3, #15
 8000846:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000848:	2300      	movs	r3, #0
 800084a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800084c:	2300      	movs	r3, #0
 800084e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000850:	2300      	movs	r3, #0
 8000852:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000854:	2300      	movs	r3, #0
 8000856:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000858:	f107 030c 	add.w	r3, r7, #12
 800085c:	2100      	movs	r1, #0
 800085e:	4618      	mov	r0, r3
 8000860:	f001 fd70 	bl	8002344 <HAL_RCC_ClockConfig>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800086a:	f000 f809 	bl	8000880 <Error_Handler>
  }
}
 800086e:	bf00      	nop
 8000870:	3750      	adds	r7, #80	; 0x50
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	40023800 	.word	0x40023800
 800087c:	40007000 	.word	0x40007000

08000880 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000884:	b672      	cpsid	i
}
 8000886:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000888:	e7fe      	b.n	8000888 <Error_Handler+0x8>
	...

0800088c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	607b      	str	r3, [r7, #4]
 8000896:	4b10      	ldr	r3, [pc, #64]	; (80008d8 <HAL_MspInit+0x4c>)
 8000898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800089a:	4a0f      	ldr	r2, [pc, #60]	; (80008d8 <HAL_MspInit+0x4c>)
 800089c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008a0:	6453      	str	r3, [r2, #68]	; 0x44
 80008a2:	4b0d      	ldr	r3, [pc, #52]	; (80008d8 <HAL_MspInit+0x4c>)
 80008a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008aa:	607b      	str	r3, [r7, #4]
 80008ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	603b      	str	r3, [r7, #0]
 80008b2:	4b09      	ldr	r3, [pc, #36]	; (80008d8 <HAL_MspInit+0x4c>)
 80008b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b6:	4a08      	ldr	r2, [pc, #32]	; (80008d8 <HAL_MspInit+0x4c>)
 80008b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008bc:	6413      	str	r3, [r2, #64]	; 0x40
 80008be:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <HAL_MspInit+0x4c>)
 80008c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008c6:	603b      	str	r3, [r7, #0]
 80008c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ca:	bf00      	nop
 80008cc:	370c      	adds	r7, #12
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	40023800 	.word	0x40023800

080008dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008e0:	e7fe      	b.n	80008e0 <NMI_Handler+0x4>

080008e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008e2:	b480      	push	{r7}
 80008e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008e6:	e7fe      	b.n	80008e6 <HardFault_Handler+0x4>

080008e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008ec:	e7fe      	b.n	80008ec <MemManage_Handler+0x4>

080008ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008ee:	b480      	push	{r7}
 80008f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008f2:	e7fe      	b.n	80008f2 <BusFault_Handler+0x4>

080008f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008f8:	e7fe      	b.n	80008f8 <UsageFault_Handler+0x4>

080008fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008fa:	b480      	push	{r7}
 80008fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008fe:	bf00      	nop
 8000900:	46bd      	mov	sp, r7
 8000902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000906:	4770      	bx	lr

08000908 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800090c:	bf00      	nop
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr

08000916 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000916:	b480      	push	{r7}
 8000918:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800091a:	bf00      	nop
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr

08000924 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000928:	f000 fbf4 	bl	8001114 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800092c:	bf00      	nop
 800092e:	bd80      	pop	{r7, pc}

08000930 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000934:	4802      	ldr	r0, [pc, #8]	; (8000940 <DMA1_Stream6_IRQHandler+0x10>)
 8000936:	f000 fe83 	bl	8001640 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	20000200 	.word	0x20000200

08000944 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000948:	4802      	ldr	r0, [pc, #8]	; (8000954 <USART2_IRQHandler+0x10>)
 800094a:	f002 fe1d 	bl	8003588 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800094e:	bf00      	nop
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	200001b8 	.word	0x200001b8

08000958 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0
 800095e:	4603      	mov	r3, r0
 8000960:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000962:	4b0f      	ldr	r3, [pc, #60]	; (80009a0 <ITM_SendChar+0x48>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	4a0e      	ldr	r2, [pc, #56]	; (80009a0 <ITM_SendChar+0x48>)
 8000968:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800096c:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800096e:	4b0d      	ldr	r3, [pc, #52]	; (80009a4 <ITM_SendChar+0x4c>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	4a0c      	ldr	r2, [pc, #48]	; (80009a4 <ITM_SendChar+0x4c>)
 8000974:	f043 0301 	orr.w	r3, r3, #1
 8000978:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800097a:	bf00      	nop
 800097c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	f003 0301 	and.w	r3, r3, #1
 8000986:	2b00      	cmp	r3, #0
 8000988:	d0f8      	beq.n	800097c <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800098a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800098e:	79fb      	ldrb	r3, [r7, #7]
 8000990:	6013      	str	r3, [r2, #0]
}
 8000992:	bf00      	nop
 8000994:	370c      	adds	r7, #12
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	e000edfc 	.word	0xe000edfc
 80009a4:	e0000e00 	.word	0xe0000e00

080009a8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b086      	sub	sp, #24
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	60f8      	str	r0, [r7, #12]
 80009b0:	60b9      	str	r1, [r7, #8]
 80009b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009b4:	2300      	movs	r3, #0
 80009b6:	617b      	str	r3, [r7, #20]
 80009b8:	e00a      	b.n	80009d0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80009ba:	f3af 8000 	nop.w
 80009be:	4601      	mov	r1, r0
 80009c0:	68bb      	ldr	r3, [r7, #8]
 80009c2:	1c5a      	adds	r2, r3, #1
 80009c4:	60ba      	str	r2, [r7, #8]
 80009c6:	b2ca      	uxtb	r2, r1
 80009c8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ca:	697b      	ldr	r3, [r7, #20]
 80009cc:	3301      	adds	r3, #1
 80009ce:	617b      	str	r3, [r7, #20]
 80009d0:	697a      	ldr	r2, [r7, #20]
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	429a      	cmp	r2, r3
 80009d6:	dbf0      	blt.n	80009ba <_read+0x12>
  }

  return len;
 80009d8:	687b      	ldr	r3, [r7, #4]
}
 80009da:	4618      	mov	r0, r3
 80009dc:	3718      	adds	r7, #24
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}

080009e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009e2:	b580      	push	{r7, lr}
 80009e4:	b086      	sub	sp, #24
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	60f8      	str	r0, [r7, #12]
 80009ea:	60b9      	str	r1, [r7, #8]
 80009ec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ee:	2300      	movs	r3, #0
 80009f0:	617b      	str	r3, [r7, #20]
 80009f2:	e009      	b.n	8000a08 <_write+0x26>
  {
	  ITM_SendChar(*ptr++);
 80009f4:	68bb      	ldr	r3, [r7, #8]
 80009f6:	1c5a      	adds	r2, r3, #1
 80009f8:	60ba      	str	r2, [r7, #8]
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	4618      	mov	r0, r3
 80009fe:	f7ff ffab 	bl	8000958 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a02:	697b      	ldr	r3, [r7, #20]
 8000a04:	3301      	adds	r3, #1
 8000a06:	617b      	str	r3, [r7, #20]
 8000a08:	697a      	ldr	r2, [r7, #20]
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	429a      	cmp	r2, r3
 8000a0e:	dbf1      	blt.n	80009f4 <_write+0x12>
  }
  return len;
 8000a10:	687b      	ldr	r3, [r7, #4]
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	3718      	adds	r7, #24
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}

08000a1a <_close>:

int _close(int file)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	b083      	sub	sp, #12
 8000a1e:	af00      	add	r7, sp, #0
 8000a20:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	370c      	adds	r7, #12
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr

08000a32 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a32:	b480      	push	{r7}
 8000a34:	b083      	sub	sp, #12
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	6078      	str	r0, [r7, #4]
 8000a3a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a42:	605a      	str	r2, [r3, #4]
  return 0;
 8000a44:	2300      	movs	r3, #0
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	370c      	adds	r7, #12
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr

08000a52 <_isatty>:

int _isatty(int file)
{
 8000a52:	b480      	push	{r7}
 8000a54:	b083      	sub	sp, #12
 8000a56:	af00      	add	r7, sp, #0
 8000a58:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a5a:	2301      	movs	r3, #1
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	370c      	adds	r7, #12
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr

08000a68 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b085      	sub	sp, #20
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	60f8      	str	r0, [r7, #12]
 8000a70:	60b9      	str	r1, [r7, #8]
 8000a72:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a74:	2300      	movs	r3, #0
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	3714      	adds	r7, #20
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
	...

08000a84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b086      	sub	sp, #24
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a8c:	4a14      	ldr	r2, [pc, #80]	; (8000ae0 <_sbrk+0x5c>)
 8000a8e:	4b15      	ldr	r3, [pc, #84]	; (8000ae4 <_sbrk+0x60>)
 8000a90:	1ad3      	subs	r3, r2, r3
 8000a92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a98:	4b13      	ldr	r3, [pc, #76]	; (8000ae8 <_sbrk+0x64>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d102      	bne.n	8000aa6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000aa0:	4b11      	ldr	r3, [pc, #68]	; (8000ae8 <_sbrk+0x64>)
 8000aa2:	4a12      	ldr	r2, [pc, #72]	; (8000aec <_sbrk+0x68>)
 8000aa4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000aa6:	4b10      	ldr	r3, [pc, #64]	; (8000ae8 <_sbrk+0x64>)
 8000aa8:	681a      	ldr	r2, [r3, #0]
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	4413      	add	r3, r2
 8000aae:	693a      	ldr	r2, [r7, #16]
 8000ab0:	429a      	cmp	r2, r3
 8000ab2:	d207      	bcs.n	8000ac4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ab4:	f003 fd9c 	bl	80045f0 <__errno>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	220c      	movs	r2, #12
 8000abc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000abe:	f04f 33ff 	mov.w	r3, #4294967295
 8000ac2:	e009      	b.n	8000ad8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ac4:	4b08      	ldr	r3, [pc, #32]	; (8000ae8 <_sbrk+0x64>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000aca:	4b07      	ldr	r3, [pc, #28]	; (8000ae8 <_sbrk+0x64>)
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	4413      	add	r3, r2
 8000ad2:	4a05      	ldr	r2, [pc, #20]	; (8000ae8 <_sbrk+0x64>)
 8000ad4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ad6:	68fb      	ldr	r3, [r7, #12]
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	3718      	adds	r7, #24
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	20020000 	.word	0x20020000
 8000ae4:	00000400 	.word	0x00000400
 8000ae8:	20000094 	.word	0x20000094
 8000aec:	200003b0 	.word	0x200003b0

08000af0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000af4:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <SystemInit+0x20>)
 8000af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000afa:	4a05      	ldr	r2, [pc, #20]	; (8000b10 <SystemInit+0x20>)
 8000afc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b04:	bf00      	nop
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	e000ed00 	.word	0xe000ed00

08000b14 <MX_TIM4_Init>:
TIM_HandleTypeDef htim13;
TIM_HandleTypeDef htim14;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b08e      	sub	sp, #56	; 0x38
 8000b18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b1e:	2200      	movs	r2, #0
 8000b20:	601a      	str	r2, [r3, #0]
 8000b22:	605a      	str	r2, [r3, #4]
 8000b24:	609a      	str	r2, [r3, #8]
 8000b26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b28:	f107 0320 	add.w	r3, r7, #32
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b32:	1d3b      	adds	r3, r7, #4
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
 8000b3c:	60da      	str	r2, [r3, #12]
 8000b3e:	611a      	str	r2, [r3, #16]
 8000b40:	615a      	str	r2, [r3, #20]
 8000b42:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000b44:	4b2c      	ldr	r3, [pc, #176]	; (8000bf8 <MX_TIM4_Init+0xe4>)
 8000b46:	4a2d      	ldr	r2, [pc, #180]	; (8000bfc <MX_TIM4_Init+0xe8>)
 8000b48:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 15;
 8000b4a:	4b2b      	ldr	r3, [pc, #172]	; (8000bf8 <MX_TIM4_Init+0xe4>)
 8000b4c:	220f      	movs	r2, #15
 8000b4e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b50:	4b29      	ldr	r3, [pc, #164]	; (8000bf8 <MX_TIM4_Init+0xe4>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8000b56:	4b28      	ldr	r3, [pc, #160]	; (8000bf8 <MX_TIM4_Init+0xe4>)
 8000b58:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b5c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b5e:	4b26      	ldr	r3, [pc, #152]	; (8000bf8 <MX_TIM4_Init+0xe4>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b64:	4b24      	ldr	r3, [pc, #144]	; (8000bf8 <MX_TIM4_Init+0xe4>)
 8000b66:	2280      	movs	r2, #128	; 0x80
 8000b68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000b6a:	4823      	ldr	r0, [pc, #140]	; (8000bf8 <MX_TIM4_Init+0xe4>)
 8000b6c:	f001 fdca 	bl	8002704 <HAL_TIM_Base_Init>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000b76:	f7ff fe83 	bl	8000880 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b7e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000b80:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b84:	4619      	mov	r1, r3
 8000b86:	481c      	ldr	r0, [pc, #112]	; (8000bf8 <MX_TIM4_Init+0xe4>)
 8000b88:	f002 f84e 	bl	8002c28 <HAL_TIM_ConfigClockSource>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000b92:	f7ff fe75 	bl	8000880 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000b96:	4818      	ldr	r0, [pc, #96]	; (8000bf8 <MX_TIM4_Init+0xe4>)
 8000b98:	f001 fe6c 	bl	8002874 <HAL_TIM_PWM_Init>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000ba2:	f7ff fe6d 	bl	8000880 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000baa:	2300      	movs	r3, #0
 8000bac:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000bae:	f107 0320 	add.w	r3, r7, #32
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4810      	ldr	r0, [pc, #64]	; (8000bf8 <MX_TIM4_Init+0xe4>)
 8000bb6:	f002 fc1b 	bl	80033f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000bc0:	f7ff fe5e 	bl	8000880 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bc4:	2360      	movs	r3, #96	; 0x60
 8000bc6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000bd4:	1d3b      	adds	r3, r7, #4
 8000bd6:	220c      	movs	r2, #12
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4807      	ldr	r0, [pc, #28]	; (8000bf8 <MX_TIM4_Init+0xe4>)
 8000bdc:	f001 ff62 	bl	8002aa4 <HAL_TIM_PWM_ConfigChannel>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8000be6:	f7ff fe4b 	bl	8000880 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000bea:	4803      	ldr	r0, [pc, #12]	; (8000bf8 <MX_TIM4_Init+0xe4>)
 8000bec:	f000 f906 	bl	8000dfc <HAL_TIM_MspPostInit>

}
 8000bf0:	bf00      	nop
 8000bf2:	3738      	adds	r7, #56	; 0x38
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	20000098 	.word	0x20000098
 8000bfc:	40000800 	.word	0x40000800

08000c00 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b088      	sub	sp, #32
 8000c04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c06:	1d3b      	adds	r3, r7, #4
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	605a      	str	r2, [r3, #4]
 8000c0e:	609a      	str	r2, [r3, #8]
 8000c10:	60da      	str	r2, [r3, #12]
 8000c12:	611a      	str	r2, [r3, #16]
 8000c14:	615a      	str	r2, [r3, #20]
 8000c16:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8000c18:	4b1a      	ldr	r3, [pc, #104]	; (8000c84 <MX_TIM12_Init+0x84>)
 8000c1a:	4a1b      	ldr	r2, [pc, #108]	; (8000c88 <MX_TIM12_Init+0x88>)
 8000c1c:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8000c1e:	4b19      	ldr	r3, [pc, #100]	; (8000c84 <MX_TIM12_Init+0x84>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c24:	4b17      	ldr	r3, [pc, #92]	; (8000c84 <MX_TIM12_Init+0x84>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8000c2a:	4b16      	ldr	r3, [pc, #88]	; (8000c84 <MX_TIM12_Init+0x84>)
 8000c2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c30:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c32:	4b14      	ldr	r3, [pc, #80]	; (8000c84 <MX_TIM12_Init+0x84>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c38:	4b12      	ldr	r3, [pc, #72]	; (8000c84 <MX_TIM12_Init+0x84>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8000c3e:	4811      	ldr	r0, [pc, #68]	; (8000c84 <MX_TIM12_Init+0x84>)
 8000c40:	f001 fe18 	bl	8002874 <HAL_TIM_PWM_Init>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8000c4a:	f7ff fe19 	bl	8000880 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c4e:	2360      	movs	r3, #96	; 0x60
 8000c50:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000c52:	2300      	movs	r3, #0
 8000c54:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c56:	2300      	movs	r3, #0
 8000c58:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c5e:	1d3b      	adds	r3, r7, #4
 8000c60:	2200      	movs	r2, #0
 8000c62:	4619      	mov	r1, r3
 8000c64:	4807      	ldr	r0, [pc, #28]	; (8000c84 <MX_TIM12_Init+0x84>)
 8000c66:	f001 ff1d 	bl	8002aa4 <HAL_TIM_PWM_ConfigChannel>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8000c70:	f7ff fe06 	bl	8000880 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8000c74:	4803      	ldr	r0, [pc, #12]	; (8000c84 <MX_TIM12_Init+0x84>)
 8000c76:	f000 f8c1 	bl	8000dfc <HAL_TIM_MspPostInit>

}
 8000c7a:	bf00      	nop
 8000c7c:	3720      	adds	r7, #32
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	200000e0 	.word	0x200000e0
 8000c88:	40001800 	.word	0x40001800

08000c8c <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8000c90:	4b0e      	ldr	r3, [pc, #56]	; (8000ccc <MX_TIM13_Init+0x40>)
 8000c92:	4a0f      	ldr	r2, [pc, #60]	; (8000cd0 <MX_TIM13_Init+0x44>)
 8000c94:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 15999;
 8000c96:	4b0d      	ldr	r3, [pc, #52]	; (8000ccc <MX_TIM13_Init+0x40>)
 8000c98:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8000c9c:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c9e:	4b0b      	ldr	r3, [pc, #44]	; (8000ccc <MX_TIM13_Init+0x40>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 2000;
 8000ca4:	4b09      	ldr	r3, [pc, #36]	; (8000ccc <MX_TIM13_Init+0x40>)
 8000ca6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000caa:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cac:	4b07      	ldr	r3, [pc, #28]	; (8000ccc <MX_TIM13_Init+0x40>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cb2:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <MX_TIM13_Init+0x40>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8000cb8:	4804      	ldr	r0, [pc, #16]	; (8000ccc <MX_TIM13_Init+0x40>)
 8000cba:	f001 fd23 	bl	8002704 <HAL_TIM_Base_Init>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 8000cc4:	f7ff fddc 	bl	8000880 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8000cc8:	bf00      	nop
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	20000128 	.word	0x20000128
 8000cd0:	40001c00 	.word	0x40001c00

08000cd4 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000cd8:	4b0e      	ldr	r3, [pc, #56]	; (8000d14 <MX_TIM14_Init+0x40>)
 8000cda:	4a0f      	ldr	r2, [pc, #60]	; (8000d18 <MX_TIM14_Init+0x44>)
 8000cdc:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 15999;
 8000cde:	4b0d      	ldr	r3, [pc, #52]	; (8000d14 <MX_TIM14_Init+0x40>)
 8000ce0:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8000ce4:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ce6:	4b0b      	ldr	r3, [pc, #44]	; (8000d14 <MX_TIM14_Init+0x40>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 5000;
 8000cec:	4b09      	ldr	r3, [pc, #36]	; (8000d14 <MX_TIM14_Init+0x40>)
 8000cee:	f241 3288 	movw	r2, #5000	; 0x1388
 8000cf2:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cf4:	4b07      	ldr	r3, [pc, #28]	; (8000d14 <MX_TIM14_Init+0x40>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cfa:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <MX_TIM14_Init+0x40>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000d00:	4804      	ldr	r0, [pc, #16]	; (8000d14 <MX_TIM14_Init+0x40>)
 8000d02:	f001 fcff 	bl	8002704 <HAL_TIM_Base_Init>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <MX_TIM14_Init+0x3c>
  {
    Error_Handler();
 8000d0c:	f7ff fdb8 	bl	8000880 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000d10:	bf00      	nop
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	20000170 	.word	0x20000170
 8000d18:	40002000 	.word	0x40002000

08000d1c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b087      	sub	sp, #28
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a1f      	ldr	r2, [pc, #124]	; (8000da8 <HAL_TIM_Base_MspInit+0x8c>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d10e      	bne.n	8000d4c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000d2e:	2300      	movs	r3, #0
 8000d30:	617b      	str	r3, [r7, #20]
 8000d32:	4b1e      	ldr	r3, [pc, #120]	; (8000dac <HAL_TIM_Base_MspInit+0x90>)
 8000d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d36:	4a1d      	ldr	r2, [pc, #116]	; (8000dac <HAL_TIM_Base_MspInit+0x90>)
 8000d38:	f043 0304 	orr.w	r3, r3, #4
 8000d3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d3e:	4b1b      	ldr	r3, [pc, #108]	; (8000dac <HAL_TIM_Base_MspInit+0x90>)
 8000d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d42:	f003 0304 	and.w	r3, r3, #4
 8000d46:	617b      	str	r3, [r7, #20]
 8000d48:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM14_CLK_ENABLE();
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 8000d4a:	e026      	b.n	8000d9a <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM13)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a17      	ldr	r2, [pc, #92]	; (8000db0 <HAL_TIM_Base_MspInit+0x94>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d10e      	bne.n	8000d74 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	613b      	str	r3, [r7, #16]
 8000d5a:	4b14      	ldr	r3, [pc, #80]	; (8000dac <HAL_TIM_Base_MspInit+0x90>)
 8000d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5e:	4a13      	ldr	r2, [pc, #76]	; (8000dac <HAL_TIM_Base_MspInit+0x90>)
 8000d60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d64:	6413      	str	r3, [r2, #64]	; 0x40
 8000d66:	4b11      	ldr	r3, [pc, #68]	; (8000dac <HAL_TIM_Base_MspInit+0x90>)
 8000d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d6e:	613b      	str	r3, [r7, #16]
 8000d70:	693b      	ldr	r3, [r7, #16]
}
 8000d72:	e012      	b.n	8000d9a <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM14)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a0e      	ldr	r2, [pc, #56]	; (8000db4 <HAL_TIM_Base_MspInit+0x98>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d10d      	bne.n	8000d9a <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000d7e:	2300      	movs	r3, #0
 8000d80:	60fb      	str	r3, [r7, #12]
 8000d82:	4b0a      	ldr	r3, [pc, #40]	; (8000dac <HAL_TIM_Base_MspInit+0x90>)
 8000d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d86:	4a09      	ldr	r2, [pc, #36]	; (8000dac <HAL_TIM_Base_MspInit+0x90>)
 8000d88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d8e:	4b07      	ldr	r3, [pc, #28]	; (8000dac <HAL_TIM_Base_MspInit+0x90>)
 8000d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d96:	60fb      	str	r3, [r7, #12]
 8000d98:	68fb      	ldr	r3, [r7, #12]
}
 8000d9a:	bf00      	nop
 8000d9c:	371c      	adds	r7, #28
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	40000800 	.word	0x40000800
 8000dac:	40023800 	.word	0x40023800
 8000db0:	40001c00 	.word	0x40001c00
 8000db4:	40002000 	.word	0x40002000

08000db8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b085      	sub	sp, #20
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM12)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a0b      	ldr	r2, [pc, #44]	; (8000df4 <HAL_TIM_PWM_MspInit+0x3c>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d10d      	bne.n	8000de6 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* TIM12 clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8000dca:	2300      	movs	r3, #0
 8000dcc:	60fb      	str	r3, [r7, #12]
 8000dce:	4b0a      	ldr	r3, [pc, #40]	; (8000df8 <HAL_TIM_PWM_MspInit+0x40>)
 8000dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd2:	4a09      	ldr	r2, [pc, #36]	; (8000df8 <HAL_TIM_PWM_MspInit+0x40>)
 8000dd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dd8:	6413      	str	r3, [r2, #64]	; 0x40
 8000dda:	4b07      	ldr	r3, [pc, #28]	; (8000df8 <HAL_TIM_PWM_MspInit+0x40>)
 8000ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000de2:	60fb      	str	r3, [r7, #12]
 8000de4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8000de6:	bf00      	nop
 8000de8:	3714      	adds	r7, #20
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	40001800 	.word	0x40001800
 8000df8:	40023800 	.word	0x40023800

08000dfc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b08a      	sub	sp, #40	; 0x28
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e04:	f107 0314 	add.w	r3, r7, #20
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	605a      	str	r2, [r3, #4]
 8000e0e:	609a      	str	r2, [r3, #8]
 8000e10:	60da      	str	r2, [r3, #12]
 8000e12:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a25      	ldr	r2, [pc, #148]	; (8000eb0 <HAL_TIM_MspPostInit+0xb4>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d11f      	bne.n	8000e5e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e1e:	2300      	movs	r3, #0
 8000e20:	613b      	str	r3, [r7, #16]
 8000e22:	4b24      	ldr	r3, [pc, #144]	; (8000eb4 <HAL_TIM_MspPostInit+0xb8>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e26:	4a23      	ldr	r2, [pc, #140]	; (8000eb4 <HAL_TIM_MspPostInit+0xb8>)
 8000e28:	f043 0308 	orr.w	r3, r3, #8
 8000e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2e:	4b21      	ldr	r3, [pc, #132]	; (8000eb4 <HAL_TIM_MspPostInit+0xb8>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e32:	f003 0308 	and.w	r3, r3, #8
 8000e36:	613b      	str	r3, [r7, #16]
 8000e38:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000e3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e40:	2302      	movs	r3, #2
 8000e42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e44:	2300      	movs	r3, #0
 8000e46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e50:	f107 0314 	add.w	r3, r7, #20
 8000e54:	4619      	mov	r1, r3
 8000e56:	4818      	ldr	r0, [pc, #96]	; (8000eb8 <HAL_TIM_MspPostInit+0xbc>)
 8000e58:	f000 fe2e 	bl	8001ab8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8000e5c:	e023      	b.n	8000ea6 <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM12)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4a16      	ldr	r2, [pc, #88]	; (8000ebc <HAL_TIM_MspPostInit+0xc0>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d11e      	bne.n	8000ea6 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e68:	2300      	movs	r3, #0
 8000e6a:	60fb      	str	r3, [r7, #12]
 8000e6c:	4b11      	ldr	r3, [pc, #68]	; (8000eb4 <HAL_TIM_MspPostInit+0xb8>)
 8000e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e70:	4a10      	ldr	r2, [pc, #64]	; (8000eb4 <HAL_TIM_MspPostInit+0xb8>)
 8000e72:	f043 0302 	orr.w	r3, r3, #2
 8000e76:	6313      	str	r3, [r2, #48]	; 0x30
 8000e78:	4b0e      	ldr	r3, [pc, #56]	; (8000eb4 <HAL_TIM_MspPostInit+0xb8>)
 8000e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7c:	f003 0302 	and.w	r3, r3, #2
 8000e80:	60fb      	str	r3, [r7, #12]
 8000e82:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000e84:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e92:	2300      	movs	r3, #0
 8000e94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8000e96:	2309      	movs	r3, #9
 8000e98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e9a:	f107 0314 	add.w	r3, r7, #20
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4807      	ldr	r0, [pc, #28]	; (8000ec0 <HAL_TIM_MspPostInit+0xc4>)
 8000ea2:	f000 fe09 	bl	8001ab8 <HAL_GPIO_Init>
}
 8000ea6:	bf00      	nop
 8000ea8:	3728      	adds	r7, #40	; 0x28
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	40000800 	.word	0x40000800
 8000eb4:	40023800 	.word	0x40023800
 8000eb8:	40020c00 	.word	0x40020c00
 8000ebc:	40001800 	.word	0x40001800
 8000ec0:	40020400 	.word	0x40020400

08000ec4 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ec8:	4b11      	ldr	r3, [pc, #68]	; (8000f10 <MX_USART2_UART_Init+0x4c>)
 8000eca:	4a12      	ldr	r2, [pc, #72]	; (8000f14 <MX_USART2_UART_Init+0x50>)
 8000ecc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000ece:	4b10      	ldr	r3, [pc, #64]	; (8000f10 <MX_USART2_UART_Init+0x4c>)
 8000ed0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000ed4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ed6:	4b0e      	ldr	r3, [pc, #56]	; (8000f10 <MX_USART2_UART_Init+0x4c>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000edc:	4b0c      	ldr	r3, [pc, #48]	; (8000f10 <MX_USART2_UART_Init+0x4c>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ee2:	4b0b      	ldr	r3, [pc, #44]	; (8000f10 <MX_USART2_UART_Init+0x4c>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ee8:	4b09      	ldr	r3, [pc, #36]	; (8000f10 <MX_USART2_UART_Init+0x4c>)
 8000eea:	220c      	movs	r2, #12
 8000eec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eee:	4b08      	ldr	r3, [pc, #32]	; (8000f10 <MX_USART2_UART_Init+0x4c>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ef4:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <MX_USART2_UART_Init+0x4c>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000efa:	4805      	ldr	r0, [pc, #20]	; (8000f10 <MX_USART2_UART_Init+0x4c>)
 8000efc:	f002 faf4 	bl	80034e8 <HAL_UART_Init>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f06:	f7ff fcbb 	bl	8000880 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	200001b8 	.word	0x200001b8
 8000f14:	40004400 	.word	0x40004400

08000f18 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b08a      	sub	sp, #40	; 0x28
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f20:	f107 0314 	add.w	r3, r7, #20
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	609a      	str	r2, [r3, #8]
 8000f2c:	60da      	str	r2, [r3, #12]
 8000f2e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a34      	ldr	r2, [pc, #208]	; (8001008 <HAL_UART_MspInit+0xf0>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d161      	bne.n	8000ffe <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	613b      	str	r3, [r7, #16]
 8000f3e:	4b33      	ldr	r3, [pc, #204]	; (800100c <HAL_UART_MspInit+0xf4>)
 8000f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f42:	4a32      	ldr	r2, [pc, #200]	; (800100c <HAL_UART_MspInit+0xf4>)
 8000f44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f48:	6413      	str	r3, [r2, #64]	; 0x40
 8000f4a:	4b30      	ldr	r3, [pc, #192]	; (800100c <HAL_UART_MspInit+0xf4>)
 8000f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f52:	613b      	str	r3, [r7, #16]
 8000f54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f56:	2300      	movs	r3, #0
 8000f58:	60fb      	str	r3, [r7, #12]
 8000f5a:	4b2c      	ldr	r3, [pc, #176]	; (800100c <HAL_UART_MspInit+0xf4>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	4a2b      	ldr	r2, [pc, #172]	; (800100c <HAL_UART_MspInit+0xf4>)
 8000f60:	f043 0301 	orr.w	r3, r3, #1
 8000f64:	6313      	str	r3, [r2, #48]	; 0x30
 8000f66:	4b29      	ldr	r3, [pc, #164]	; (800100c <HAL_UART_MspInit+0xf4>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	f003 0301 	and.w	r3, r3, #1
 8000f6e:	60fb      	str	r3, [r7, #12]
 8000f70:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f72:	230c      	movs	r3, #12
 8000f74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f76:	2302      	movs	r3, #2
 8000f78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f7e:	2303      	movs	r3, #3
 8000f80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f82:	2307      	movs	r3, #7
 8000f84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f86:	f107 0314 	add.w	r3, r7, #20
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4820      	ldr	r0, [pc, #128]	; (8001010 <HAL_UART_MspInit+0xf8>)
 8000f8e:	f000 fd93 	bl	8001ab8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8000f92:	4b20      	ldr	r3, [pc, #128]	; (8001014 <HAL_UART_MspInit+0xfc>)
 8000f94:	4a20      	ldr	r2, [pc, #128]	; (8001018 <HAL_UART_MspInit+0x100>)
 8000f96:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8000f98:	4b1e      	ldr	r3, [pc, #120]	; (8001014 <HAL_UART_MspInit+0xfc>)
 8000f9a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f9e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000fa0:	4b1c      	ldr	r3, [pc, #112]	; (8001014 <HAL_UART_MspInit+0xfc>)
 8000fa2:	2240      	movs	r2, #64	; 0x40
 8000fa4:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fa6:	4b1b      	ldr	r3, [pc, #108]	; (8001014 <HAL_UART_MspInit+0xfc>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000fac:	4b19      	ldr	r3, [pc, #100]	; (8001014 <HAL_UART_MspInit+0xfc>)
 8000fae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fb2:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fb4:	4b17      	ldr	r3, [pc, #92]	; (8001014 <HAL_UART_MspInit+0xfc>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fba:	4b16      	ldr	r3, [pc, #88]	; (8001014 <HAL_UART_MspInit+0xfc>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000fc0:	4b14      	ldr	r3, [pc, #80]	; (8001014 <HAL_UART_MspInit+0xfc>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000fc6:	4b13      	ldr	r3, [pc, #76]	; (8001014 <HAL_UART_MspInit+0xfc>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fcc:	4b11      	ldr	r3, [pc, #68]	; (8001014 <HAL_UART_MspInit+0xfc>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000fd2:	4810      	ldr	r0, [pc, #64]	; (8001014 <HAL_UART_MspInit+0xfc>)
 8000fd4:	f000 f9f4 	bl	80013c0 <HAL_DMA_Init>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8000fde:	f7ff fc4f 	bl	8000880 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4a0b      	ldr	r2, [pc, #44]	; (8001014 <HAL_UART_MspInit+0xfc>)
 8000fe6:	639a      	str	r2, [r3, #56]	; 0x38
 8000fe8:	4a0a      	ldr	r2, [pc, #40]	; (8001014 <HAL_UART_MspInit+0xfc>)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000fee:	2200      	movs	r2, #0
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	2026      	movs	r0, #38	; 0x26
 8000ff4:	f000 f9ad 	bl	8001352 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ff8:	2026      	movs	r0, #38	; 0x26
 8000ffa:	f000 f9c6 	bl	800138a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000ffe:	bf00      	nop
 8001000:	3728      	adds	r7, #40	; 0x28
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40004400 	.word	0x40004400
 800100c:	40023800 	.word	0x40023800
 8001010:	40020000 	.word	0x40020000
 8001014:	20000200 	.word	0x20000200
 8001018:	400260a0 	.word	0x400260a0

0800101c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800101c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001054 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001020:	f7ff fd66 	bl	8000af0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001024:	480c      	ldr	r0, [pc, #48]	; (8001058 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001026:	490d      	ldr	r1, [pc, #52]	; (800105c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001028:	4a0d      	ldr	r2, [pc, #52]	; (8001060 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800102a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800102c:	e002      	b.n	8001034 <LoopCopyDataInit>

0800102e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800102e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001030:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001032:	3304      	adds	r3, #4

08001034 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001034:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001036:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001038:	d3f9      	bcc.n	800102e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800103a:	4a0a      	ldr	r2, [pc, #40]	; (8001064 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800103c:	4c0a      	ldr	r4, [pc, #40]	; (8001068 <LoopFillZerobss+0x22>)
  movs r3, #0
 800103e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001040:	e001      	b.n	8001046 <LoopFillZerobss>

08001042 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001042:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001044:	3204      	adds	r2, #4

08001046 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001046:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001048:	d3fb      	bcc.n	8001042 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800104a:	f003 fad7 	bl	80045fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800104e:	f7ff fb51 	bl	80006f4 <main>
  bx  lr    
 8001052:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001054:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001058:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800105c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001060:	08005224 	.word	0x08005224
  ldr r2, =_sbss
 8001064:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001068:	200003b0 	.word	0x200003b0

0800106c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800106c:	e7fe      	b.n	800106c <ADC_IRQHandler>
	...

08001070 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001074:	4b0e      	ldr	r3, [pc, #56]	; (80010b0 <HAL_Init+0x40>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a0d      	ldr	r2, [pc, #52]	; (80010b0 <HAL_Init+0x40>)
 800107a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800107e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001080:	4b0b      	ldr	r3, [pc, #44]	; (80010b0 <HAL_Init+0x40>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a0a      	ldr	r2, [pc, #40]	; (80010b0 <HAL_Init+0x40>)
 8001086:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800108a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800108c:	4b08      	ldr	r3, [pc, #32]	; (80010b0 <HAL_Init+0x40>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a07      	ldr	r2, [pc, #28]	; (80010b0 <HAL_Init+0x40>)
 8001092:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001096:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001098:	2003      	movs	r0, #3
 800109a:	f000 f94f 	bl	800133c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800109e:	200f      	movs	r0, #15
 80010a0:	f000 f808 	bl	80010b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010a4:	f7ff fbf2 	bl	800088c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010a8:	2300      	movs	r3, #0
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	40023c00 	.word	0x40023c00

080010b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010bc:	4b12      	ldr	r3, [pc, #72]	; (8001108 <HAL_InitTick+0x54>)
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	4b12      	ldr	r3, [pc, #72]	; (800110c <HAL_InitTick+0x58>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	4619      	mov	r1, r3
 80010c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80010d2:	4618      	mov	r0, r3
 80010d4:	f000 f967 	bl	80013a6 <HAL_SYSTICK_Config>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
 80010e0:	e00e      	b.n	8001100 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2b0f      	cmp	r3, #15
 80010e6:	d80a      	bhi.n	80010fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010e8:	2200      	movs	r2, #0
 80010ea:	6879      	ldr	r1, [r7, #4]
 80010ec:	f04f 30ff 	mov.w	r0, #4294967295
 80010f0:	f000 f92f 	bl	8001352 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010f4:	4a06      	ldr	r2, [pc, #24]	; (8001110 <HAL_InitTick+0x5c>)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010fa:	2300      	movs	r3, #0
 80010fc:	e000      	b.n	8001100 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
}
 8001100:	4618      	mov	r0, r3
 8001102:	3708      	adds	r7, #8
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	20000010 	.word	0x20000010
 800110c:	20000018 	.word	0x20000018
 8001110:	20000014 	.word	0x20000014

08001114 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001118:	4b06      	ldr	r3, [pc, #24]	; (8001134 <HAL_IncTick+0x20>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	461a      	mov	r2, r3
 800111e:	4b06      	ldr	r3, [pc, #24]	; (8001138 <HAL_IncTick+0x24>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4413      	add	r3, r2
 8001124:	4a04      	ldr	r2, [pc, #16]	; (8001138 <HAL_IncTick+0x24>)
 8001126:	6013      	str	r3, [r2, #0]
}
 8001128:	bf00      	nop
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	20000018 	.word	0x20000018
 8001138:	20000260 	.word	0x20000260

0800113c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  return uwTick;
 8001140:	4b03      	ldr	r3, [pc, #12]	; (8001150 <HAL_GetTick+0x14>)
 8001142:	681b      	ldr	r3, [r3, #0]
}
 8001144:	4618      	mov	r0, r3
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	20000260 	.word	0x20000260

08001154 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800115c:	f7ff ffee 	bl	800113c <HAL_GetTick>
 8001160:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800116c:	d005      	beq.n	800117a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800116e:	4b0a      	ldr	r3, [pc, #40]	; (8001198 <HAL_Delay+0x44>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	461a      	mov	r2, r3
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	4413      	add	r3, r2
 8001178:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800117a:	bf00      	nop
 800117c:	f7ff ffde 	bl	800113c <HAL_GetTick>
 8001180:	4602      	mov	r2, r0
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	68fa      	ldr	r2, [r7, #12]
 8001188:	429a      	cmp	r2, r3
 800118a:	d8f7      	bhi.n	800117c <HAL_Delay+0x28>
  {
  }
}
 800118c:	bf00      	nop
 800118e:	bf00      	nop
 8001190:	3710      	adds	r7, #16
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	20000018 	.word	0x20000018

0800119c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800119c:	b480      	push	{r7}
 800119e:	b085      	sub	sp, #20
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	f003 0307 	and.w	r3, r3, #7
 80011aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011ac:	4b0c      	ldr	r3, [pc, #48]	; (80011e0 <__NVIC_SetPriorityGrouping+0x44>)
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011b2:	68ba      	ldr	r2, [r7, #8]
 80011b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011b8:	4013      	ands	r3, r2
 80011ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011ce:	4a04      	ldr	r2, [pc, #16]	; (80011e0 <__NVIC_SetPriorityGrouping+0x44>)
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	60d3      	str	r3, [r2, #12]
}
 80011d4:	bf00      	nop
 80011d6:	3714      	adds	r7, #20
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr
 80011e0:	e000ed00 	.word	0xe000ed00

080011e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011e8:	4b04      	ldr	r3, [pc, #16]	; (80011fc <__NVIC_GetPriorityGrouping+0x18>)
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	0a1b      	lsrs	r3, r3, #8
 80011ee:	f003 0307 	and.w	r3, r3, #7
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr
 80011fc:	e000ed00 	.word	0xe000ed00

08001200 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800120a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120e:	2b00      	cmp	r3, #0
 8001210:	db0b      	blt.n	800122a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001212:	79fb      	ldrb	r3, [r7, #7]
 8001214:	f003 021f 	and.w	r2, r3, #31
 8001218:	4907      	ldr	r1, [pc, #28]	; (8001238 <__NVIC_EnableIRQ+0x38>)
 800121a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121e:	095b      	lsrs	r3, r3, #5
 8001220:	2001      	movs	r0, #1
 8001222:	fa00 f202 	lsl.w	r2, r0, r2
 8001226:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800122a:	bf00      	nop
 800122c:	370c      	adds	r7, #12
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	e000e100 	.word	0xe000e100

0800123c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	4603      	mov	r3, r0
 8001244:	6039      	str	r1, [r7, #0]
 8001246:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001248:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124c:	2b00      	cmp	r3, #0
 800124e:	db0a      	blt.n	8001266 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	b2da      	uxtb	r2, r3
 8001254:	490c      	ldr	r1, [pc, #48]	; (8001288 <__NVIC_SetPriority+0x4c>)
 8001256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125a:	0112      	lsls	r2, r2, #4
 800125c:	b2d2      	uxtb	r2, r2
 800125e:	440b      	add	r3, r1
 8001260:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001264:	e00a      	b.n	800127c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	b2da      	uxtb	r2, r3
 800126a:	4908      	ldr	r1, [pc, #32]	; (800128c <__NVIC_SetPriority+0x50>)
 800126c:	79fb      	ldrb	r3, [r7, #7]
 800126e:	f003 030f 	and.w	r3, r3, #15
 8001272:	3b04      	subs	r3, #4
 8001274:	0112      	lsls	r2, r2, #4
 8001276:	b2d2      	uxtb	r2, r2
 8001278:	440b      	add	r3, r1
 800127a:	761a      	strb	r2, [r3, #24]
}
 800127c:	bf00      	nop
 800127e:	370c      	adds	r7, #12
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr
 8001288:	e000e100 	.word	0xe000e100
 800128c:	e000ed00 	.word	0xe000ed00

08001290 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001290:	b480      	push	{r7}
 8001292:	b089      	sub	sp, #36	; 0x24
 8001294:	af00      	add	r7, sp, #0
 8001296:	60f8      	str	r0, [r7, #12]
 8001298:	60b9      	str	r1, [r7, #8]
 800129a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	f003 0307 	and.w	r3, r3, #7
 80012a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	f1c3 0307 	rsb	r3, r3, #7
 80012aa:	2b04      	cmp	r3, #4
 80012ac:	bf28      	it	cs
 80012ae:	2304      	movcs	r3, #4
 80012b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	3304      	adds	r3, #4
 80012b6:	2b06      	cmp	r3, #6
 80012b8:	d902      	bls.n	80012c0 <NVIC_EncodePriority+0x30>
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	3b03      	subs	r3, #3
 80012be:	e000      	b.n	80012c2 <NVIC_EncodePriority+0x32>
 80012c0:	2300      	movs	r3, #0
 80012c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c4:	f04f 32ff 	mov.w	r2, #4294967295
 80012c8:	69bb      	ldr	r3, [r7, #24]
 80012ca:	fa02 f303 	lsl.w	r3, r2, r3
 80012ce:	43da      	mvns	r2, r3
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	401a      	ands	r2, r3
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012d8:	f04f 31ff 	mov.w	r1, #4294967295
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	fa01 f303 	lsl.w	r3, r1, r3
 80012e2:	43d9      	mvns	r1, r3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e8:	4313      	orrs	r3, r2
         );
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3724      	adds	r7, #36	; 0x24
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
	...

080012f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	3b01      	subs	r3, #1
 8001304:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001308:	d301      	bcc.n	800130e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800130a:	2301      	movs	r3, #1
 800130c:	e00f      	b.n	800132e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800130e:	4a0a      	ldr	r2, [pc, #40]	; (8001338 <SysTick_Config+0x40>)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	3b01      	subs	r3, #1
 8001314:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001316:	210f      	movs	r1, #15
 8001318:	f04f 30ff 	mov.w	r0, #4294967295
 800131c:	f7ff ff8e 	bl	800123c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001320:	4b05      	ldr	r3, [pc, #20]	; (8001338 <SysTick_Config+0x40>)
 8001322:	2200      	movs	r2, #0
 8001324:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001326:	4b04      	ldr	r3, [pc, #16]	; (8001338 <SysTick_Config+0x40>)
 8001328:	2207      	movs	r2, #7
 800132a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800132c:	2300      	movs	r3, #0
}
 800132e:	4618      	mov	r0, r3
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	e000e010 	.word	0xe000e010

0800133c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	f7ff ff29 	bl	800119c <__NVIC_SetPriorityGrouping>
}
 800134a:	bf00      	nop
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}

08001352 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001352:	b580      	push	{r7, lr}
 8001354:	b086      	sub	sp, #24
 8001356:	af00      	add	r7, sp, #0
 8001358:	4603      	mov	r3, r0
 800135a:	60b9      	str	r1, [r7, #8]
 800135c:	607a      	str	r2, [r7, #4]
 800135e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001360:	2300      	movs	r3, #0
 8001362:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001364:	f7ff ff3e 	bl	80011e4 <__NVIC_GetPriorityGrouping>
 8001368:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800136a:	687a      	ldr	r2, [r7, #4]
 800136c:	68b9      	ldr	r1, [r7, #8]
 800136e:	6978      	ldr	r0, [r7, #20]
 8001370:	f7ff ff8e 	bl	8001290 <NVIC_EncodePriority>
 8001374:	4602      	mov	r2, r0
 8001376:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800137a:	4611      	mov	r1, r2
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff ff5d 	bl	800123c <__NVIC_SetPriority>
}
 8001382:	bf00      	nop
 8001384:	3718      	adds	r7, #24
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}

0800138a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800138a:	b580      	push	{r7, lr}
 800138c:	b082      	sub	sp, #8
 800138e:	af00      	add	r7, sp, #0
 8001390:	4603      	mov	r3, r0
 8001392:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001394:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff ff31 	bl	8001200 <__NVIC_EnableIRQ>
}
 800139e:	bf00      	nop
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013a6:	b580      	push	{r7, lr}
 80013a8:	b082      	sub	sp, #8
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f7ff ffa2 	bl	80012f8 <SysTick_Config>
 80013b4:	4603      	mov	r3, r0
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
	...

080013c0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b086      	sub	sp, #24
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80013c8:	2300      	movs	r3, #0
 80013ca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80013cc:	f7ff feb6 	bl	800113c <HAL_GetTick>
 80013d0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d101      	bne.n	80013dc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80013d8:	2301      	movs	r3, #1
 80013da:	e099      	b.n	8001510 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2202      	movs	r2, #2
 80013e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2200      	movs	r2, #0
 80013e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f022 0201 	bic.w	r2, r2, #1
 80013fa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013fc:	e00f      	b.n	800141e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80013fe:	f7ff fe9d 	bl	800113c <HAL_GetTick>
 8001402:	4602      	mov	r2, r0
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	1ad3      	subs	r3, r2, r3
 8001408:	2b05      	cmp	r3, #5
 800140a:	d908      	bls.n	800141e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2220      	movs	r2, #32
 8001410:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2203      	movs	r2, #3
 8001416:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800141a:	2303      	movs	r3, #3
 800141c:	e078      	b.n	8001510 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f003 0301 	and.w	r3, r3, #1
 8001428:	2b00      	cmp	r3, #0
 800142a:	d1e8      	bne.n	80013fe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001434:	697a      	ldr	r2, [r7, #20]
 8001436:	4b38      	ldr	r3, [pc, #224]	; (8001518 <HAL_DMA_Init+0x158>)
 8001438:	4013      	ands	r3, r2
 800143a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	685a      	ldr	r2, [r3, #4]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	689b      	ldr	r3, [r3, #8]
 8001444:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800144a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	691b      	ldr	r3, [r3, #16]
 8001450:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001456:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	699b      	ldr	r3, [r3, #24]
 800145c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001462:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6a1b      	ldr	r3, [r3, #32]
 8001468:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800146a:	697a      	ldr	r2, [r7, #20]
 800146c:	4313      	orrs	r3, r2
 800146e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001474:	2b04      	cmp	r3, #4
 8001476:	d107      	bne.n	8001488 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001480:	4313      	orrs	r3, r2
 8001482:	697a      	ldr	r2, [r7, #20]
 8001484:	4313      	orrs	r3, r2
 8001486:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	697a      	ldr	r2, [r7, #20]
 800148e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	695b      	ldr	r3, [r3, #20]
 8001496:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	f023 0307 	bic.w	r3, r3, #7
 800149e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a4:	697a      	ldr	r2, [r7, #20]
 80014a6:	4313      	orrs	r3, r2
 80014a8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ae:	2b04      	cmp	r3, #4
 80014b0:	d117      	bne.n	80014e2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014b6:	697a      	ldr	r2, [r7, #20]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d00e      	beq.n	80014e2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f000 fa7b 	bl	80019c0 <DMA_CheckFifoParam>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d008      	beq.n	80014e2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2240      	movs	r2, #64	; 0x40
 80014d4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2201      	movs	r2, #1
 80014da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80014de:	2301      	movs	r3, #1
 80014e0:	e016      	b.n	8001510 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	697a      	ldr	r2, [r7, #20]
 80014e8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f000 fa32 	bl	8001954 <DMA_CalcBaseAndBitshift>
 80014f0:	4603      	mov	r3, r0
 80014f2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014f8:	223f      	movs	r2, #63	; 0x3f
 80014fa:	409a      	lsls	r2, r3
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2200      	movs	r2, #0
 8001504:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2201      	movs	r2, #1
 800150a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800150e:	2300      	movs	r3, #0
}
 8001510:	4618      	mov	r0, r3
 8001512:	3718      	adds	r7, #24
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	f010803f 	.word	0xf010803f

0800151c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b084      	sub	sp, #16
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001528:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800152a:	f7ff fe07 	bl	800113c <HAL_GetTick>
 800152e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001536:	b2db      	uxtb	r3, r3
 8001538:	2b02      	cmp	r3, #2
 800153a:	d008      	beq.n	800154e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2280      	movs	r2, #128	; 0x80
 8001540:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2200      	movs	r2, #0
 8001546:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e052      	b.n	80015f4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f022 0216 	bic.w	r2, r2, #22
 800155c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	695a      	ldr	r2, [r3, #20]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800156c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001572:	2b00      	cmp	r3, #0
 8001574:	d103      	bne.n	800157e <HAL_DMA_Abort+0x62>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800157a:	2b00      	cmp	r3, #0
 800157c:	d007      	beq.n	800158e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f022 0208 	bic.w	r2, r2, #8
 800158c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f022 0201 	bic.w	r2, r2, #1
 800159c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800159e:	e013      	b.n	80015c8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80015a0:	f7ff fdcc 	bl	800113c <HAL_GetTick>
 80015a4:	4602      	mov	r2, r0
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	2b05      	cmp	r3, #5
 80015ac:	d90c      	bls.n	80015c8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2220      	movs	r2, #32
 80015b2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2203      	movs	r2, #3
 80015b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2200      	movs	r2, #0
 80015c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80015c4:	2303      	movs	r3, #3
 80015c6:	e015      	b.n	80015f4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 0301 	and.w	r3, r3, #1
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d1e4      	bne.n	80015a0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015da:	223f      	movs	r2, #63	; 0x3f
 80015dc:	409a      	lsls	r2, r3
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2201      	movs	r2, #1
 80015e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2200      	movs	r2, #0
 80015ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80015f2:	2300      	movs	r3, #0
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3710      	adds	r7, #16
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}

080015fc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800160a:	b2db      	uxtb	r3, r3
 800160c:	2b02      	cmp	r3, #2
 800160e:	d004      	beq.n	800161a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2280      	movs	r2, #128	; 0x80
 8001614:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e00c      	b.n	8001634 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2205      	movs	r2, #5
 800161e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f022 0201 	bic.w	r2, r2, #1
 8001630:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001632:	2300      	movs	r3, #0
}
 8001634:	4618      	mov	r0, r3
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr

08001640 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b086      	sub	sp, #24
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001648:	2300      	movs	r3, #0
 800164a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800164c:	4b8e      	ldr	r3, [pc, #568]	; (8001888 <HAL_DMA_IRQHandler+0x248>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a8e      	ldr	r2, [pc, #568]	; (800188c <HAL_DMA_IRQHandler+0x24c>)
 8001652:	fba2 2303 	umull	r2, r3, r2, r3
 8001656:	0a9b      	lsrs	r3, r3, #10
 8001658:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800165e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800166a:	2208      	movs	r2, #8
 800166c:	409a      	lsls	r2, r3
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	4013      	ands	r3, r2
 8001672:	2b00      	cmp	r3, #0
 8001674:	d01a      	beq.n	80016ac <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 0304 	and.w	r3, r3, #4
 8001680:	2b00      	cmp	r3, #0
 8001682:	d013      	beq.n	80016ac <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f022 0204 	bic.w	r2, r2, #4
 8001692:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001698:	2208      	movs	r2, #8
 800169a:	409a      	lsls	r2, r3
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016a4:	f043 0201 	orr.w	r2, r3, #1
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016b0:	2201      	movs	r2, #1
 80016b2:	409a      	lsls	r2, r3
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	4013      	ands	r3, r2
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d012      	beq.n	80016e2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	695b      	ldr	r3, [r3, #20]
 80016c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d00b      	beq.n	80016e2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016ce:	2201      	movs	r2, #1
 80016d0:	409a      	lsls	r2, r3
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016da:	f043 0202 	orr.w	r2, r3, #2
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016e6:	2204      	movs	r2, #4
 80016e8:	409a      	lsls	r2, r3
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	4013      	ands	r3, r2
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d012      	beq.n	8001718 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 0302 	and.w	r3, r3, #2
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d00b      	beq.n	8001718 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001704:	2204      	movs	r2, #4
 8001706:	409a      	lsls	r2, r3
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001710:	f043 0204 	orr.w	r2, r3, #4
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800171c:	2210      	movs	r2, #16
 800171e:	409a      	lsls	r2, r3
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	4013      	ands	r3, r2
 8001724:	2b00      	cmp	r3, #0
 8001726:	d043      	beq.n	80017b0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0308 	and.w	r3, r3, #8
 8001732:	2b00      	cmp	r3, #0
 8001734:	d03c      	beq.n	80017b0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800173a:	2210      	movs	r2, #16
 800173c:	409a      	lsls	r2, r3
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800174c:	2b00      	cmp	r3, #0
 800174e:	d018      	beq.n	8001782 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800175a:	2b00      	cmp	r3, #0
 800175c:	d108      	bne.n	8001770 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001762:	2b00      	cmp	r3, #0
 8001764:	d024      	beq.n	80017b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	4798      	blx	r3
 800176e:	e01f      	b.n	80017b0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001774:	2b00      	cmp	r3, #0
 8001776:	d01b      	beq.n	80017b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	4798      	blx	r3
 8001780:	e016      	b.n	80017b0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800178c:	2b00      	cmp	r3, #0
 800178e:	d107      	bne.n	80017a0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f022 0208 	bic.w	r2, r2, #8
 800179e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d003      	beq.n	80017b0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017b4:	2220      	movs	r2, #32
 80017b6:	409a      	lsls	r2, r3
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	4013      	ands	r3, r2
 80017bc:	2b00      	cmp	r3, #0
 80017be:	f000 808f 	beq.w	80018e0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 0310 	and.w	r3, r3, #16
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	f000 8087 	beq.w	80018e0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017d6:	2220      	movs	r2, #32
 80017d8:	409a      	lsls	r2, r3
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	2b05      	cmp	r3, #5
 80017e8:	d136      	bne.n	8001858 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f022 0216 	bic.w	r2, r2, #22
 80017f8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	695a      	ldr	r2, [r3, #20]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001808:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180e:	2b00      	cmp	r3, #0
 8001810:	d103      	bne.n	800181a <HAL_DMA_IRQHandler+0x1da>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001816:	2b00      	cmp	r3, #0
 8001818:	d007      	beq.n	800182a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f022 0208 	bic.w	r2, r2, #8
 8001828:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800182e:	223f      	movs	r2, #63	; 0x3f
 8001830:	409a      	lsls	r2, r3
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2201      	movs	r2, #1
 800183a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2200      	movs	r2, #0
 8001842:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800184a:	2b00      	cmp	r3, #0
 800184c:	d07e      	beq.n	800194c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	4798      	blx	r3
        }
        return;
 8001856:	e079      	b.n	800194c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d01d      	beq.n	80018a2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001870:	2b00      	cmp	r3, #0
 8001872:	d10d      	bne.n	8001890 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001878:	2b00      	cmp	r3, #0
 800187a:	d031      	beq.n	80018e0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	4798      	blx	r3
 8001884:	e02c      	b.n	80018e0 <HAL_DMA_IRQHandler+0x2a0>
 8001886:	bf00      	nop
 8001888:	20000010 	.word	0x20000010
 800188c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001894:	2b00      	cmp	r3, #0
 8001896:	d023      	beq.n	80018e0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	4798      	blx	r3
 80018a0:	e01e      	b.n	80018e0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d10f      	bne.n	80018d0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f022 0210 	bic.w	r2, r2, #16
 80018be:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2201      	movs	r2, #1
 80018c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2200      	movs	r2, #0
 80018cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d003      	beq.n	80018e0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d032      	beq.n	800194e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018ec:	f003 0301 	and.w	r3, r3, #1
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d022      	beq.n	800193a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2205      	movs	r2, #5
 80018f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f022 0201 	bic.w	r2, r2, #1
 800190a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	3301      	adds	r3, #1
 8001910:	60bb      	str	r3, [r7, #8]
 8001912:	697a      	ldr	r2, [r7, #20]
 8001914:	429a      	cmp	r2, r3
 8001916:	d307      	bcc.n	8001928 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0301 	and.w	r3, r3, #1
 8001922:	2b00      	cmp	r3, #0
 8001924:	d1f2      	bne.n	800190c <HAL_DMA_IRQHandler+0x2cc>
 8001926:	e000      	b.n	800192a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001928:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2201      	movs	r2, #1
 800192e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2200      	movs	r2, #0
 8001936:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800193e:	2b00      	cmp	r3, #0
 8001940:	d005      	beq.n	800194e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	4798      	blx	r3
 800194a:	e000      	b.n	800194e <HAL_DMA_IRQHandler+0x30e>
        return;
 800194c:	bf00      	nop
    }
  }
}
 800194e:	3718      	adds	r7, #24
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}

08001954 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001954:	b480      	push	{r7}
 8001956:	b085      	sub	sp, #20
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	b2db      	uxtb	r3, r3
 8001962:	3b10      	subs	r3, #16
 8001964:	4a14      	ldr	r2, [pc, #80]	; (80019b8 <DMA_CalcBaseAndBitshift+0x64>)
 8001966:	fba2 2303 	umull	r2, r3, r2, r3
 800196a:	091b      	lsrs	r3, r3, #4
 800196c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800196e:	4a13      	ldr	r2, [pc, #76]	; (80019bc <DMA_CalcBaseAndBitshift+0x68>)
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	4413      	add	r3, r2
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	461a      	mov	r2, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	2b03      	cmp	r3, #3
 8001980:	d909      	bls.n	8001996 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800198a:	f023 0303 	bic.w	r3, r3, #3
 800198e:	1d1a      	adds	r2, r3, #4
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	659a      	str	r2, [r3, #88]	; 0x58
 8001994:	e007      	b.n	80019a6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800199e:	f023 0303 	bic.w	r3, r3, #3
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3714      	adds	r7, #20
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	aaaaaaab 	.word	0xaaaaaaab
 80019bc:	080051d8 	.word	0x080051d8

080019c0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b085      	sub	sp, #20
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019c8:	2300      	movs	r3, #0
 80019ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	699b      	ldr	r3, [r3, #24]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d11f      	bne.n	8001a1a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	2b03      	cmp	r3, #3
 80019de:	d856      	bhi.n	8001a8e <DMA_CheckFifoParam+0xce>
 80019e0:	a201      	add	r2, pc, #4	; (adr r2, 80019e8 <DMA_CheckFifoParam+0x28>)
 80019e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019e6:	bf00      	nop
 80019e8:	080019f9 	.word	0x080019f9
 80019ec:	08001a0b 	.word	0x08001a0b
 80019f0:	080019f9 	.word	0x080019f9
 80019f4:	08001a8f 	.word	0x08001a8f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d046      	beq.n	8001a92 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a08:	e043      	b.n	8001a92 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a0e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001a12:	d140      	bne.n	8001a96 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a18:	e03d      	b.n	8001a96 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	699b      	ldr	r3, [r3, #24]
 8001a1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a22:	d121      	bne.n	8001a68 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	2b03      	cmp	r3, #3
 8001a28:	d837      	bhi.n	8001a9a <DMA_CheckFifoParam+0xda>
 8001a2a:	a201      	add	r2, pc, #4	; (adr r2, 8001a30 <DMA_CheckFifoParam+0x70>)
 8001a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a30:	08001a41 	.word	0x08001a41
 8001a34:	08001a47 	.word	0x08001a47
 8001a38:	08001a41 	.word	0x08001a41
 8001a3c:	08001a59 	.word	0x08001a59
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	73fb      	strb	r3, [r7, #15]
      break;
 8001a44:	e030      	b.n	8001aa8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d025      	beq.n	8001a9e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a56:	e022      	b.n	8001a9e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a5c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001a60:	d11f      	bne.n	8001aa2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001a66:	e01c      	b.n	8001aa2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d903      	bls.n	8001a76 <DMA_CheckFifoParam+0xb6>
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	2b03      	cmp	r3, #3
 8001a72:	d003      	beq.n	8001a7c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001a74:	e018      	b.n	8001aa8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	73fb      	strb	r3, [r7, #15]
      break;
 8001a7a:	e015      	b.n	8001aa8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d00e      	beq.n	8001aa6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	73fb      	strb	r3, [r7, #15]
      break;
 8001a8c:	e00b      	b.n	8001aa6 <DMA_CheckFifoParam+0xe6>
      break;
 8001a8e:	bf00      	nop
 8001a90:	e00a      	b.n	8001aa8 <DMA_CheckFifoParam+0xe8>
      break;
 8001a92:	bf00      	nop
 8001a94:	e008      	b.n	8001aa8 <DMA_CheckFifoParam+0xe8>
      break;
 8001a96:	bf00      	nop
 8001a98:	e006      	b.n	8001aa8 <DMA_CheckFifoParam+0xe8>
      break;
 8001a9a:	bf00      	nop
 8001a9c:	e004      	b.n	8001aa8 <DMA_CheckFifoParam+0xe8>
      break;
 8001a9e:	bf00      	nop
 8001aa0:	e002      	b.n	8001aa8 <DMA_CheckFifoParam+0xe8>
      break;   
 8001aa2:	bf00      	nop
 8001aa4:	e000      	b.n	8001aa8 <DMA_CheckFifoParam+0xe8>
      break;
 8001aa6:	bf00      	nop
    }
  } 
  
  return status; 
 8001aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3714      	adds	r7, #20
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop

08001ab8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b089      	sub	sp, #36	; 0x24
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001aca:	2300      	movs	r3, #0
 8001acc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ace:	2300      	movs	r3, #0
 8001ad0:	61fb      	str	r3, [r7, #28]
 8001ad2:	e16b      	b.n	8001dac <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	697a      	ldr	r2, [r7, #20]
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ae8:	693a      	ldr	r2, [r7, #16]
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	f040 815a 	bne.w	8001da6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	f003 0303 	and.w	r3, r3, #3
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d005      	beq.n	8001b0a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d130      	bne.n	8001b6c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	005b      	lsls	r3, r3, #1
 8001b14:	2203      	movs	r2, #3
 8001b16:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1a:	43db      	mvns	r3, r3
 8001b1c:	69ba      	ldr	r2, [r7, #24]
 8001b1e:	4013      	ands	r3, r2
 8001b20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	68da      	ldr	r2, [r3, #12]
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	005b      	lsls	r3, r3, #1
 8001b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2e:	69ba      	ldr	r2, [r7, #24]
 8001b30:	4313      	orrs	r3, r2
 8001b32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	69ba      	ldr	r2, [r7, #24]
 8001b38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b40:	2201      	movs	r2, #1
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	fa02 f303 	lsl.w	r3, r2, r3
 8001b48:	43db      	mvns	r3, r3
 8001b4a:	69ba      	ldr	r2, [r7, #24]
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	091b      	lsrs	r3, r3, #4
 8001b56:	f003 0201 	and.w	r2, r3, #1
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b60:	69ba      	ldr	r2, [r7, #24]
 8001b62:	4313      	orrs	r3, r2
 8001b64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f003 0303 	and.w	r3, r3, #3
 8001b74:	2b03      	cmp	r3, #3
 8001b76:	d017      	beq.n	8001ba8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	005b      	lsls	r3, r3, #1
 8001b82:	2203      	movs	r2, #3
 8001b84:	fa02 f303 	lsl.w	r3, r2, r3
 8001b88:	43db      	mvns	r3, r3
 8001b8a:	69ba      	ldr	r2, [r7, #24]
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	689a      	ldr	r2, [r3, #8]
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	005b      	lsls	r3, r3, #1
 8001b98:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	69ba      	ldr	r2, [r7, #24]
 8001ba6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f003 0303 	and.w	r3, r3, #3
 8001bb0:	2b02      	cmp	r3, #2
 8001bb2:	d123      	bne.n	8001bfc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	08da      	lsrs	r2, r3, #3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	3208      	adds	r2, #8
 8001bbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	f003 0307 	and.w	r3, r3, #7
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	220f      	movs	r2, #15
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	43db      	mvns	r3, r3
 8001bd2:	69ba      	ldr	r2, [r7, #24]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	691a      	ldr	r2, [r3, #16]
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	f003 0307 	and.w	r3, r3, #7
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	fa02 f303 	lsl.w	r3, r2, r3
 8001be8:	69ba      	ldr	r2, [r7, #24]
 8001bea:	4313      	orrs	r3, r2
 8001bec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	08da      	lsrs	r2, r3, #3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	3208      	adds	r2, #8
 8001bf6:	69b9      	ldr	r1, [r7, #24]
 8001bf8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	005b      	lsls	r3, r3, #1
 8001c06:	2203      	movs	r2, #3
 8001c08:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0c:	43db      	mvns	r3, r3
 8001c0e:	69ba      	ldr	r2, [r7, #24]
 8001c10:	4013      	ands	r3, r2
 8001c12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f003 0203 	and.w	r2, r3, #3
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	fa02 f303 	lsl.w	r3, r2, r3
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	4313      	orrs	r3, r2
 8001c28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	f000 80b4 	beq.w	8001da6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c3e:	2300      	movs	r3, #0
 8001c40:	60fb      	str	r3, [r7, #12]
 8001c42:	4b60      	ldr	r3, [pc, #384]	; (8001dc4 <HAL_GPIO_Init+0x30c>)
 8001c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c46:	4a5f      	ldr	r2, [pc, #380]	; (8001dc4 <HAL_GPIO_Init+0x30c>)
 8001c48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c4c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c4e:	4b5d      	ldr	r3, [pc, #372]	; (8001dc4 <HAL_GPIO_Init+0x30c>)
 8001c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c56:	60fb      	str	r3, [r7, #12]
 8001c58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c5a:	4a5b      	ldr	r2, [pc, #364]	; (8001dc8 <HAL_GPIO_Init+0x310>)
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	089b      	lsrs	r3, r3, #2
 8001c60:	3302      	adds	r3, #2
 8001c62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	f003 0303 	and.w	r3, r3, #3
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	220f      	movs	r2, #15
 8001c72:	fa02 f303 	lsl.w	r3, r2, r3
 8001c76:	43db      	mvns	r3, r3
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4a52      	ldr	r2, [pc, #328]	; (8001dcc <HAL_GPIO_Init+0x314>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d02b      	beq.n	8001cde <HAL_GPIO_Init+0x226>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4a51      	ldr	r2, [pc, #324]	; (8001dd0 <HAL_GPIO_Init+0x318>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d025      	beq.n	8001cda <HAL_GPIO_Init+0x222>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4a50      	ldr	r2, [pc, #320]	; (8001dd4 <HAL_GPIO_Init+0x31c>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d01f      	beq.n	8001cd6 <HAL_GPIO_Init+0x21e>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4a4f      	ldr	r2, [pc, #316]	; (8001dd8 <HAL_GPIO_Init+0x320>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d019      	beq.n	8001cd2 <HAL_GPIO_Init+0x21a>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4a4e      	ldr	r2, [pc, #312]	; (8001ddc <HAL_GPIO_Init+0x324>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d013      	beq.n	8001cce <HAL_GPIO_Init+0x216>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4a4d      	ldr	r2, [pc, #308]	; (8001de0 <HAL_GPIO_Init+0x328>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d00d      	beq.n	8001cca <HAL_GPIO_Init+0x212>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4a4c      	ldr	r2, [pc, #304]	; (8001de4 <HAL_GPIO_Init+0x32c>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d007      	beq.n	8001cc6 <HAL_GPIO_Init+0x20e>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4a4b      	ldr	r2, [pc, #300]	; (8001de8 <HAL_GPIO_Init+0x330>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d101      	bne.n	8001cc2 <HAL_GPIO_Init+0x20a>
 8001cbe:	2307      	movs	r3, #7
 8001cc0:	e00e      	b.n	8001ce0 <HAL_GPIO_Init+0x228>
 8001cc2:	2308      	movs	r3, #8
 8001cc4:	e00c      	b.n	8001ce0 <HAL_GPIO_Init+0x228>
 8001cc6:	2306      	movs	r3, #6
 8001cc8:	e00a      	b.n	8001ce0 <HAL_GPIO_Init+0x228>
 8001cca:	2305      	movs	r3, #5
 8001ccc:	e008      	b.n	8001ce0 <HAL_GPIO_Init+0x228>
 8001cce:	2304      	movs	r3, #4
 8001cd0:	e006      	b.n	8001ce0 <HAL_GPIO_Init+0x228>
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e004      	b.n	8001ce0 <HAL_GPIO_Init+0x228>
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	e002      	b.n	8001ce0 <HAL_GPIO_Init+0x228>
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e000      	b.n	8001ce0 <HAL_GPIO_Init+0x228>
 8001cde:	2300      	movs	r3, #0
 8001ce0:	69fa      	ldr	r2, [r7, #28]
 8001ce2:	f002 0203 	and.w	r2, r2, #3
 8001ce6:	0092      	lsls	r2, r2, #2
 8001ce8:	4093      	lsls	r3, r2
 8001cea:	69ba      	ldr	r2, [r7, #24]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cf0:	4935      	ldr	r1, [pc, #212]	; (8001dc8 <HAL_GPIO_Init+0x310>)
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	089b      	lsrs	r3, r3, #2
 8001cf6:	3302      	adds	r3, #2
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cfe:	4b3b      	ldr	r3, [pc, #236]	; (8001dec <HAL_GPIO_Init+0x334>)
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	43db      	mvns	r3, r3
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d003      	beq.n	8001d22 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001d1a:	69ba      	ldr	r2, [r7, #24]
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d22:	4a32      	ldr	r2, [pc, #200]	; (8001dec <HAL_GPIO_Init+0x334>)
 8001d24:	69bb      	ldr	r3, [r7, #24]
 8001d26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d28:	4b30      	ldr	r3, [pc, #192]	; (8001dec <HAL_GPIO_Init+0x334>)
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	43db      	mvns	r3, r3
 8001d32:	69ba      	ldr	r2, [r7, #24]
 8001d34:	4013      	ands	r3, r2
 8001d36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d003      	beq.n	8001d4c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d4c:	4a27      	ldr	r2, [pc, #156]	; (8001dec <HAL_GPIO_Init+0x334>)
 8001d4e:	69bb      	ldr	r3, [r7, #24]
 8001d50:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d52:	4b26      	ldr	r3, [pc, #152]	; (8001dec <HAL_GPIO_Init+0x334>)
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	43db      	mvns	r3, r3
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	4013      	ands	r3, r2
 8001d60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d003      	beq.n	8001d76 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001d6e:	69ba      	ldr	r2, [r7, #24]
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d76:	4a1d      	ldr	r2, [pc, #116]	; (8001dec <HAL_GPIO_Init+0x334>)
 8001d78:	69bb      	ldr	r3, [r7, #24]
 8001d7a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d7c:	4b1b      	ldr	r3, [pc, #108]	; (8001dec <HAL_GPIO_Init+0x334>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	43db      	mvns	r3, r3
 8001d86:	69ba      	ldr	r2, [r7, #24]
 8001d88:	4013      	ands	r3, r2
 8001d8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d003      	beq.n	8001da0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001da0:	4a12      	ldr	r2, [pc, #72]	; (8001dec <HAL_GPIO_Init+0x334>)
 8001da2:	69bb      	ldr	r3, [r7, #24]
 8001da4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	3301      	adds	r3, #1
 8001daa:	61fb      	str	r3, [r7, #28]
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	2b0f      	cmp	r3, #15
 8001db0:	f67f ae90 	bls.w	8001ad4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001db4:	bf00      	nop
 8001db6:	bf00      	nop
 8001db8:	3724      	adds	r7, #36	; 0x24
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	40023800 	.word	0x40023800
 8001dc8:	40013800 	.word	0x40013800
 8001dcc:	40020000 	.word	0x40020000
 8001dd0:	40020400 	.word	0x40020400
 8001dd4:	40020800 	.word	0x40020800
 8001dd8:	40020c00 	.word	0x40020c00
 8001ddc:	40021000 	.word	0x40021000
 8001de0:	40021400 	.word	0x40021400
 8001de4:	40021800 	.word	0x40021800
 8001de8:	40021c00 	.word	0x40021c00
 8001dec:	40013c00 	.word	0x40013c00

08001df0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b085      	sub	sp, #20
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	460b      	mov	r3, r1
 8001dfa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	691a      	ldr	r2, [r3, #16]
 8001e00:	887b      	ldrh	r3, [r7, #2]
 8001e02:	4013      	ands	r3, r2
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d002      	beq.n	8001e0e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	73fb      	strb	r3, [r7, #15]
 8001e0c:	e001      	b.n	8001e12 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e12:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3714      	adds	r7, #20
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr

08001e20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	460b      	mov	r3, r1
 8001e2a:	807b      	strh	r3, [r7, #2]
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e30:	787b      	ldrb	r3, [r7, #1]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d003      	beq.n	8001e3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e36:	887a      	ldrh	r2, [r7, #2]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e3c:	e003      	b.n	8001e46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e3e:	887b      	ldrh	r3, [r7, #2]
 8001e40:	041a      	lsls	r2, r3, #16
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	619a      	str	r2, [r3, #24]
}
 8001e46:	bf00      	nop
 8001e48:	370c      	adds	r7, #12
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
	...

08001e54 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b086      	sub	sp, #24
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d101      	bne.n	8001e66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e267      	b.n	8002336 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0301 	and.w	r3, r3, #1
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d075      	beq.n	8001f5e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e72:	4b88      	ldr	r3, [pc, #544]	; (8002094 <HAL_RCC_OscConfig+0x240>)
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	f003 030c 	and.w	r3, r3, #12
 8001e7a:	2b04      	cmp	r3, #4
 8001e7c:	d00c      	beq.n	8001e98 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e7e:	4b85      	ldr	r3, [pc, #532]	; (8002094 <HAL_RCC_OscConfig+0x240>)
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e86:	2b08      	cmp	r3, #8
 8001e88:	d112      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e8a:	4b82      	ldr	r3, [pc, #520]	; (8002094 <HAL_RCC_OscConfig+0x240>)
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e96:	d10b      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e98:	4b7e      	ldr	r3, [pc, #504]	; (8002094 <HAL_RCC_OscConfig+0x240>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d05b      	beq.n	8001f5c <HAL_RCC_OscConfig+0x108>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d157      	bne.n	8001f5c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e242      	b.n	8002336 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eb8:	d106      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x74>
 8001eba:	4b76      	ldr	r3, [pc, #472]	; (8002094 <HAL_RCC_OscConfig+0x240>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a75      	ldr	r2, [pc, #468]	; (8002094 <HAL_RCC_OscConfig+0x240>)
 8001ec0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ec4:	6013      	str	r3, [r2, #0]
 8001ec6:	e01d      	b.n	8001f04 <HAL_RCC_OscConfig+0xb0>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ed0:	d10c      	bne.n	8001eec <HAL_RCC_OscConfig+0x98>
 8001ed2:	4b70      	ldr	r3, [pc, #448]	; (8002094 <HAL_RCC_OscConfig+0x240>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a6f      	ldr	r2, [pc, #444]	; (8002094 <HAL_RCC_OscConfig+0x240>)
 8001ed8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001edc:	6013      	str	r3, [r2, #0]
 8001ede:	4b6d      	ldr	r3, [pc, #436]	; (8002094 <HAL_RCC_OscConfig+0x240>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a6c      	ldr	r2, [pc, #432]	; (8002094 <HAL_RCC_OscConfig+0x240>)
 8001ee4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ee8:	6013      	str	r3, [r2, #0]
 8001eea:	e00b      	b.n	8001f04 <HAL_RCC_OscConfig+0xb0>
 8001eec:	4b69      	ldr	r3, [pc, #420]	; (8002094 <HAL_RCC_OscConfig+0x240>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a68      	ldr	r2, [pc, #416]	; (8002094 <HAL_RCC_OscConfig+0x240>)
 8001ef2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ef6:	6013      	str	r3, [r2, #0]
 8001ef8:	4b66      	ldr	r3, [pc, #408]	; (8002094 <HAL_RCC_OscConfig+0x240>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a65      	ldr	r2, [pc, #404]	; (8002094 <HAL_RCC_OscConfig+0x240>)
 8001efe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d013      	beq.n	8001f34 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f0c:	f7ff f916 	bl	800113c <HAL_GetTick>
 8001f10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f12:	e008      	b.n	8001f26 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f14:	f7ff f912 	bl	800113c <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	2b64      	cmp	r3, #100	; 0x64
 8001f20:	d901      	bls.n	8001f26 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f22:	2303      	movs	r3, #3
 8001f24:	e207      	b.n	8002336 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f26:	4b5b      	ldr	r3, [pc, #364]	; (8002094 <HAL_RCC_OscConfig+0x240>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d0f0      	beq.n	8001f14 <HAL_RCC_OscConfig+0xc0>
 8001f32:	e014      	b.n	8001f5e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f34:	f7ff f902 	bl	800113c <HAL_GetTick>
 8001f38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f3a:	e008      	b.n	8001f4e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f3c:	f7ff f8fe 	bl	800113c <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	2b64      	cmp	r3, #100	; 0x64
 8001f48:	d901      	bls.n	8001f4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e1f3      	b.n	8002336 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f4e:	4b51      	ldr	r3, [pc, #324]	; (8002094 <HAL_RCC_OscConfig+0x240>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d1f0      	bne.n	8001f3c <HAL_RCC_OscConfig+0xe8>
 8001f5a:	e000      	b.n	8001f5e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0302 	and.w	r3, r3, #2
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d063      	beq.n	8002032 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f6a:	4b4a      	ldr	r3, [pc, #296]	; (8002094 <HAL_RCC_OscConfig+0x240>)
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	f003 030c 	and.w	r3, r3, #12
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d00b      	beq.n	8001f8e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f76:	4b47      	ldr	r3, [pc, #284]	; (8002094 <HAL_RCC_OscConfig+0x240>)
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f7e:	2b08      	cmp	r3, #8
 8001f80:	d11c      	bne.n	8001fbc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f82:	4b44      	ldr	r3, [pc, #272]	; (8002094 <HAL_RCC_OscConfig+0x240>)
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d116      	bne.n	8001fbc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f8e:	4b41      	ldr	r3, [pc, #260]	; (8002094 <HAL_RCC_OscConfig+0x240>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0302 	and.w	r3, r3, #2
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d005      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x152>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d001      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e1c7      	b.n	8002336 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fa6:	4b3b      	ldr	r3, [pc, #236]	; (8002094 <HAL_RCC_OscConfig+0x240>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	691b      	ldr	r3, [r3, #16]
 8001fb2:	00db      	lsls	r3, r3, #3
 8001fb4:	4937      	ldr	r1, [pc, #220]	; (8002094 <HAL_RCC_OscConfig+0x240>)
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fba:	e03a      	b.n	8002032 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d020      	beq.n	8002006 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fc4:	4b34      	ldr	r3, [pc, #208]	; (8002098 <HAL_RCC_OscConfig+0x244>)
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fca:	f7ff f8b7 	bl	800113c <HAL_GetTick>
 8001fce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fd0:	e008      	b.n	8001fe4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fd2:	f7ff f8b3 	bl	800113c <HAL_GetTick>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	d901      	bls.n	8001fe4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	e1a8      	b.n	8002336 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fe4:	4b2b      	ldr	r3, [pc, #172]	; (8002094 <HAL_RCC_OscConfig+0x240>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0302 	and.w	r3, r3, #2
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d0f0      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ff0:	4b28      	ldr	r3, [pc, #160]	; (8002094 <HAL_RCC_OscConfig+0x240>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	691b      	ldr	r3, [r3, #16]
 8001ffc:	00db      	lsls	r3, r3, #3
 8001ffe:	4925      	ldr	r1, [pc, #148]	; (8002094 <HAL_RCC_OscConfig+0x240>)
 8002000:	4313      	orrs	r3, r2
 8002002:	600b      	str	r3, [r1, #0]
 8002004:	e015      	b.n	8002032 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002006:	4b24      	ldr	r3, [pc, #144]	; (8002098 <HAL_RCC_OscConfig+0x244>)
 8002008:	2200      	movs	r2, #0
 800200a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800200c:	f7ff f896 	bl	800113c <HAL_GetTick>
 8002010:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002012:	e008      	b.n	8002026 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002014:	f7ff f892 	bl	800113c <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	2b02      	cmp	r3, #2
 8002020:	d901      	bls.n	8002026 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e187      	b.n	8002336 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002026:	4b1b      	ldr	r3, [pc, #108]	; (8002094 <HAL_RCC_OscConfig+0x240>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0302 	and.w	r3, r3, #2
 800202e:	2b00      	cmp	r3, #0
 8002030:	d1f0      	bne.n	8002014 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0308 	and.w	r3, r3, #8
 800203a:	2b00      	cmp	r3, #0
 800203c:	d036      	beq.n	80020ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	695b      	ldr	r3, [r3, #20]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d016      	beq.n	8002074 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002046:	4b15      	ldr	r3, [pc, #84]	; (800209c <HAL_RCC_OscConfig+0x248>)
 8002048:	2201      	movs	r2, #1
 800204a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800204c:	f7ff f876 	bl	800113c <HAL_GetTick>
 8002050:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002052:	e008      	b.n	8002066 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002054:	f7ff f872 	bl	800113c <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	2b02      	cmp	r3, #2
 8002060:	d901      	bls.n	8002066 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e167      	b.n	8002336 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002066:	4b0b      	ldr	r3, [pc, #44]	; (8002094 <HAL_RCC_OscConfig+0x240>)
 8002068:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800206a:	f003 0302 	and.w	r3, r3, #2
 800206e:	2b00      	cmp	r3, #0
 8002070:	d0f0      	beq.n	8002054 <HAL_RCC_OscConfig+0x200>
 8002072:	e01b      	b.n	80020ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002074:	4b09      	ldr	r3, [pc, #36]	; (800209c <HAL_RCC_OscConfig+0x248>)
 8002076:	2200      	movs	r2, #0
 8002078:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800207a:	f7ff f85f 	bl	800113c <HAL_GetTick>
 800207e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002080:	e00e      	b.n	80020a0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002082:	f7ff f85b 	bl	800113c <HAL_GetTick>
 8002086:	4602      	mov	r2, r0
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	2b02      	cmp	r3, #2
 800208e:	d907      	bls.n	80020a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002090:	2303      	movs	r3, #3
 8002092:	e150      	b.n	8002336 <HAL_RCC_OscConfig+0x4e2>
 8002094:	40023800 	.word	0x40023800
 8002098:	42470000 	.word	0x42470000
 800209c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020a0:	4b88      	ldr	r3, [pc, #544]	; (80022c4 <HAL_RCC_OscConfig+0x470>)
 80020a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020a4:	f003 0302 	and.w	r3, r3, #2
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d1ea      	bne.n	8002082 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0304 	and.w	r3, r3, #4
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	f000 8097 	beq.w	80021e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020ba:	2300      	movs	r3, #0
 80020bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020be:	4b81      	ldr	r3, [pc, #516]	; (80022c4 <HAL_RCC_OscConfig+0x470>)
 80020c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d10f      	bne.n	80020ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020ca:	2300      	movs	r3, #0
 80020cc:	60bb      	str	r3, [r7, #8]
 80020ce:	4b7d      	ldr	r3, [pc, #500]	; (80022c4 <HAL_RCC_OscConfig+0x470>)
 80020d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d2:	4a7c      	ldr	r2, [pc, #496]	; (80022c4 <HAL_RCC_OscConfig+0x470>)
 80020d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020d8:	6413      	str	r3, [r2, #64]	; 0x40
 80020da:	4b7a      	ldr	r3, [pc, #488]	; (80022c4 <HAL_RCC_OscConfig+0x470>)
 80020dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020e2:	60bb      	str	r3, [r7, #8]
 80020e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020e6:	2301      	movs	r3, #1
 80020e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020ea:	4b77      	ldr	r3, [pc, #476]	; (80022c8 <HAL_RCC_OscConfig+0x474>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d118      	bne.n	8002128 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020f6:	4b74      	ldr	r3, [pc, #464]	; (80022c8 <HAL_RCC_OscConfig+0x474>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a73      	ldr	r2, [pc, #460]	; (80022c8 <HAL_RCC_OscConfig+0x474>)
 80020fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002100:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002102:	f7ff f81b 	bl	800113c <HAL_GetTick>
 8002106:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002108:	e008      	b.n	800211c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800210a:	f7ff f817 	bl	800113c <HAL_GetTick>
 800210e:	4602      	mov	r2, r0
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	2b02      	cmp	r3, #2
 8002116:	d901      	bls.n	800211c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e10c      	b.n	8002336 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800211c:	4b6a      	ldr	r3, [pc, #424]	; (80022c8 <HAL_RCC_OscConfig+0x474>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002124:	2b00      	cmp	r3, #0
 8002126:	d0f0      	beq.n	800210a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	2b01      	cmp	r3, #1
 800212e:	d106      	bne.n	800213e <HAL_RCC_OscConfig+0x2ea>
 8002130:	4b64      	ldr	r3, [pc, #400]	; (80022c4 <HAL_RCC_OscConfig+0x470>)
 8002132:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002134:	4a63      	ldr	r2, [pc, #396]	; (80022c4 <HAL_RCC_OscConfig+0x470>)
 8002136:	f043 0301 	orr.w	r3, r3, #1
 800213a:	6713      	str	r3, [r2, #112]	; 0x70
 800213c:	e01c      	b.n	8002178 <HAL_RCC_OscConfig+0x324>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	2b05      	cmp	r3, #5
 8002144:	d10c      	bne.n	8002160 <HAL_RCC_OscConfig+0x30c>
 8002146:	4b5f      	ldr	r3, [pc, #380]	; (80022c4 <HAL_RCC_OscConfig+0x470>)
 8002148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800214a:	4a5e      	ldr	r2, [pc, #376]	; (80022c4 <HAL_RCC_OscConfig+0x470>)
 800214c:	f043 0304 	orr.w	r3, r3, #4
 8002150:	6713      	str	r3, [r2, #112]	; 0x70
 8002152:	4b5c      	ldr	r3, [pc, #368]	; (80022c4 <HAL_RCC_OscConfig+0x470>)
 8002154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002156:	4a5b      	ldr	r2, [pc, #364]	; (80022c4 <HAL_RCC_OscConfig+0x470>)
 8002158:	f043 0301 	orr.w	r3, r3, #1
 800215c:	6713      	str	r3, [r2, #112]	; 0x70
 800215e:	e00b      	b.n	8002178 <HAL_RCC_OscConfig+0x324>
 8002160:	4b58      	ldr	r3, [pc, #352]	; (80022c4 <HAL_RCC_OscConfig+0x470>)
 8002162:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002164:	4a57      	ldr	r2, [pc, #348]	; (80022c4 <HAL_RCC_OscConfig+0x470>)
 8002166:	f023 0301 	bic.w	r3, r3, #1
 800216a:	6713      	str	r3, [r2, #112]	; 0x70
 800216c:	4b55      	ldr	r3, [pc, #340]	; (80022c4 <HAL_RCC_OscConfig+0x470>)
 800216e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002170:	4a54      	ldr	r2, [pc, #336]	; (80022c4 <HAL_RCC_OscConfig+0x470>)
 8002172:	f023 0304 	bic.w	r3, r3, #4
 8002176:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d015      	beq.n	80021ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002180:	f7fe ffdc 	bl	800113c <HAL_GetTick>
 8002184:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002186:	e00a      	b.n	800219e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002188:	f7fe ffd8 	bl	800113c <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	f241 3288 	movw	r2, #5000	; 0x1388
 8002196:	4293      	cmp	r3, r2
 8002198:	d901      	bls.n	800219e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e0cb      	b.n	8002336 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800219e:	4b49      	ldr	r3, [pc, #292]	; (80022c4 <HAL_RCC_OscConfig+0x470>)
 80021a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021a2:	f003 0302 	and.w	r3, r3, #2
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d0ee      	beq.n	8002188 <HAL_RCC_OscConfig+0x334>
 80021aa:	e014      	b.n	80021d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021ac:	f7fe ffc6 	bl	800113c <HAL_GetTick>
 80021b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021b2:	e00a      	b.n	80021ca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021b4:	f7fe ffc2 	bl	800113c <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	f241 3288 	movw	r2, #5000	; 0x1388
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d901      	bls.n	80021ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e0b5      	b.n	8002336 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021ca:	4b3e      	ldr	r3, [pc, #248]	; (80022c4 <HAL_RCC_OscConfig+0x470>)
 80021cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ce:	f003 0302 	and.w	r3, r3, #2
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d1ee      	bne.n	80021b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021d6:	7dfb      	ldrb	r3, [r7, #23]
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d105      	bne.n	80021e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021dc:	4b39      	ldr	r3, [pc, #228]	; (80022c4 <HAL_RCC_OscConfig+0x470>)
 80021de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e0:	4a38      	ldr	r2, [pc, #224]	; (80022c4 <HAL_RCC_OscConfig+0x470>)
 80021e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021e6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	699b      	ldr	r3, [r3, #24]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	f000 80a1 	beq.w	8002334 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021f2:	4b34      	ldr	r3, [pc, #208]	; (80022c4 <HAL_RCC_OscConfig+0x470>)
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	f003 030c 	and.w	r3, r3, #12
 80021fa:	2b08      	cmp	r3, #8
 80021fc:	d05c      	beq.n	80022b8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	699b      	ldr	r3, [r3, #24]
 8002202:	2b02      	cmp	r3, #2
 8002204:	d141      	bne.n	800228a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002206:	4b31      	ldr	r3, [pc, #196]	; (80022cc <HAL_RCC_OscConfig+0x478>)
 8002208:	2200      	movs	r2, #0
 800220a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800220c:	f7fe ff96 	bl	800113c <HAL_GetTick>
 8002210:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002212:	e008      	b.n	8002226 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002214:	f7fe ff92 	bl	800113c <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	2b02      	cmp	r3, #2
 8002220:	d901      	bls.n	8002226 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e087      	b.n	8002336 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002226:	4b27      	ldr	r3, [pc, #156]	; (80022c4 <HAL_RCC_OscConfig+0x470>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d1f0      	bne.n	8002214 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	69da      	ldr	r2, [r3, #28]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6a1b      	ldr	r3, [r3, #32]
 800223a:	431a      	orrs	r2, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002240:	019b      	lsls	r3, r3, #6
 8002242:	431a      	orrs	r2, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002248:	085b      	lsrs	r3, r3, #1
 800224a:	3b01      	subs	r3, #1
 800224c:	041b      	lsls	r3, r3, #16
 800224e:	431a      	orrs	r2, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002254:	061b      	lsls	r3, r3, #24
 8002256:	491b      	ldr	r1, [pc, #108]	; (80022c4 <HAL_RCC_OscConfig+0x470>)
 8002258:	4313      	orrs	r3, r2
 800225a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800225c:	4b1b      	ldr	r3, [pc, #108]	; (80022cc <HAL_RCC_OscConfig+0x478>)
 800225e:	2201      	movs	r2, #1
 8002260:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002262:	f7fe ff6b 	bl	800113c <HAL_GetTick>
 8002266:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002268:	e008      	b.n	800227c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800226a:	f7fe ff67 	bl	800113c <HAL_GetTick>
 800226e:	4602      	mov	r2, r0
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	2b02      	cmp	r3, #2
 8002276:	d901      	bls.n	800227c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002278:	2303      	movs	r3, #3
 800227a:	e05c      	b.n	8002336 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800227c:	4b11      	ldr	r3, [pc, #68]	; (80022c4 <HAL_RCC_OscConfig+0x470>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d0f0      	beq.n	800226a <HAL_RCC_OscConfig+0x416>
 8002288:	e054      	b.n	8002334 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800228a:	4b10      	ldr	r3, [pc, #64]	; (80022cc <HAL_RCC_OscConfig+0x478>)
 800228c:	2200      	movs	r2, #0
 800228e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002290:	f7fe ff54 	bl	800113c <HAL_GetTick>
 8002294:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002296:	e008      	b.n	80022aa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002298:	f7fe ff50 	bl	800113c <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d901      	bls.n	80022aa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	e045      	b.n	8002336 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022aa:	4b06      	ldr	r3, [pc, #24]	; (80022c4 <HAL_RCC_OscConfig+0x470>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d1f0      	bne.n	8002298 <HAL_RCC_OscConfig+0x444>
 80022b6:	e03d      	b.n	8002334 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	699b      	ldr	r3, [r3, #24]
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d107      	bne.n	80022d0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e038      	b.n	8002336 <HAL_RCC_OscConfig+0x4e2>
 80022c4:	40023800 	.word	0x40023800
 80022c8:	40007000 	.word	0x40007000
 80022cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80022d0:	4b1b      	ldr	r3, [pc, #108]	; (8002340 <HAL_RCC_OscConfig+0x4ec>)
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	699b      	ldr	r3, [r3, #24]
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d028      	beq.n	8002330 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d121      	bne.n	8002330 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d11a      	bne.n	8002330 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022fa:	68fa      	ldr	r2, [r7, #12]
 80022fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002300:	4013      	ands	r3, r2
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002306:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002308:	4293      	cmp	r3, r2
 800230a:	d111      	bne.n	8002330 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002316:	085b      	lsrs	r3, r3, #1
 8002318:	3b01      	subs	r3, #1
 800231a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800231c:	429a      	cmp	r2, r3
 800231e:	d107      	bne.n	8002330 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800232a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800232c:	429a      	cmp	r2, r3
 800232e:	d001      	beq.n	8002334 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e000      	b.n	8002336 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	3718      	adds	r7, #24
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	40023800 	.word	0x40023800

08002344 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
 800234c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d101      	bne.n	8002358 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e0cc      	b.n	80024f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002358:	4b68      	ldr	r3, [pc, #416]	; (80024fc <HAL_RCC_ClockConfig+0x1b8>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0307 	and.w	r3, r3, #7
 8002360:	683a      	ldr	r2, [r7, #0]
 8002362:	429a      	cmp	r2, r3
 8002364:	d90c      	bls.n	8002380 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002366:	4b65      	ldr	r3, [pc, #404]	; (80024fc <HAL_RCC_ClockConfig+0x1b8>)
 8002368:	683a      	ldr	r2, [r7, #0]
 800236a:	b2d2      	uxtb	r2, r2
 800236c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800236e:	4b63      	ldr	r3, [pc, #396]	; (80024fc <HAL_RCC_ClockConfig+0x1b8>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0307 	and.w	r3, r3, #7
 8002376:	683a      	ldr	r2, [r7, #0]
 8002378:	429a      	cmp	r2, r3
 800237a:	d001      	beq.n	8002380 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e0b8      	b.n	80024f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0302 	and.w	r3, r3, #2
 8002388:	2b00      	cmp	r3, #0
 800238a:	d020      	beq.n	80023ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0304 	and.w	r3, r3, #4
 8002394:	2b00      	cmp	r3, #0
 8002396:	d005      	beq.n	80023a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002398:	4b59      	ldr	r3, [pc, #356]	; (8002500 <HAL_RCC_ClockConfig+0x1bc>)
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	4a58      	ldr	r2, [pc, #352]	; (8002500 <HAL_RCC_ClockConfig+0x1bc>)
 800239e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80023a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0308 	and.w	r3, r3, #8
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d005      	beq.n	80023bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023b0:	4b53      	ldr	r3, [pc, #332]	; (8002500 <HAL_RCC_ClockConfig+0x1bc>)
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	4a52      	ldr	r2, [pc, #328]	; (8002500 <HAL_RCC_ClockConfig+0x1bc>)
 80023b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80023ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023bc:	4b50      	ldr	r3, [pc, #320]	; (8002500 <HAL_RCC_ClockConfig+0x1bc>)
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	494d      	ldr	r1, [pc, #308]	; (8002500 <HAL_RCC_ClockConfig+0x1bc>)
 80023ca:	4313      	orrs	r3, r2
 80023cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0301 	and.w	r3, r3, #1
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d044      	beq.n	8002464 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d107      	bne.n	80023f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023e2:	4b47      	ldr	r3, [pc, #284]	; (8002500 <HAL_RCC_ClockConfig+0x1bc>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d119      	bne.n	8002422 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e07f      	b.n	80024f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	2b02      	cmp	r3, #2
 80023f8:	d003      	beq.n	8002402 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023fe:	2b03      	cmp	r3, #3
 8002400:	d107      	bne.n	8002412 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002402:	4b3f      	ldr	r3, [pc, #252]	; (8002500 <HAL_RCC_ClockConfig+0x1bc>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d109      	bne.n	8002422 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e06f      	b.n	80024f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002412:	4b3b      	ldr	r3, [pc, #236]	; (8002500 <HAL_RCC_ClockConfig+0x1bc>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0302 	and.w	r3, r3, #2
 800241a:	2b00      	cmp	r3, #0
 800241c:	d101      	bne.n	8002422 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e067      	b.n	80024f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002422:	4b37      	ldr	r3, [pc, #220]	; (8002500 <HAL_RCC_ClockConfig+0x1bc>)
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	f023 0203 	bic.w	r2, r3, #3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	4934      	ldr	r1, [pc, #208]	; (8002500 <HAL_RCC_ClockConfig+0x1bc>)
 8002430:	4313      	orrs	r3, r2
 8002432:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002434:	f7fe fe82 	bl	800113c <HAL_GetTick>
 8002438:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800243a:	e00a      	b.n	8002452 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800243c:	f7fe fe7e 	bl	800113c <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	f241 3288 	movw	r2, #5000	; 0x1388
 800244a:	4293      	cmp	r3, r2
 800244c:	d901      	bls.n	8002452 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e04f      	b.n	80024f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002452:	4b2b      	ldr	r3, [pc, #172]	; (8002500 <HAL_RCC_ClockConfig+0x1bc>)
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	f003 020c 	and.w	r2, r3, #12
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	429a      	cmp	r2, r3
 8002462:	d1eb      	bne.n	800243c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002464:	4b25      	ldr	r3, [pc, #148]	; (80024fc <HAL_RCC_ClockConfig+0x1b8>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0307 	and.w	r3, r3, #7
 800246c:	683a      	ldr	r2, [r7, #0]
 800246e:	429a      	cmp	r2, r3
 8002470:	d20c      	bcs.n	800248c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002472:	4b22      	ldr	r3, [pc, #136]	; (80024fc <HAL_RCC_ClockConfig+0x1b8>)
 8002474:	683a      	ldr	r2, [r7, #0]
 8002476:	b2d2      	uxtb	r2, r2
 8002478:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800247a:	4b20      	ldr	r3, [pc, #128]	; (80024fc <HAL_RCC_ClockConfig+0x1b8>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0307 	and.w	r3, r3, #7
 8002482:	683a      	ldr	r2, [r7, #0]
 8002484:	429a      	cmp	r2, r3
 8002486:	d001      	beq.n	800248c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e032      	b.n	80024f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0304 	and.w	r3, r3, #4
 8002494:	2b00      	cmp	r3, #0
 8002496:	d008      	beq.n	80024aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002498:	4b19      	ldr	r3, [pc, #100]	; (8002500 <HAL_RCC_ClockConfig+0x1bc>)
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	4916      	ldr	r1, [pc, #88]	; (8002500 <HAL_RCC_ClockConfig+0x1bc>)
 80024a6:	4313      	orrs	r3, r2
 80024a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0308 	and.w	r3, r3, #8
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d009      	beq.n	80024ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024b6:	4b12      	ldr	r3, [pc, #72]	; (8002500 <HAL_RCC_ClockConfig+0x1bc>)
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	691b      	ldr	r3, [r3, #16]
 80024c2:	00db      	lsls	r3, r3, #3
 80024c4:	490e      	ldr	r1, [pc, #56]	; (8002500 <HAL_RCC_ClockConfig+0x1bc>)
 80024c6:	4313      	orrs	r3, r2
 80024c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80024ca:	f000 f821 	bl	8002510 <HAL_RCC_GetSysClockFreq>
 80024ce:	4602      	mov	r2, r0
 80024d0:	4b0b      	ldr	r3, [pc, #44]	; (8002500 <HAL_RCC_ClockConfig+0x1bc>)
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	091b      	lsrs	r3, r3, #4
 80024d6:	f003 030f 	and.w	r3, r3, #15
 80024da:	490a      	ldr	r1, [pc, #40]	; (8002504 <HAL_RCC_ClockConfig+0x1c0>)
 80024dc:	5ccb      	ldrb	r3, [r1, r3]
 80024de:	fa22 f303 	lsr.w	r3, r2, r3
 80024e2:	4a09      	ldr	r2, [pc, #36]	; (8002508 <HAL_RCC_ClockConfig+0x1c4>)
 80024e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80024e6:	4b09      	ldr	r3, [pc, #36]	; (800250c <HAL_RCC_ClockConfig+0x1c8>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7fe fde2 	bl	80010b4 <HAL_InitTick>

  return HAL_OK;
 80024f0:	2300      	movs	r3, #0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3710      	adds	r7, #16
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	40023c00 	.word	0x40023c00
 8002500:	40023800 	.word	0x40023800
 8002504:	080051c0 	.word	0x080051c0
 8002508:	20000010 	.word	0x20000010
 800250c:	20000014 	.word	0x20000014

08002510 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002510:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002514:	b090      	sub	sp, #64	; 0x40
 8002516:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002518:	2300      	movs	r3, #0
 800251a:	637b      	str	r3, [r7, #52]	; 0x34
 800251c:	2300      	movs	r3, #0
 800251e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002520:	2300      	movs	r3, #0
 8002522:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002524:	2300      	movs	r3, #0
 8002526:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002528:	4b59      	ldr	r3, [pc, #356]	; (8002690 <HAL_RCC_GetSysClockFreq+0x180>)
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	f003 030c 	and.w	r3, r3, #12
 8002530:	2b08      	cmp	r3, #8
 8002532:	d00d      	beq.n	8002550 <HAL_RCC_GetSysClockFreq+0x40>
 8002534:	2b08      	cmp	r3, #8
 8002536:	f200 80a1 	bhi.w	800267c <HAL_RCC_GetSysClockFreq+0x16c>
 800253a:	2b00      	cmp	r3, #0
 800253c:	d002      	beq.n	8002544 <HAL_RCC_GetSysClockFreq+0x34>
 800253e:	2b04      	cmp	r3, #4
 8002540:	d003      	beq.n	800254a <HAL_RCC_GetSysClockFreq+0x3a>
 8002542:	e09b      	b.n	800267c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002544:	4b53      	ldr	r3, [pc, #332]	; (8002694 <HAL_RCC_GetSysClockFreq+0x184>)
 8002546:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002548:	e09b      	b.n	8002682 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800254a:	4b53      	ldr	r3, [pc, #332]	; (8002698 <HAL_RCC_GetSysClockFreq+0x188>)
 800254c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800254e:	e098      	b.n	8002682 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002550:	4b4f      	ldr	r3, [pc, #316]	; (8002690 <HAL_RCC_GetSysClockFreq+0x180>)
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002558:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800255a:	4b4d      	ldr	r3, [pc, #308]	; (8002690 <HAL_RCC_GetSysClockFreq+0x180>)
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d028      	beq.n	80025b8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002566:	4b4a      	ldr	r3, [pc, #296]	; (8002690 <HAL_RCC_GetSysClockFreq+0x180>)
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	099b      	lsrs	r3, r3, #6
 800256c:	2200      	movs	r2, #0
 800256e:	623b      	str	r3, [r7, #32]
 8002570:	627a      	str	r2, [r7, #36]	; 0x24
 8002572:	6a3b      	ldr	r3, [r7, #32]
 8002574:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002578:	2100      	movs	r1, #0
 800257a:	4b47      	ldr	r3, [pc, #284]	; (8002698 <HAL_RCC_GetSysClockFreq+0x188>)
 800257c:	fb03 f201 	mul.w	r2, r3, r1
 8002580:	2300      	movs	r3, #0
 8002582:	fb00 f303 	mul.w	r3, r0, r3
 8002586:	4413      	add	r3, r2
 8002588:	4a43      	ldr	r2, [pc, #268]	; (8002698 <HAL_RCC_GetSysClockFreq+0x188>)
 800258a:	fba0 1202 	umull	r1, r2, r0, r2
 800258e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002590:	460a      	mov	r2, r1
 8002592:	62ba      	str	r2, [r7, #40]	; 0x28
 8002594:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002596:	4413      	add	r3, r2
 8002598:	62fb      	str	r3, [r7, #44]	; 0x2c
 800259a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800259c:	2200      	movs	r2, #0
 800259e:	61bb      	str	r3, [r7, #24]
 80025a0:	61fa      	str	r2, [r7, #28]
 80025a2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80025a6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80025aa:	f7fd fe61 	bl	8000270 <__aeabi_uldivmod>
 80025ae:	4602      	mov	r2, r0
 80025b0:	460b      	mov	r3, r1
 80025b2:	4613      	mov	r3, r2
 80025b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025b6:	e053      	b.n	8002660 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025b8:	4b35      	ldr	r3, [pc, #212]	; (8002690 <HAL_RCC_GetSysClockFreq+0x180>)
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	099b      	lsrs	r3, r3, #6
 80025be:	2200      	movs	r2, #0
 80025c0:	613b      	str	r3, [r7, #16]
 80025c2:	617a      	str	r2, [r7, #20]
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80025ca:	f04f 0b00 	mov.w	fp, #0
 80025ce:	4652      	mov	r2, sl
 80025d0:	465b      	mov	r3, fp
 80025d2:	f04f 0000 	mov.w	r0, #0
 80025d6:	f04f 0100 	mov.w	r1, #0
 80025da:	0159      	lsls	r1, r3, #5
 80025dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025e0:	0150      	lsls	r0, r2, #5
 80025e2:	4602      	mov	r2, r0
 80025e4:	460b      	mov	r3, r1
 80025e6:	ebb2 080a 	subs.w	r8, r2, sl
 80025ea:	eb63 090b 	sbc.w	r9, r3, fp
 80025ee:	f04f 0200 	mov.w	r2, #0
 80025f2:	f04f 0300 	mov.w	r3, #0
 80025f6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80025fa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80025fe:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002602:	ebb2 0408 	subs.w	r4, r2, r8
 8002606:	eb63 0509 	sbc.w	r5, r3, r9
 800260a:	f04f 0200 	mov.w	r2, #0
 800260e:	f04f 0300 	mov.w	r3, #0
 8002612:	00eb      	lsls	r3, r5, #3
 8002614:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002618:	00e2      	lsls	r2, r4, #3
 800261a:	4614      	mov	r4, r2
 800261c:	461d      	mov	r5, r3
 800261e:	eb14 030a 	adds.w	r3, r4, sl
 8002622:	603b      	str	r3, [r7, #0]
 8002624:	eb45 030b 	adc.w	r3, r5, fp
 8002628:	607b      	str	r3, [r7, #4]
 800262a:	f04f 0200 	mov.w	r2, #0
 800262e:	f04f 0300 	mov.w	r3, #0
 8002632:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002636:	4629      	mov	r1, r5
 8002638:	028b      	lsls	r3, r1, #10
 800263a:	4621      	mov	r1, r4
 800263c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002640:	4621      	mov	r1, r4
 8002642:	028a      	lsls	r2, r1, #10
 8002644:	4610      	mov	r0, r2
 8002646:	4619      	mov	r1, r3
 8002648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800264a:	2200      	movs	r2, #0
 800264c:	60bb      	str	r3, [r7, #8]
 800264e:	60fa      	str	r2, [r7, #12]
 8002650:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002654:	f7fd fe0c 	bl	8000270 <__aeabi_uldivmod>
 8002658:	4602      	mov	r2, r0
 800265a:	460b      	mov	r3, r1
 800265c:	4613      	mov	r3, r2
 800265e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002660:	4b0b      	ldr	r3, [pc, #44]	; (8002690 <HAL_RCC_GetSysClockFreq+0x180>)
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	0c1b      	lsrs	r3, r3, #16
 8002666:	f003 0303 	and.w	r3, r3, #3
 800266a:	3301      	adds	r3, #1
 800266c:	005b      	lsls	r3, r3, #1
 800266e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002670:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002674:	fbb2 f3f3 	udiv	r3, r2, r3
 8002678:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800267a:	e002      	b.n	8002682 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800267c:	4b05      	ldr	r3, [pc, #20]	; (8002694 <HAL_RCC_GetSysClockFreq+0x184>)
 800267e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002680:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002684:	4618      	mov	r0, r3
 8002686:	3740      	adds	r7, #64	; 0x40
 8002688:	46bd      	mov	sp, r7
 800268a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800268e:	bf00      	nop
 8002690:	40023800 	.word	0x40023800
 8002694:	00f42400 	.word	0x00f42400
 8002698:	017d7840 	.word	0x017d7840

0800269c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026a0:	4b03      	ldr	r3, [pc, #12]	; (80026b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80026a2:	681b      	ldr	r3, [r3, #0]
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	20000010 	.word	0x20000010

080026b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80026b8:	f7ff fff0 	bl	800269c <HAL_RCC_GetHCLKFreq>
 80026bc:	4602      	mov	r2, r0
 80026be:	4b05      	ldr	r3, [pc, #20]	; (80026d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	0a9b      	lsrs	r3, r3, #10
 80026c4:	f003 0307 	and.w	r3, r3, #7
 80026c8:	4903      	ldr	r1, [pc, #12]	; (80026d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026ca:	5ccb      	ldrb	r3, [r1, r3]
 80026cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	40023800 	.word	0x40023800
 80026d8:	080051d0 	.word	0x080051d0

080026dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80026e0:	f7ff ffdc 	bl	800269c <HAL_RCC_GetHCLKFreq>
 80026e4:	4602      	mov	r2, r0
 80026e6:	4b05      	ldr	r3, [pc, #20]	; (80026fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	0b5b      	lsrs	r3, r3, #13
 80026ec:	f003 0307 	and.w	r3, r3, #7
 80026f0:	4903      	ldr	r1, [pc, #12]	; (8002700 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026f2:	5ccb      	ldrb	r3, [r1, r3]
 80026f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	40023800 	.word	0x40023800
 8002700:	080051d0 	.word	0x080051d0

08002704 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d101      	bne.n	8002716 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e041      	b.n	800279a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800271c:	b2db      	uxtb	r3, r3
 800271e:	2b00      	cmp	r3, #0
 8002720:	d106      	bne.n	8002730 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f7fe faf6 	bl	8000d1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2202      	movs	r2, #2
 8002734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	3304      	adds	r3, #4
 8002740:	4619      	mov	r1, r3
 8002742:	4610      	mov	r0, r2
 8002744:	f000 fb38 	bl	8002db8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2201      	movs	r2, #1
 800274c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2201      	movs	r2, #1
 8002754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2201      	movs	r2, #1
 800275c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2201      	movs	r2, #1
 8002764:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2201      	movs	r2, #1
 800276c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2201      	movs	r2, #1
 8002774:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2201      	movs	r2, #1
 800277c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2201      	movs	r2, #1
 8002784:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2201      	movs	r2, #1
 800278c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2201      	movs	r2, #1
 8002794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002798:	2300      	movs	r3, #0
}
 800279a:	4618      	mov	r0, r3
 800279c:	3708      	adds	r7, #8
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
	...

080027a4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b085      	sub	sp, #20
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d001      	beq.n	80027bc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e046      	b.n	800284a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2202      	movs	r2, #2
 80027c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a23      	ldr	r2, [pc, #140]	; (8002858 <HAL_TIM_Base_Start+0xb4>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d022      	beq.n	8002814 <HAL_TIM_Base_Start+0x70>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027d6:	d01d      	beq.n	8002814 <HAL_TIM_Base_Start+0x70>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a1f      	ldr	r2, [pc, #124]	; (800285c <HAL_TIM_Base_Start+0xb8>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d018      	beq.n	8002814 <HAL_TIM_Base_Start+0x70>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a1e      	ldr	r2, [pc, #120]	; (8002860 <HAL_TIM_Base_Start+0xbc>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d013      	beq.n	8002814 <HAL_TIM_Base_Start+0x70>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a1c      	ldr	r2, [pc, #112]	; (8002864 <HAL_TIM_Base_Start+0xc0>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d00e      	beq.n	8002814 <HAL_TIM_Base_Start+0x70>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a1b      	ldr	r2, [pc, #108]	; (8002868 <HAL_TIM_Base_Start+0xc4>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d009      	beq.n	8002814 <HAL_TIM_Base_Start+0x70>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a19      	ldr	r2, [pc, #100]	; (800286c <HAL_TIM_Base_Start+0xc8>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d004      	beq.n	8002814 <HAL_TIM_Base_Start+0x70>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a18      	ldr	r2, [pc, #96]	; (8002870 <HAL_TIM_Base_Start+0xcc>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d111      	bne.n	8002838 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	f003 0307 	and.w	r3, r3, #7
 800281e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2b06      	cmp	r3, #6
 8002824:	d010      	beq.n	8002848 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f042 0201 	orr.w	r2, r2, #1
 8002834:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002836:	e007      	b.n	8002848 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f042 0201 	orr.w	r2, r2, #1
 8002846:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002848:	2300      	movs	r3, #0
}
 800284a:	4618      	mov	r0, r3
 800284c:	3714      	adds	r7, #20
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	40010000 	.word	0x40010000
 800285c:	40000400 	.word	0x40000400
 8002860:	40000800 	.word	0x40000800
 8002864:	40000c00 	.word	0x40000c00
 8002868:	40010400 	.word	0x40010400
 800286c:	40014000 	.word	0x40014000
 8002870:	40001800 	.word	0x40001800

08002874 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d101      	bne.n	8002886 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e041      	b.n	800290a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800288c:	b2db      	uxtb	r3, r3
 800288e:	2b00      	cmp	r3, #0
 8002890:	d106      	bne.n	80028a0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2200      	movs	r2, #0
 8002896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f7fe fa8c 	bl	8000db8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2202      	movs	r2, #2
 80028a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	3304      	adds	r3, #4
 80028b0:	4619      	mov	r1, r3
 80028b2:	4610      	mov	r0, r2
 80028b4:	f000 fa80 	bl	8002db8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2201      	movs	r2, #1
 80028c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2201      	movs	r2, #1
 80028f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2201      	movs	r2, #1
 80028fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2201      	movs	r2, #1
 8002904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002908:	2300      	movs	r3, #0
}
 800290a:	4618      	mov	r0, r3
 800290c:	3708      	adds	r7, #8
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
	...

08002914 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d109      	bne.n	8002938 <HAL_TIM_PWM_Start+0x24>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800292a:	b2db      	uxtb	r3, r3
 800292c:	2b01      	cmp	r3, #1
 800292e:	bf14      	ite	ne
 8002930:	2301      	movne	r3, #1
 8002932:	2300      	moveq	r3, #0
 8002934:	b2db      	uxtb	r3, r3
 8002936:	e022      	b.n	800297e <HAL_TIM_PWM_Start+0x6a>
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	2b04      	cmp	r3, #4
 800293c:	d109      	bne.n	8002952 <HAL_TIM_PWM_Start+0x3e>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002944:	b2db      	uxtb	r3, r3
 8002946:	2b01      	cmp	r3, #1
 8002948:	bf14      	ite	ne
 800294a:	2301      	movne	r3, #1
 800294c:	2300      	moveq	r3, #0
 800294e:	b2db      	uxtb	r3, r3
 8002950:	e015      	b.n	800297e <HAL_TIM_PWM_Start+0x6a>
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	2b08      	cmp	r3, #8
 8002956:	d109      	bne.n	800296c <HAL_TIM_PWM_Start+0x58>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800295e:	b2db      	uxtb	r3, r3
 8002960:	2b01      	cmp	r3, #1
 8002962:	bf14      	ite	ne
 8002964:	2301      	movne	r3, #1
 8002966:	2300      	moveq	r3, #0
 8002968:	b2db      	uxtb	r3, r3
 800296a:	e008      	b.n	800297e <HAL_TIM_PWM_Start+0x6a>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002972:	b2db      	uxtb	r3, r3
 8002974:	2b01      	cmp	r3, #1
 8002976:	bf14      	ite	ne
 8002978:	2301      	movne	r3, #1
 800297a:	2300      	moveq	r3, #0
 800297c:	b2db      	uxtb	r3, r3
 800297e:	2b00      	cmp	r3, #0
 8002980:	d001      	beq.n	8002986 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e07c      	b.n	8002a80 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d104      	bne.n	8002996 <HAL_TIM_PWM_Start+0x82>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2202      	movs	r2, #2
 8002990:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002994:	e013      	b.n	80029be <HAL_TIM_PWM_Start+0xaa>
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	2b04      	cmp	r3, #4
 800299a:	d104      	bne.n	80029a6 <HAL_TIM_PWM_Start+0x92>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2202      	movs	r2, #2
 80029a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029a4:	e00b      	b.n	80029be <HAL_TIM_PWM_Start+0xaa>
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	2b08      	cmp	r3, #8
 80029aa:	d104      	bne.n	80029b6 <HAL_TIM_PWM_Start+0xa2>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2202      	movs	r2, #2
 80029b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029b4:	e003      	b.n	80029be <HAL_TIM_PWM_Start+0xaa>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2202      	movs	r2, #2
 80029ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	2201      	movs	r2, #1
 80029c4:	6839      	ldr	r1, [r7, #0]
 80029c6:	4618      	mov	r0, r3
 80029c8:	f000 fcec 	bl	80033a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a2d      	ldr	r2, [pc, #180]	; (8002a88 <HAL_TIM_PWM_Start+0x174>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d004      	beq.n	80029e0 <HAL_TIM_PWM_Start+0xcc>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a2c      	ldr	r2, [pc, #176]	; (8002a8c <HAL_TIM_PWM_Start+0x178>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d101      	bne.n	80029e4 <HAL_TIM_PWM_Start+0xd0>
 80029e0:	2301      	movs	r3, #1
 80029e2:	e000      	b.n	80029e6 <HAL_TIM_PWM_Start+0xd2>
 80029e4:	2300      	movs	r3, #0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d007      	beq.n	80029fa <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029f8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a22      	ldr	r2, [pc, #136]	; (8002a88 <HAL_TIM_PWM_Start+0x174>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d022      	beq.n	8002a4a <HAL_TIM_PWM_Start+0x136>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a0c:	d01d      	beq.n	8002a4a <HAL_TIM_PWM_Start+0x136>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a1f      	ldr	r2, [pc, #124]	; (8002a90 <HAL_TIM_PWM_Start+0x17c>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d018      	beq.n	8002a4a <HAL_TIM_PWM_Start+0x136>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a1d      	ldr	r2, [pc, #116]	; (8002a94 <HAL_TIM_PWM_Start+0x180>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d013      	beq.n	8002a4a <HAL_TIM_PWM_Start+0x136>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a1c      	ldr	r2, [pc, #112]	; (8002a98 <HAL_TIM_PWM_Start+0x184>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d00e      	beq.n	8002a4a <HAL_TIM_PWM_Start+0x136>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a16      	ldr	r2, [pc, #88]	; (8002a8c <HAL_TIM_PWM_Start+0x178>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d009      	beq.n	8002a4a <HAL_TIM_PWM_Start+0x136>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a18      	ldr	r2, [pc, #96]	; (8002a9c <HAL_TIM_PWM_Start+0x188>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d004      	beq.n	8002a4a <HAL_TIM_PWM_Start+0x136>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a16      	ldr	r2, [pc, #88]	; (8002aa0 <HAL_TIM_PWM_Start+0x18c>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d111      	bne.n	8002a6e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	f003 0307 	and.w	r3, r3, #7
 8002a54:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2b06      	cmp	r3, #6
 8002a5a:	d010      	beq.n	8002a7e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f042 0201 	orr.w	r2, r2, #1
 8002a6a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a6c:	e007      	b.n	8002a7e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f042 0201 	orr.w	r2, r2, #1
 8002a7c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a7e:	2300      	movs	r3, #0
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3710      	adds	r7, #16
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	40010000 	.word	0x40010000
 8002a8c:	40010400 	.word	0x40010400
 8002a90:	40000400 	.word	0x40000400
 8002a94:	40000800 	.word	0x40000800
 8002a98:	40000c00 	.word	0x40000c00
 8002a9c:	40014000 	.word	0x40014000
 8002aa0:	40001800 	.word	0x40001800

08002aa4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b086      	sub	sp, #24
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	60f8      	str	r0, [r7, #12]
 8002aac:	60b9      	str	r1, [r7, #8]
 8002aae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d101      	bne.n	8002ac2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002abe:	2302      	movs	r3, #2
 8002ac0:	e0ae      	b.n	8002c20 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2b0c      	cmp	r3, #12
 8002ace:	f200 809f 	bhi.w	8002c10 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002ad2:	a201      	add	r2, pc, #4	; (adr r2, 8002ad8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ad8:	08002b0d 	.word	0x08002b0d
 8002adc:	08002c11 	.word	0x08002c11
 8002ae0:	08002c11 	.word	0x08002c11
 8002ae4:	08002c11 	.word	0x08002c11
 8002ae8:	08002b4d 	.word	0x08002b4d
 8002aec:	08002c11 	.word	0x08002c11
 8002af0:	08002c11 	.word	0x08002c11
 8002af4:	08002c11 	.word	0x08002c11
 8002af8:	08002b8f 	.word	0x08002b8f
 8002afc:	08002c11 	.word	0x08002c11
 8002b00:	08002c11 	.word	0x08002c11
 8002b04:	08002c11 	.word	0x08002c11
 8002b08:	08002bcf 	.word	0x08002bcf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	68b9      	ldr	r1, [r7, #8]
 8002b12:	4618      	mov	r0, r3
 8002b14:	f000 f9fc 	bl	8002f10 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	699a      	ldr	r2, [r3, #24]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f042 0208 	orr.w	r2, r2, #8
 8002b26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	699a      	ldr	r2, [r3, #24]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f022 0204 	bic.w	r2, r2, #4
 8002b36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	6999      	ldr	r1, [r3, #24]
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	691a      	ldr	r2, [r3, #16]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	430a      	orrs	r2, r1
 8002b48:	619a      	str	r2, [r3, #24]
      break;
 8002b4a:	e064      	b.n	8002c16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	68b9      	ldr	r1, [r7, #8]
 8002b52:	4618      	mov	r0, r3
 8002b54:	f000 fa4c 	bl	8002ff0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	699a      	ldr	r2, [r3, #24]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	699a      	ldr	r2, [r3, #24]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	6999      	ldr	r1, [r3, #24]
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	691b      	ldr	r3, [r3, #16]
 8002b82:	021a      	lsls	r2, r3, #8
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	430a      	orrs	r2, r1
 8002b8a:	619a      	str	r2, [r3, #24]
      break;
 8002b8c:	e043      	b.n	8002c16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	68b9      	ldr	r1, [r7, #8]
 8002b94:	4618      	mov	r0, r3
 8002b96:	f000 faa1 	bl	80030dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	69da      	ldr	r2, [r3, #28]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f042 0208 	orr.w	r2, r2, #8
 8002ba8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	69da      	ldr	r2, [r3, #28]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f022 0204 	bic.w	r2, r2, #4
 8002bb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	69d9      	ldr	r1, [r3, #28]
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	691a      	ldr	r2, [r3, #16]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	430a      	orrs	r2, r1
 8002bca:	61da      	str	r2, [r3, #28]
      break;
 8002bcc:	e023      	b.n	8002c16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	68b9      	ldr	r1, [r7, #8]
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f000 faf5 	bl	80031c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	69da      	ldr	r2, [r3, #28]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002be8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	69da      	ldr	r2, [r3, #28]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bf8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	69d9      	ldr	r1, [r3, #28]
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	691b      	ldr	r3, [r3, #16]
 8002c04:	021a      	lsls	r2, r3, #8
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	430a      	orrs	r2, r1
 8002c0c:	61da      	str	r2, [r3, #28]
      break;
 8002c0e:	e002      	b.n	8002c16 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	75fb      	strb	r3, [r7, #23]
      break;
 8002c14:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002c1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3718      	adds	r7, #24
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c32:	2300      	movs	r3, #0
 8002c34:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d101      	bne.n	8002c44 <HAL_TIM_ConfigClockSource+0x1c>
 8002c40:	2302      	movs	r3, #2
 8002c42:	e0b4      	b.n	8002dae <HAL_TIM_ConfigClockSource+0x186>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2201      	movs	r2, #1
 8002c48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2202      	movs	r2, #2
 8002c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002c62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c6a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	68ba      	ldr	r2, [r7, #8]
 8002c72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c7c:	d03e      	beq.n	8002cfc <HAL_TIM_ConfigClockSource+0xd4>
 8002c7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c82:	f200 8087 	bhi.w	8002d94 <HAL_TIM_ConfigClockSource+0x16c>
 8002c86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c8a:	f000 8086 	beq.w	8002d9a <HAL_TIM_ConfigClockSource+0x172>
 8002c8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c92:	d87f      	bhi.n	8002d94 <HAL_TIM_ConfigClockSource+0x16c>
 8002c94:	2b70      	cmp	r3, #112	; 0x70
 8002c96:	d01a      	beq.n	8002cce <HAL_TIM_ConfigClockSource+0xa6>
 8002c98:	2b70      	cmp	r3, #112	; 0x70
 8002c9a:	d87b      	bhi.n	8002d94 <HAL_TIM_ConfigClockSource+0x16c>
 8002c9c:	2b60      	cmp	r3, #96	; 0x60
 8002c9e:	d050      	beq.n	8002d42 <HAL_TIM_ConfigClockSource+0x11a>
 8002ca0:	2b60      	cmp	r3, #96	; 0x60
 8002ca2:	d877      	bhi.n	8002d94 <HAL_TIM_ConfigClockSource+0x16c>
 8002ca4:	2b50      	cmp	r3, #80	; 0x50
 8002ca6:	d03c      	beq.n	8002d22 <HAL_TIM_ConfigClockSource+0xfa>
 8002ca8:	2b50      	cmp	r3, #80	; 0x50
 8002caa:	d873      	bhi.n	8002d94 <HAL_TIM_ConfigClockSource+0x16c>
 8002cac:	2b40      	cmp	r3, #64	; 0x40
 8002cae:	d058      	beq.n	8002d62 <HAL_TIM_ConfigClockSource+0x13a>
 8002cb0:	2b40      	cmp	r3, #64	; 0x40
 8002cb2:	d86f      	bhi.n	8002d94 <HAL_TIM_ConfigClockSource+0x16c>
 8002cb4:	2b30      	cmp	r3, #48	; 0x30
 8002cb6:	d064      	beq.n	8002d82 <HAL_TIM_ConfigClockSource+0x15a>
 8002cb8:	2b30      	cmp	r3, #48	; 0x30
 8002cba:	d86b      	bhi.n	8002d94 <HAL_TIM_ConfigClockSource+0x16c>
 8002cbc:	2b20      	cmp	r3, #32
 8002cbe:	d060      	beq.n	8002d82 <HAL_TIM_ConfigClockSource+0x15a>
 8002cc0:	2b20      	cmp	r3, #32
 8002cc2:	d867      	bhi.n	8002d94 <HAL_TIM_ConfigClockSource+0x16c>
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d05c      	beq.n	8002d82 <HAL_TIM_ConfigClockSource+0x15a>
 8002cc8:	2b10      	cmp	r3, #16
 8002cca:	d05a      	beq.n	8002d82 <HAL_TIM_ConfigClockSource+0x15a>
 8002ccc:	e062      	b.n	8002d94 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002cde:	f000 fb41 	bl	8003364 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002cf0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	68ba      	ldr	r2, [r7, #8]
 8002cf8:	609a      	str	r2, [r3, #8]
      break;
 8002cfa:	e04f      	b.n	8002d9c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002d0c:	f000 fb2a 	bl	8003364 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	689a      	ldr	r2, [r3, #8]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d1e:	609a      	str	r2, [r3, #8]
      break;
 8002d20:	e03c      	b.n	8002d9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d2e:	461a      	mov	r2, r3
 8002d30:	f000 fa9e 	bl	8003270 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2150      	movs	r1, #80	; 0x50
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f000 faf7 	bl	800332e <TIM_ITRx_SetConfig>
      break;
 8002d40:	e02c      	b.n	8002d9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d4e:	461a      	mov	r2, r3
 8002d50:	f000 fabd 	bl	80032ce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	2160      	movs	r1, #96	; 0x60
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f000 fae7 	bl	800332e <TIM_ITRx_SetConfig>
      break;
 8002d60:	e01c      	b.n	8002d9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d6e:	461a      	mov	r2, r3
 8002d70:	f000 fa7e 	bl	8003270 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2140      	movs	r1, #64	; 0x40
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f000 fad7 	bl	800332e <TIM_ITRx_SetConfig>
      break;
 8002d80:	e00c      	b.n	8002d9c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	4610      	mov	r0, r2
 8002d8e:	f000 face 	bl	800332e <TIM_ITRx_SetConfig>
      break;
 8002d92:	e003      	b.n	8002d9c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	73fb      	strb	r3, [r7, #15]
      break;
 8002d98:	e000      	b.n	8002d9c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002d9a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2200      	movs	r2, #0
 8002da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3710      	adds	r7, #16
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
	...

08002db8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b085      	sub	sp, #20
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	4a46      	ldr	r2, [pc, #280]	; (8002ee4 <TIM_Base_SetConfig+0x12c>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d013      	beq.n	8002df8 <TIM_Base_SetConfig+0x40>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dd6:	d00f      	beq.n	8002df8 <TIM_Base_SetConfig+0x40>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	4a43      	ldr	r2, [pc, #268]	; (8002ee8 <TIM_Base_SetConfig+0x130>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d00b      	beq.n	8002df8 <TIM_Base_SetConfig+0x40>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	4a42      	ldr	r2, [pc, #264]	; (8002eec <TIM_Base_SetConfig+0x134>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d007      	beq.n	8002df8 <TIM_Base_SetConfig+0x40>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	4a41      	ldr	r2, [pc, #260]	; (8002ef0 <TIM_Base_SetConfig+0x138>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d003      	beq.n	8002df8 <TIM_Base_SetConfig+0x40>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	4a40      	ldr	r2, [pc, #256]	; (8002ef4 <TIM_Base_SetConfig+0x13c>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d108      	bne.n	8002e0a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dfe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	68fa      	ldr	r2, [r7, #12]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4a35      	ldr	r2, [pc, #212]	; (8002ee4 <TIM_Base_SetConfig+0x12c>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d02b      	beq.n	8002e6a <TIM_Base_SetConfig+0xb2>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e18:	d027      	beq.n	8002e6a <TIM_Base_SetConfig+0xb2>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4a32      	ldr	r2, [pc, #200]	; (8002ee8 <TIM_Base_SetConfig+0x130>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d023      	beq.n	8002e6a <TIM_Base_SetConfig+0xb2>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a31      	ldr	r2, [pc, #196]	; (8002eec <TIM_Base_SetConfig+0x134>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d01f      	beq.n	8002e6a <TIM_Base_SetConfig+0xb2>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a30      	ldr	r2, [pc, #192]	; (8002ef0 <TIM_Base_SetConfig+0x138>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d01b      	beq.n	8002e6a <TIM_Base_SetConfig+0xb2>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a2f      	ldr	r2, [pc, #188]	; (8002ef4 <TIM_Base_SetConfig+0x13c>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d017      	beq.n	8002e6a <TIM_Base_SetConfig+0xb2>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a2e      	ldr	r2, [pc, #184]	; (8002ef8 <TIM_Base_SetConfig+0x140>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d013      	beq.n	8002e6a <TIM_Base_SetConfig+0xb2>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a2d      	ldr	r2, [pc, #180]	; (8002efc <TIM_Base_SetConfig+0x144>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d00f      	beq.n	8002e6a <TIM_Base_SetConfig+0xb2>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a2c      	ldr	r2, [pc, #176]	; (8002f00 <TIM_Base_SetConfig+0x148>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d00b      	beq.n	8002e6a <TIM_Base_SetConfig+0xb2>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a2b      	ldr	r2, [pc, #172]	; (8002f04 <TIM_Base_SetConfig+0x14c>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d007      	beq.n	8002e6a <TIM_Base_SetConfig+0xb2>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a2a      	ldr	r2, [pc, #168]	; (8002f08 <TIM_Base_SetConfig+0x150>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d003      	beq.n	8002e6a <TIM_Base_SetConfig+0xb2>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4a29      	ldr	r2, [pc, #164]	; (8002f0c <TIM_Base_SetConfig+0x154>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d108      	bne.n	8002e7c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	68db      	ldr	r3, [r3, #12]
 8002e76:	68fa      	ldr	r2, [r7, #12]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	695b      	ldr	r3, [r3, #20]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	68fa      	ldr	r2, [r7, #12]
 8002e8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	689a      	ldr	r2, [r3, #8]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	4a10      	ldr	r2, [pc, #64]	; (8002ee4 <TIM_Base_SetConfig+0x12c>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d003      	beq.n	8002eb0 <TIM_Base_SetConfig+0xf8>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	4a12      	ldr	r2, [pc, #72]	; (8002ef4 <TIM_Base_SetConfig+0x13c>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d103      	bne.n	8002eb8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	691a      	ldr	r2, [r3, #16]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	691b      	ldr	r3, [r3, #16]
 8002ec2:	f003 0301 	and.w	r3, r3, #1
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d105      	bne.n	8002ed6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	691b      	ldr	r3, [r3, #16]
 8002ece:	f023 0201 	bic.w	r2, r3, #1
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	611a      	str	r2, [r3, #16]
  }
}
 8002ed6:	bf00      	nop
 8002ed8:	3714      	adds	r7, #20
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
 8002ee2:	bf00      	nop
 8002ee4:	40010000 	.word	0x40010000
 8002ee8:	40000400 	.word	0x40000400
 8002eec:	40000800 	.word	0x40000800
 8002ef0:	40000c00 	.word	0x40000c00
 8002ef4:	40010400 	.word	0x40010400
 8002ef8:	40014000 	.word	0x40014000
 8002efc:	40014400 	.word	0x40014400
 8002f00:	40014800 	.word	0x40014800
 8002f04:	40001800 	.word	0x40001800
 8002f08:	40001c00 	.word	0x40001c00
 8002f0c:	40002000 	.word	0x40002000

08002f10 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b087      	sub	sp, #28
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a1b      	ldr	r3, [r3, #32]
 8002f1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6a1b      	ldr	r3, [r3, #32]
 8002f24:	f023 0201 	bic.w	r2, r3, #1
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	699b      	ldr	r3, [r3, #24]
 8002f36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	f023 0303 	bic.w	r3, r3, #3
 8002f46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	68fa      	ldr	r2, [r7, #12]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	f023 0302 	bic.w	r3, r3, #2
 8002f58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	697a      	ldr	r2, [r7, #20]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	4a20      	ldr	r2, [pc, #128]	; (8002fe8 <TIM_OC1_SetConfig+0xd8>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d003      	beq.n	8002f74 <TIM_OC1_SetConfig+0x64>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	4a1f      	ldr	r2, [pc, #124]	; (8002fec <TIM_OC1_SetConfig+0xdc>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d10c      	bne.n	8002f8e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	f023 0308 	bic.w	r3, r3, #8
 8002f7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	697a      	ldr	r2, [r7, #20]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	f023 0304 	bic.w	r3, r3, #4
 8002f8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a15      	ldr	r2, [pc, #84]	; (8002fe8 <TIM_OC1_SetConfig+0xd8>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d003      	beq.n	8002f9e <TIM_OC1_SetConfig+0x8e>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4a14      	ldr	r2, [pc, #80]	; (8002fec <TIM_OC1_SetConfig+0xdc>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d111      	bne.n	8002fc2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002fa4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002fac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	695b      	ldr	r3, [r3, #20]
 8002fb2:	693a      	ldr	r2, [r7, #16]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	699b      	ldr	r3, [r3, #24]
 8002fbc:	693a      	ldr	r2, [r7, #16]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	693a      	ldr	r2, [r7, #16]
 8002fc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	68fa      	ldr	r2, [r7, #12]
 8002fcc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	685a      	ldr	r2, [r3, #4]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	697a      	ldr	r2, [r7, #20]
 8002fda:	621a      	str	r2, [r3, #32]
}
 8002fdc:	bf00      	nop
 8002fde:	371c      	adds	r7, #28
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr
 8002fe8:	40010000 	.word	0x40010000
 8002fec:	40010400 	.word	0x40010400

08002ff0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b087      	sub	sp, #28
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6a1b      	ldr	r3, [r3, #32]
 8002ffe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6a1b      	ldr	r3, [r3, #32]
 8003004:	f023 0210 	bic.w	r2, r3, #16
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	699b      	ldr	r3, [r3, #24]
 8003016:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800301e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003026:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	021b      	lsls	r3, r3, #8
 800302e:	68fa      	ldr	r2, [r7, #12]
 8003030:	4313      	orrs	r3, r2
 8003032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	f023 0320 	bic.w	r3, r3, #32
 800303a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	011b      	lsls	r3, r3, #4
 8003042:	697a      	ldr	r2, [r7, #20]
 8003044:	4313      	orrs	r3, r2
 8003046:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	4a22      	ldr	r2, [pc, #136]	; (80030d4 <TIM_OC2_SetConfig+0xe4>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d003      	beq.n	8003058 <TIM_OC2_SetConfig+0x68>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	4a21      	ldr	r2, [pc, #132]	; (80030d8 <TIM_OC2_SetConfig+0xe8>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d10d      	bne.n	8003074 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800305e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	011b      	lsls	r3, r3, #4
 8003066:	697a      	ldr	r2, [r7, #20]
 8003068:	4313      	orrs	r3, r2
 800306a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003072:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	4a17      	ldr	r2, [pc, #92]	; (80030d4 <TIM_OC2_SetConfig+0xe4>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d003      	beq.n	8003084 <TIM_OC2_SetConfig+0x94>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	4a16      	ldr	r2, [pc, #88]	; (80030d8 <TIM_OC2_SetConfig+0xe8>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d113      	bne.n	80030ac <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800308a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003092:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	695b      	ldr	r3, [r3, #20]
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	693a      	ldr	r2, [r7, #16]
 800309c:	4313      	orrs	r3, r2
 800309e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	699b      	ldr	r3, [r3, #24]
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	693a      	ldr	r2, [r7, #16]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	693a      	ldr	r2, [r7, #16]
 80030b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	68fa      	ldr	r2, [r7, #12]
 80030b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	685a      	ldr	r2, [r3, #4]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	697a      	ldr	r2, [r7, #20]
 80030c4:	621a      	str	r2, [r3, #32]
}
 80030c6:	bf00      	nop
 80030c8:	371c      	adds	r7, #28
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
 80030d2:	bf00      	nop
 80030d4:	40010000 	.word	0x40010000
 80030d8:	40010400 	.word	0x40010400

080030dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80030dc:	b480      	push	{r7}
 80030de:	b087      	sub	sp, #28
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
 80030e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a1b      	ldr	r3, [r3, #32]
 80030ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6a1b      	ldr	r3, [r3, #32]
 80030f0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	69db      	ldr	r3, [r3, #28]
 8003102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800310a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f023 0303 	bic.w	r3, r3, #3
 8003112:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	68fa      	ldr	r2, [r7, #12]
 800311a:	4313      	orrs	r3, r2
 800311c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003124:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	021b      	lsls	r3, r3, #8
 800312c:	697a      	ldr	r2, [r7, #20]
 800312e:	4313      	orrs	r3, r2
 8003130:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a21      	ldr	r2, [pc, #132]	; (80031bc <TIM_OC3_SetConfig+0xe0>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d003      	beq.n	8003142 <TIM_OC3_SetConfig+0x66>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a20      	ldr	r2, [pc, #128]	; (80031c0 <TIM_OC3_SetConfig+0xe4>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d10d      	bne.n	800315e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003148:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	68db      	ldr	r3, [r3, #12]
 800314e:	021b      	lsls	r3, r3, #8
 8003150:	697a      	ldr	r2, [r7, #20]
 8003152:	4313      	orrs	r3, r2
 8003154:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800315c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a16      	ldr	r2, [pc, #88]	; (80031bc <TIM_OC3_SetConfig+0xe0>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d003      	beq.n	800316e <TIM_OC3_SetConfig+0x92>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4a15      	ldr	r2, [pc, #84]	; (80031c0 <TIM_OC3_SetConfig+0xe4>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d113      	bne.n	8003196 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003174:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800317c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	695b      	ldr	r3, [r3, #20]
 8003182:	011b      	lsls	r3, r3, #4
 8003184:	693a      	ldr	r2, [r7, #16]
 8003186:	4313      	orrs	r3, r2
 8003188:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	699b      	ldr	r3, [r3, #24]
 800318e:	011b      	lsls	r3, r3, #4
 8003190:	693a      	ldr	r2, [r7, #16]
 8003192:	4313      	orrs	r3, r2
 8003194:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	693a      	ldr	r2, [r7, #16]
 800319a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	68fa      	ldr	r2, [r7, #12]
 80031a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	685a      	ldr	r2, [r3, #4]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	697a      	ldr	r2, [r7, #20]
 80031ae:	621a      	str	r2, [r3, #32]
}
 80031b0:	bf00      	nop
 80031b2:	371c      	adds	r7, #28
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr
 80031bc:	40010000 	.word	0x40010000
 80031c0:	40010400 	.word	0x40010400

080031c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b087      	sub	sp, #28
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6a1b      	ldr	r3, [r3, #32]
 80031d2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6a1b      	ldr	r3, [r3, #32]
 80031d8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	69db      	ldr	r3, [r3, #28]
 80031ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	021b      	lsls	r3, r3, #8
 8003202:	68fa      	ldr	r2, [r7, #12]
 8003204:	4313      	orrs	r3, r2
 8003206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800320e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	031b      	lsls	r3, r3, #12
 8003216:	693a      	ldr	r2, [r7, #16]
 8003218:	4313      	orrs	r3, r2
 800321a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	4a12      	ldr	r2, [pc, #72]	; (8003268 <TIM_OC4_SetConfig+0xa4>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d003      	beq.n	800322c <TIM_OC4_SetConfig+0x68>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	4a11      	ldr	r2, [pc, #68]	; (800326c <TIM_OC4_SetConfig+0xa8>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d109      	bne.n	8003240 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003232:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	695b      	ldr	r3, [r3, #20]
 8003238:	019b      	lsls	r3, r3, #6
 800323a:	697a      	ldr	r2, [r7, #20]
 800323c:	4313      	orrs	r3, r2
 800323e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	697a      	ldr	r2, [r7, #20]
 8003244:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	68fa      	ldr	r2, [r7, #12]
 800324a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	685a      	ldr	r2, [r3, #4]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	693a      	ldr	r2, [r7, #16]
 8003258:	621a      	str	r2, [r3, #32]
}
 800325a:	bf00      	nop
 800325c:	371c      	adds	r7, #28
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr
 8003266:	bf00      	nop
 8003268:	40010000 	.word	0x40010000
 800326c:	40010400 	.word	0x40010400

08003270 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003270:	b480      	push	{r7}
 8003272:	b087      	sub	sp, #28
 8003274:	af00      	add	r7, sp, #0
 8003276:	60f8      	str	r0, [r7, #12]
 8003278:	60b9      	str	r1, [r7, #8]
 800327a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6a1b      	ldr	r3, [r3, #32]
 8003280:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6a1b      	ldr	r3, [r3, #32]
 8003286:	f023 0201 	bic.w	r2, r3, #1
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	699b      	ldr	r3, [r3, #24]
 8003292:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800329a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	011b      	lsls	r3, r3, #4
 80032a0:	693a      	ldr	r2, [r7, #16]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	f023 030a 	bic.w	r3, r3, #10
 80032ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80032ae:	697a      	ldr	r2, [r7, #20]
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	693a      	ldr	r2, [r7, #16]
 80032ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	697a      	ldr	r2, [r7, #20]
 80032c0:	621a      	str	r2, [r3, #32]
}
 80032c2:	bf00      	nop
 80032c4:	371c      	adds	r7, #28
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr

080032ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032ce:	b480      	push	{r7}
 80032d0:	b087      	sub	sp, #28
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	60f8      	str	r0, [r7, #12]
 80032d6:	60b9      	str	r1, [r7, #8]
 80032d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	6a1b      	ldr	r3, [r3, #32]
 80032de:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6a1b      	ldr	r3, [r3, #32]
 80032e4:	f023 0210 	bic.w	r2, r3, #16
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	699b      	ldr	r3, [r3, #24]
 80032f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80032f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	031b      	lsls	r3, r3, #12
 80032fe:	693a      	ldr	r2, [r7, #16]
 8003300:	4313      	orrs	r3, r2
 8003302:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800330a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	011b      	lsls	r3, r3, #4
 8003310:	697a      	ldr	r2, [r7, #20]
 8003312:	4313      	orrs	r3, r2
 8003314:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	693a      	ldr	r2, [r7, #16]
 800331a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	697a      	ldr	r2, [r7, #20]
 8003320:	621a      	str	r2, [r3, #32]
}
 8003322:	bf00      	nop
 8003324:	371c      	adds	r7, #28
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr

0800332e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800332e:	b480      	push	{r7}
 8003330:	b085      	sub	sp, #20
 8003332:	af00      	add	r7, sp, #0
 8003334:	6078      	str	r0, [r7, #4]
 8003336:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003344:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003346:	683a      	ldr	r2, [r7, #0]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	4313      	orrs	r3, r2
 800334c:	f043 0307 	orr.w	r3, r3, #7
 8003350:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	68fa      	ldr	r2, [r7, #12]
 8003356:	609a      	str	r2, [r3, #8]
}
 8003358:	bf00      	nop
 800335a:	3714      	adds	r7, #20
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr

08003364 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003364:	b480      	push	{r7}
 8003366:	b087      	sub	sp, #28
 8003368:	af00      	add	r7, sp, #0
 800336a:	60f8      	str	r0, [r7, #12]
 800336c:	60b9      	str	r1, [r7, #8]
 800336e:	607a      	str	r2, [r7, #4]
 8003370:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800337e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	021a      	lsls	r2, r3, #8
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	431a      	orrs	r2, r3
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	4313      	orrs	r3, r2
 800338c:	697a      	ldr	r2, [r7, #20]
 800338e:	4313      	orrs	r3, r2
 8003390:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	697a      	ldr	r2, [r7, #20]
 8003396:	609a      	str	r2, [r3, #8]
}
 8003398:	bf00      	nop
 800339a:	371c      	adds	r7, #28
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr

080033a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b087      	sub	sp, #28
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	60b9      	str	r1, [r7, #8]
 80033ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	f003 031f 	and.w	r3, r3, #31
 80033b6:	2201      	movs	r2, #1
 80033b8:	fa02 f303 	lsl.w	r3, r2, r3
 80033bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	6a1a      	ldr	r2, [r3, #32]
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	43db      	mvns	r3, r3
 80033c6:	401a      	ands	r2, r3
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6a1a      	ldr	r2, [r3, #32]
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	f003 031f 	and.w	r3, r3, #31
 80033d6:	6879      	ldr	r1, [r7, #4]
 80033d8:	fa01 f303 	lsl.w	r3, r1, r3
 80033dc:	431a      	orrs	r2, r3
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	621a      	str	r2, [r3, #32]
}
 80033e2:	bf00      	nop
 80033e4:	371c      	adds	r7, #28
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
	...

080033f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b085      	sub	sp, #20
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003400:	2b01      	cmp	r3, #1
 8003402:	d101      	bne.n	8003408 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003404:	2302      	movs	r3, #2
 8003406:	e05a      	b.n	80034be <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2201      	movs	r2, #1
 800340c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2202      	movs	r2, #2
 8003414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800342e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	68fa      	ldr	r2, [r7, #12]
 8003436:	4313      	orrs	r3, r2
 8003438:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	68fa      	ldr	r2, [r7, #12]
 8003440:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a21      	ldr	r2, [pc, #132]	; (80034cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d022      	beq.n	8003492 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003454:	d01d      	beq.n	8003492 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a1d      	ldr	r2, [pc, #116]	; (80034d0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d018      	beq.n	8003492 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a1b      	ldr	r2, [pc, #108]	; (80034d4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d013      	beq.n	8003492 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a1a      	ldr	r2, [pc, #104]	; (80034d8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d00e      	beq.n	8003492 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a18      	ldr	r2, [pc, #96]	; (80034dc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d009      	beq.n	8003492 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a17      	ldr	r2, [pc, #92]	; (80034e0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d004      	beq.n	8003492 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a15      	ldr	r2, [pc, #84]	; (80034e4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d10c      	bne.n	80034ac <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003498:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	68ba      	ldr	r2, [r7, #8]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	68ba      	ldr	r2, [r7, #8]
 80034aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80034bc:	2300      	movs	r3, #0
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3714      	adds	r7, #20
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr
 80034ca:	bf00      	nop
 80034cc:	40010000 	.word	0x40010000
 80034d0:	40000400 	.word	0x40000400
 80034d4:	40000800 	.word	0x40000800
 80034d8:	40000c00 	.word	0x40000c00
 80034dc:	40010400 	.word	0x40010400
 80034e0:	40014000 	.word	0x40014000
 80034e4:	40001800 	.word	0x40001800

080034e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b082      	sub	sp, #8
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d101      	bne.n	80034fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e042      	b.n	8003580 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003500:	b2db      	uxtb	r3, r3
 8003502:	2b00      	cmp	r3, #0
 8003504:	d106      	bne.n	8003514 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f7fd fd02 	bl	8000f18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2224      	movs	r2, #36	; 0x24
 8003518:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	68da      	ldr	r2, [r3, #12]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800352a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	f000 fc85 	bl	8003e3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	691a      	ldr	r2, [r3, #16]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003540:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	695a      	ldr	r2, [r3, #20]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003550:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	68da      	ldr	r2, [r3, #12]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003560:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2200      	movs	r2, #0
 8003566:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2220      	movs	r2, #32
 800356c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2220      	movs	r2, #32
 8003574:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800357e:	2300      	movs	r3, #0
}
 8003580:	4618      	mov	r0, r3
 8003582:	3708      	adds	r7, #8
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}

08003588 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b0ba      	sub	sp, #232	; 0xe8
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	695b      	ldr	r3, [r3, #20]
 80035aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80035ae:	2300      	movs	r3, #0
 80035b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80035b4:	2300      	movs	r3, #0
 80035b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80035ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035be:	f003 030f 	and.w	r3, r3, #15
 80035c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80035c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d10f      	bne.n	80035ee <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80035ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035d2:	f003 0320 	and.w	r3, r3, #32
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d009      	beq.n	80035ee <HAL_UART_IRQHandler+0x66>
 80035da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035de:	f003 0320 	and.w	r3, r3, #32
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d003      	beq.n	80035ee <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f000 fb69 	bl	8003cbe <UART_Receive_IT>
      return;
 80035ec:	e25b      	b.n	8003aa6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80035ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	f000 80de 	beq.w	80037b4 <HAL_UART_IRQHandler+0x22c>
 80035f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80035fc:	f003 0301 	and.w	r3, r3, #1
 8003600:	2b00      	cmp	r3, #0
 8003602:	d106      	bne.n	8003612 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003604:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003608:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800360c:	2b00      	cmp	r3, #0
 800360e:	f000 80d1 	beq.w	80037b4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003612:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003616:	f003 0301 	and.w	r3, r3, #1
 800361a:	2b00      	cmp	r3, #0
 800361c:	d00b      	beq.n	8003636 <HAL_UART_IRQHandler+0xae>
 800361e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003626:	2b00      	cmp	r3, #0
 8003628:	d005      	beq.n	8003636 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800362e:	f043 0201 	orr.w	r2, r3, #1
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003636:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800363a:	f003 0304 	and.w	r3, r3, #4
 800363e:	2b00      	cmp	r3, #0
 8003640:	d00b      	beq.n	800365a <HAL_UART_IRQHandler+0xd2>
 8003642:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003646:	f003 0301 	and.w	r3, r3, #1
 800364a:	2b00      	cmp	r3, #0
 800364c:	d005      	beq.n	800365a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003652:	f043 0202 	orr.w	r2, r3, #2
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800365a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800365e:	f003 0302 	and.w	r3, r3, #2
 8003662:	2b00      	cmp	r3, #0
 8003664:	d00b      	beq.n	800367e <HAL_UART_IRQHandler+0xf6>
 8003666:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800366a:	f003 0301 	and.w	r3, r3, #1
 800366e:	2b00      	cmp	r3, #0
 8003670:	d005      	beq.n	800367e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003676:	f043 0204 	orr.w	r2, r3, #4
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800367e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003682:	f003 0308 	and.w	r3, r3, #8
 8003686:	2b00      	cmp	r3, #0
 8003688:	d011      	beq.n	80036ae <HAL_UART_IRQHandler+0x126>
 800368a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800368e:	f003 0320 	and.w	r3, r3, #32
 8003692:	2b00      	cmp	r3, #0
 8003694:	d105      	bne.n	80036a2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003696:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800369a:	f003 0301 	and.w	r3, r3, #1
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d005      	beq.n	80036ae <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a6:	f043 0208 	orr.w	r2, r3, #8
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	f000 81f2 	beq.w	8003a9c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80036b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036bc:	f003 0320 	and.w	r3, r3, #32
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d008      	beq.n	80036d6 <HAL_UART_IRQHandler+0x14e>
 80036c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036c8:	f003 0320 	and.w	r3, r3, #32
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d002      	beq.n	80036d6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f000 faf4 	bl	8003cbe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	695b      	ldr	r3, [r3, #20]
 80036dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036e0:	2b40      	cmp	r3, #64	; 0x40
 80036e2:	bf0c      	ite	eq
 80036e4:	2301      	moveq	r3, #1
 80036e6:	2300      	movne	r3, #0
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f2:	f003 0308 	and.w	r3, r3, #8
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d103      	bne.n	8003702 <HAL_UART_IRQHandler+0x17a>
 80036fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d04f      	beq.n	80037a2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f000 f9fc 	bl	8003b00 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	695b      	ldr	r3, [r3, #20]
 800370e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003712:	2b40      	cmp	r3, #64	; 0x40
 8003714:	d141      	bne.n	800379a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	3314      	adds	r3, #20
 800371c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003720:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003724:	e853 3f00 	ldrex	r3, [r3]
 8003728:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800372c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003730:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003734:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	3314      	adds	r3, #20
 800373e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003742:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003746:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800374a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800374e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003752:	e841 2300 	strex	r3, r2, [r1]
 8003756:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800375a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d1d9      	bne.n	8003716 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003766:	2b00      	cmp	r3, #0
 8003768:	d013      	beq.n	8003792 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800376e:	4a7e      	ldr	r2, [pc, #504]	; (8003968 <HAL_UART_IRQHandler+0x3e0>)
 8003770:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003776:	4618      	mov	r0, r3
 8003778:	f7fd ff40 	bl	80015fc <HAL_DMA_Abort_IT>
 800377c:	4603      	mov	r3, r0
 800377e:	2b00      	cmp	r3, #0
 8003780:	d016      	beq.n	80037b0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003786:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800378c:	4610      	mov	r0, r2
 800378e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003790:	e00e      	b.n	80037b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f000 f99e 	bl	8003ad4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003798:	e00a      	b.n	80037b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f000 f99a 	bl	8003ad4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037a0:	e006      	b.n	80037b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 f996 	bl	8003ad4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80037ae:	e175      	b.n	8003a9c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037b0:	bf00      	nop
    return;
 80037b2:	e173      	b.n	8003a9c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	f040 814f 	bne.w	8003a5c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80037be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037c2:	f003 0310 	and.w	r3, r3, #16
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	f000 8148 	beq.w	8003a5c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80037cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037d0:	f003 0310 	and.w	r3, r3, #16
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	f000 8141 	beq.w	8003a5c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80037da:	2300      	movs	r3, #0
 80037dc:	60bb      	str	r3, [r7, #8]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	60bb      	str	r3, [r7, #8]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	60bb      	str	r3, [r7, #8]
 80037ee:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	695b      	ldr	r3, [r3, #20]
 80037f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037fa:	2b40      	cmp	r3, #64	; 0x40
 80037fc:	f040 80b6 	bne.w	800396c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800380c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003810:	2b00      	cmp	r3, #0
 8003812:	f000 8145 	beq.w	8003aa0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800381a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800381e:	429a      	cmp	r2, r3
 8003820:	f080 813e 	bcs.w	8003aa0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800382a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003830:	69db      	ldr	r3, [r3, #28]
 8003832:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003836:	f000 8088 	beq.w	800394a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	330c      	adds	r3, #12
 8003840:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003844:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003848:	e853 3f00 	ldrex	r3, [r3]
 800384c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003850:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003854:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003858:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	330c      	adds	r3, #12
 8003862:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003866:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800386a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800386e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003872:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003876:	e841 2300 	strex	r3, r2, [r1]
 800387a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800387e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003882:	2b00      	cmp	r3, #0
 8003884:	d1d9      	bne.n	800383a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	3314      	adds	r3, #20
 800388c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800388e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003890:	e853 3f00 	ldrex	r3, [r3]
 8003894:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003896:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003898:	f023 0301 	bic.w	r3, r3, #1
 800389c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	3314      	adds	r3, #20
 80038a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80038aa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80038ae:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038b0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80038b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80038b6:	e841 2300 	strex	r3, r2, [r1]
 80038ba:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80038bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d1e1      	bne.n	8003886 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	3314      	adds	r3, #20
 80038c8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80038cc:	e853 3f00 	ldrex	r3, [r3]
 80038d0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80038d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	3314      	adds	r3, #20
 80038e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80038e6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80038e8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ea:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80038ec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80038ee:	e841 2300 	strex	r3, r2, [r1]
 80038f2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80038f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d1e3      	bne.n	80038c2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2220      	movs	r2, #32
 80038fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	330c      	adds	r3, #12
 800390e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003910:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003912:	e853 3f00 	ldrex	r3, [r3]
 8003916:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003918:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800391a:	f023 0310 	bic.w	r3, r3, #16
 800391e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	330c      	adds	r3, #12
 8003928:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800392c:	65ba      	str	r2, [r7, #88]	; 0x58
 800392e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003930:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003932:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003934:	e841 2300 	strex	r3, r2, [r1]
 8003938:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800393a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800393c:	2b00      	cmp	r3, #0
 800393e:	d1e3      	bne.n	8003908 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003944:	4618      	mov	r0, r3
 8003946:	f7fd fde9 	bl	800151c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2202      	movs	r2, #2
 800394e:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003958:	b29b      	uxth	r3, r3
 800395a:	1ad3      	subs	r3, r2, r3
 800395c:	b29b      	uxth	r3, r3
 800395e:	4619      	mov	r1, r3
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f000 f8c1 	bl	8003ae8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003966:	e09b      	b.n	8003aa0 <HAL_UART_IRQHandler+0x518>
 8003968:	08003bc7 	.word	0x08003bc7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003974:	b29b      	uxth	r3, r3
 8003976:	1ad3      	subs	r3, r2, r3
 8003978:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003980:	b29b      	uxth	r3, r3
 8003982:	2b00      	cmp	r3, #0
 8003984:	f000 808e 	beq.w	8003aa4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003988:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800398c:	2b00      	cmp	r3, #0
 800398e:	f000 8089 	beq.w	8003aa4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	330c      	adds	r3, #12
 8003998:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800399a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800399c:	e853 3f00 	ldrex	r3, [r3]
 80039a0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80039a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80039a8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	330c      	adds	r3, #12
 80039b2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80039b6:	647a      	str	r2, [r7, #68]	; 0x44
 80039b8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80039bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80039be:	e841 2300 	strex	r3, r2, [r1]
 80039c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80039c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d1e3      	bne.n	8003992 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	3314      	adds	r3, #20
 80039d0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d4:	e853 3f00 	ldrex	r3, [r3]
 80039d8:	623b      	str	r3, [r7, #32]
   return(result);
 80039da:	6a3b      	ldr	r3, [r7, #32]
 80039dc:	f023 0301 	bic.w	r3, r3, #1
 80039e0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	3314      	adds	r3, #20
 80039ea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80039ee:	633a      	str	r2, [r7, #48]	; 0x30
 80039f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80039f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039f6:	e841 2300 	strex	r3, r2, [r1]
 80039fa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80039fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d1e3      	bne.n	80039ca <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2220      	movs	r2, #32
 8003a06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	330c      	adds	r3, #12
 8003a16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	e853 3f00 	ldrex	r3, [r3]
 8003a1e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f023 0310 	bic.w	r3, r3, #16
 8003a26:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	330c      	adds	r3, #12
 8003a30:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003a34:	61fa      	str	r2, [r7, #28]
 8003a36:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a38:	69b9      	ldr	r1, [r7, #24]
 8003a3a:	69fa      	ldr	r2, [r7, #28]
 8003a3c:	e841 2300 	strex	r3, r2, [r1]
 8003a40:	617b      	str	r3, [r7, #20]
   return(result);
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d1e3      	bne.n	8003a10 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2202      	movs	r2, #2
 8003a4c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003a4e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003a52:	4619      	mov	r1, r3
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f000 f847 	bl	8003ae8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003a5a:	e023      	b.n	8003aa4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003a5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d009      	beq.n	8003a7c <HAL_UART_IRQHandler+0x4f4>
 8003a68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d003      	beq.n	8003a7c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f000 f8ba 	bl	8003bee <UART_Transmit_IT>
    return;
 8003a7a:	e014      	b.n	8003aa6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003a7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d00e      	beq.n	8003aa6 <HAL_UART_IRQHandler+0x51e>
 8003a88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d008      	beq.n	8003aa6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f000 f8fa 	bl	8003c8e <UART_EndTransmit_IT>
    return;
 8003a9a:	e004      	b.n	8003aa6 <HAL_UART_IRQHandler+0x51e>
    return;
 8003a9c:	bf00      	nop
 8003a9e:	e002      	b.n	8003aa6 <HAL_UART_IRQHandler+0x51e>
      return;
 8003aa0:	bf00      	nop
 8003aa2:	e000      	b.n	8003aa6 <HAL_UART_IRQHandler+0x51e>
      return;
 8003aa4:	bf00      	nop
  }
}
 8003aa6:	37e8      	adds	r7, #232	; 0xe8
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}

08003aac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003ab4:	bf00      	nop
 8003ab6:	370c      	adds	r7, #12
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr

08003ac0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b083      	sub	sp, #12
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003ac8:	bf00      	nop
 8003aca:	370c      	adds	r7, #12
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr

08003ad4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b083      	sub	sp, #12
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003adc:	bf00      	nop
 8003ade:	370c      	adds	r7, #12
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr

08003ae8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b083      	sub	sp, #12
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	460b      	mov	r3, r1
 8003af2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003af4:	bf00      	nop
 8003af6:	370c      	adds	r7, #12
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr

08003b00 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b095      	sub	sp, #84	; 0x54
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	330c      	adds	r3, #12
 8003b0e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b12:	e853 3f00 	ldrex	r3, [r3]
 8003b16:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b1a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003b1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	330c      	adds	r3, #12
 8003b26:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b28:	643a      	str	r2, [r7, #64]	; 0x40
 8003b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b2c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003b2e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003b30:	e841 2300 	strex	r3, r2, [r1]
 8003b34:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d1e5      	bne.n	8003b08 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	3314      	adds	r3, #20
 8003b42:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b44:	6a3b      	ldr	r3, [r7, #32]
 8003b46:	e853 3f00 	ldrex	r3, [r3]
 8003b4a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	f023 0301 	bic.w	r3, r3, #1
 8003b52:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	3314      	adds	r3, #20
 8003b5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b5c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b5e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b64:	e841 2300 	strex	r3, r2, [r1]
 8003b68:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d1e5      	bne.n	8003b3c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d119      	bne.n	8003bac <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	330c      	adds	r3, #12
 8003b7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	e853 3f00 	ldrex	r3, [r3]
 8003b86:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	f023 0310 	bic.w	r3, r3, #16
 8003b8e:	647b      	str	r3, [r7, #68]	; 0x44
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	330c      	adds	r3, #12
 8003b96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003b98:	61ba      	str	r2, [r7, #24]
 8003b9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b9c:	6979      	ldr	r1, [r7, #20]
 8003b9e:	69ba      	ldr	r2, [r7, #24]
 8003ba0:	e841 2300 	strex	r3, r2, [r1]
 8003ba4:	613b      	str	r3, [r7, #16]
   return(result);
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d1e5      	bne.n	8003b78 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2220      	movs	r2, #32
 8003bb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003bba:	bf00      	nop
 8003bbc:	3754      	adds	r7, #84	; 0x54
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr

08003bc6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003bc6:	b580      	push	{r7, lr}
 8003bc8:	b084      	sub	sp, #16
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003be0:	68f8      	ldr	r0, [r7, #12]
 8003be2:	f7ff ff77 	bl	8003ad4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003be6:	bf00      	nop
 8003be8:	3710      	adds	r7, #16
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}

08003bee <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003bee:	b480      	push	{r7}
 8003bf0:	b085      	sub	sp, #20
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	2b21      	cmp	r3, #33	; 0x21
 8003c00:	d13e      	bne.n	8003c80 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c0a:	d114      	bne.n	8003c36 <UART_Transmit_IT+0x48>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	691b      	ldr	r3, [r3, #16]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d110      	bne.n	8003c36 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6a1b      	ldr	r3, [r3, #32]
 8003c18:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	881b      	ldrh	r3, [r3, #0]
 8003c1e:	461a      	mov	r2, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c28:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6a1b      	ldr	r3, [r3, #32]
 8003c2e:	1c9a      	adds	r2, r3, #2
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	621a      	str	r2, [r3, #32]
 8003c34:	e008      	b.n	8003c48 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6a1b      	ldr	r3, [r3, #32]
 8003c3a:	1c59      	adds	r1, r3, #1
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	6211      	str	r1, [r2, #32]
 8003c40:	781a      	ldrb	r2, [r3, #0]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	3b01      	subs	r3, #1
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	4619      	mov	r1, r3
 8003c56:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d10f      	bne.n	8003c7c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	68da      	ldr	r2, [r3, #12]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c6a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	68da      	ldr	r2, [r3, #12]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c7a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	e000      	b.n	8003c82 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003c80:	2302      	movs	r3, #2
  }
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3714      	adds	r7, #20
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr

08003c8e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003c8e:	b580      	push	{r7, lr}
 8003c90:	b082      	sub	sp, #8
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	68da      	ldr	r2, [r3, #12]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ca4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2220      	movs	r2, #32
 8003caa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f7ff fefc 	bl	8003aac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003cb4:	2300      	movs	r3, #0
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3708      	adds	r7, #8
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}

08003cbe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003cbe:	b580      	push	{r7, lr}
 8003cc0:	b08c      	sub	sp, #48	; 0x30
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	2b22      	cmp	r3, #34	; 0x22
 8003cd0:	f040 80ae 	bne.w	8003e30 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cdc:	d117      	bne.n	8003d0e <UART_Receive_IT+0x50>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	691b      	ldr	r3, [r3, #16]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d113      	bne.n	8003d0e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cee:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cfc:	b29a      	uxth	r2, r3
 8003cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d00:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d06:	1c9a      	adds	r2, r3, #2
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	629a      	str	r2, [r3, #40]	; 0x28
 8003d0c:	e026      	b.n	8003d5c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d12:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003d14:	2300      	movs	r3, #0
 8003d16:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d20:	d007      	beq.n	8003d32 <UART_Receive_IT+0x74>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d10a      	bne.n	8003d40 <UART_Receive_IT+0x82>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	691b      	ldr	r3, [r3, #16]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d106      	bne.n	8003d40 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	b2da      	uxtb	r2, r3
 8003d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d3c:	701a      	strb	r2, [r3, #0]
 8003d3e:	e008      	b.n	8003d52 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d4c:	b2da      	uxtb	r2, r3
 8003d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d50:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d56:	1c5a      	adds	r2, r3, #1
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	3b01      	subs	r3, #1
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	687a      	ldr	r2, [r7, #4]
 8003d68:	4619      	mov	r1, r3
 8003d6a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d15d      	bne.n	8003e2c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	68da      	ldr	r2, [r3, #12]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f022 0220 	bic.w	r2, r2, #32
 8003d7e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	68da      	ldr	r2, [r3, #12]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d8e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	695a      	ldr	r2, [r3, #20]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f022 0201 	bic.w	r2, r2, #1
 8003d9e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2220      	movs	r2, #32
 8003da4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2200      	movs	r2, #0
 8003dac:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d135      	bne.n	8003e22 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	330c      	adds	r3, #12
 8003dc2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	e853 3f00 	ldrex	r3, [r3]
 8003dca:	613b      	str	r3, [r7, #16]
   return(result);
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	f023 0310 	bic.w	r3, r3, #16
 8003dd2:	627b      	str	r3, [r7, #36]	; 0x24
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	330c      	adds	r3, #12
 8003dda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ddc:	623a      	str	r2, [r7, #32]
 8003dde:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003de0:	69f9      	ldr	r1, [r7, #28]
 8003de2:	6a3a      	ldr	r2, [r7, #32]
 8003de4:	e841 2300 	strex	r3, r2, [r1]
 8003de8:	61bb      	str	r3, [r7, #24]
   return(result);
 8003dea:	69bb      	ldr	r3, [r7, #24]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d1e5      	bne.n	8003dbc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0310 	and.w	r3, r3, #16
 8003dfa:	2b10      	cmp	r3, #16
 8003dfc:	d10a      	bne.n	8003e14 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003dfe:	2300      	movs	r3, #0
 8003e00:	60fb      	str	r3, [r7, #12]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	60fb      	str	r3, [r7, #12]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	60fb      	str	r3, [r7, #12]
 8003e12:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003e18:	4619      	mov	r1, r3
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f7ff fe64 	bl	8003ae8 <HAL_UARTEx_RxEventCallback>
 8003e20:	e002      	b.n	8003e28 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f7ff fe4c 	bl	8003ac0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	e002      	b.n	8003e32 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	e000      	b.n	8003e32 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003e30:	2302      	movs	r3, #2
  }
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3730      	adds	r7, #48	; 0x30
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
	...

08003e3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e40:	b0c0      	sub	sp, #256	; 0x100
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	691b      	ldr	r3, [r3, #16]
 8003e50:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e58:	68d9      	ldr	r1, [r3, #12]
 8003e5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	ea40 0301 	orr.w	r3, r0, r1
 8003e64:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003e66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e6a:	689a      	ldr	r2, [r3, #8]
 8003e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e70:	691b      	ldr	r3, [r3, #16]
 8003e72:	431a      	orrs	r2, r3
 8003e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e78:	695b      	ldr	r3, [r3, #20]
 8003e7a:	431a      	orrs	r2, r3
 8003e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e80:	69db      	ldr	r3, [r3, #28]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003e94:	f021 010c 	bic.w	r1, r1, #12
 8003e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003ea2:	430b      	orrs	r3, r1
 8003ea4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ea6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	695b      	ldr	r3, [r3, #20]
 8003eae:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003eb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eb6:	6999      	ldr	r1, [r3, #24]
 8003eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	ea40 0301 	orr.w	r3, r0, r1
 8003ec2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	4b8f      	ldr	r3, [pc, #572]	; (8004108 <UART_SetConfig+0x2cc>)
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d005      	beq.n	8003edc <UART_SetConfig+0xa0>
 8003ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	4b8d      	ldr	r3, [pc, #564]	; (800410c <UART_SetConfig+0x2d0>)
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d104      	bne.n	8003ee6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003edc:	f7fe fbfe 	bl	80026dc <HAL_RCC_GetPCLK2Freq>
 8003ee0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003ee4:	e003      	b.n	8003eee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003ee6:	f7fe fbe5 	bl	80026b4 <HAL_RCC_GetPCLK1Freq>
 8003eea:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003eee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ef2:	69db      	ldr	r3, [r3, #28]
 8003ef4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ef8:	f040 810c 	bne.w	8004114 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003efc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f00:	2200      	movs	r2, #0
 8003f02:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003f06:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003f0a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003f0e:	4622      	mov	r2, r4
 8003f10:	462b      	mov	r3, r5
 8003f12:	1891      	adds	r1, r2, r2
 8003f14:	65b9      	str	r1, [r7, #88]	; 0x58
 8003f16:	415b      	adcs	r3, r3
 8003f18:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f1a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003f1e:	4621      	mov	r1, r4
 8003f20:	eb12 0801 	adds.w	r8, r2, r1
 8003f24:	4629      	mov	r1, r5
 8003f26:	eb43 0901 	adc.w	r9, r3, r1
 8003f2a:	f04f 0200 	mov.w	r2, #0
 8003f2e:	f04f 0300 	mov.w	r3, #0
 8003f32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f3e:	4690      	mov	r8, r2
 8003f40:	4699      	mov	r9, r3
 8003f42:	4623      	mov	r3, r4
 8003f44:	eb18 0303 	adds.w	r3, r8, r3
 8003f48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003f4c:	462b      	mov	r3, r5
 8003f4e:	eb49 0303 	adc.w	r3, r9, r3
 8003f52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003f56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003f62:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003f66:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003f6a:	460b      	mov	r3, r1
 8003f6c:	18db      	adds	r3, r3, r3
 8003f6e:	653b      	str	r3, [r7, #80]	; 0x50
 8003f70:	4613      	mov	r3, r2
 8003f72:	eb42 0303 	adc.w	r3, r2, r3
 8003f76:	657b      	str	r3, [r7, #84]	; 0x54
 8003f78:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003f7c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003f80:	f7fc f976 	bl	8000270 <__aeabi_uldivmod>
 8003f84:	4602      	mov	r2, r0
 8003f86:	460b      	mov	r3, r1
 8003f88:	4b61      	ldr	r3, [pc, #388]	; (8004110 <UART_SetConfig+0x2d4>)
 8003f8a:	fba3 2302 	umull	r2, r3, r3, r2
 8003f8e:	095b      	lsrs	r3, r3, #5
 8003f90:	011c      	lsls	r4, r3, #4
 8003f92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f96:	2200      	movs	r2, #0
 8003f98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003f9c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003fa0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003fa4:	4642      	mov	r2, r8
 8003fa6:	464b      	mov	r3, r9
 8003fa8:	1891      	adds	r1, r2, r2
 8003faa:	64b9      	str	r1, [r7, #72]	; 0x48
 8003fac:	415b      	adcs	r3, r3
 8003fae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fb0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003fb4:	4641      	mov	r1, r8
 8003fb6:	eb12 0a01 	adds.w	sl, r2, r1
 8003fba:	4649      	mov	r1, r9
 8003fbc:	eb43 0b01 	adc.w	fp, r3, r1
 8003fc0:	f04f 0200 	mov.w	r2, #0
 8003fc4:	f04f 0300 	mov.w	r3, #0
 8003fc8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003fcc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003fd0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003fd4:	4692      	mov	sl, r2
 8003fd6:	469b      	mov	fp, r3
 8003fd8:	4643      	mov	r3, r8
 8003fda:	eb1a 0303 	adds.w	r3, sl, r3
 8003fde:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003fe2:	464b      	mov	r3, r9
 8003fe4:	eb4b 0303 	adc.w	r3, fp, r3
 8003fe8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003ff8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003ffc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004000:	460b      	mov	r3, r1
 8004002:	18db      	adds	r3, r3, r3
 8004004:	643b      	str	r3, [r7, #64]	; 0x40
 8004006:	4613      	mov	r3, r2
 8004008:	eb42 0303 	adc.w	r3, r2, r3
 800400c:	647b      	str	r3, [r7, #68]	; 0x44
 800400e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004012:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004016:	f7fc f92b 	bl	8000270 <__aeabi_uldivmod>
 800401a:	4602      	mov	r2, r0
 800401c:	460b      	mov	r3, r1
 800401e:	4611      	mov	r1, r2
 8004020:	4b3b      	ldr	r3, [pc, #236]	; (8004110 <UART_SetConfig+0x2d4>)
 8004022:	fba3 2301 	umull	r2, r3, r3, r1
 8004026:	095b      	lsrs	r3, r3, #5
 8004028:	2264      	movs	r2, #100	; 0x64
 800402a:	fb02 f303 	mul.w	r3, r2, r3
 800402e:	1acb      	subs	r3, r1, r3
 8004030:	00db      	lsls	r3, r3, #3
 8004032:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004036:	4b36      	ldr	r3, [pc, #216]	; (8004110 <UART_SetConfig+0x2d4>)
 8004038:	fba3 2302 	umull	r2, r3, r3, r2
 800403c:	095b      	lsrs	r3, r3, #5
 800403e:	005b      	lsls	r3, r3, #1
 8004040:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004044:	441c      	add	r4, r3
 8004046:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800404a:	2200      	movs	r2, #0
 800404c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004050:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004054:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004058:	4642      	mov	r2, r8
 800405a:	464b      	mov	r3, r9
 800405c:	1891      	adds	r1, r2, r2
 800405e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004060:	415b      	adcs	r3, r3
 8004062:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004064:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004068:	4641      	mov	r1, r8
 800406a:	1851      	adds	r1, r2, r1
 800406c:	6339      	str	r1, [r7, #48]	; 0x30
 800406e:	4649      	mov	r1, r9
 8004070:	414b      	adcs	r3, r1
 8004072:	637b      	str	r3, [r7, #52]	; 0x34
 8004074:	f04f 0200 	mov.w	r2, #0
 8004078:	f04f 0300 	mov.w	r3, #0
 800407c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004080:	4659      	mov	r1, fp
 8004082:	00cb      	lsls	r3, r1, #3
 8004084:	4651      	mov	r1, sl
 8004086:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800408a:	4651      	mov	r1, sl
 800408c:	00ca      	lsls	r2, r1, #3
 800408e:	4610      	mov	r0, r2
 8004090:	4619      	mov	r1, r3
 8004092:	4603      	mov	r3, r0
 8004094:	4642      	mov	r2, r8
 8004096:	189b      	adds	r3, r3, r2
 8004098:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800409c:	464b      	mov	r3, r9
 800409e:	460a      	mov	r2, r1
 80040a0:	eb42 0303 	adc.w	r3, r2, r3
 80040a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80040a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80040b4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80040b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80040bc:	460b      	mov	r3, r1
 80040be:	18db      	adds	r3, r3, r3
 80040c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80040c2:	4613      	mov	r3, r2
 80040c4:	eb42 0303 	adc.w	r3, r2, r3
 80040c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80040ce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80040d2:	f7fc f8cd 	bl	8000270 <__aeabi_uldivmod>
 80040d6:	4602      	mov	r2, r0
 80040d8:	460b      	mov	r3, r1
 80040da:	4b0d      	ldr	r3, [pc, #52]	; (8004110 <UART_SetConfig+0x2d4>)
 80040dc:	fba3 1302 	umull	r1, r3, r3, r2
 80040e0:	095b      	lsrs	r3, r3, #5
 80040e2:	2164      	movs	r1, #100	; 0x64
 80040e4:	fb01 f303 	mul.w	r3, r1, r3
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	00db      	lsls	r3, r3, #3
 80040ec:	3332      	adds	r3, #50	; 0x32
 80040ee:	4a08      	ldr	r2, [pc, #32]	; (8004110 <UART_SetConfig+0x2d4>)
 80040f0:	fba2 2303 	umull	r2, r3, r2, r3
 80040f4:	095b      	lsrs	r3, r3, #5
 80040f6:	f003 0207 	and.w	r2, r3, #7
 80040fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4422      	add	r2, r4
 8004102:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004104:	e106      	b.n	8004314 <UART_SetConfig+0x4d8>
 8004106:	bf00      	nop
 8004108:	40011000 	.word	0x40011000
 800410c:	40011400 	.word	0x40011400
 8004110:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004114:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004118:	2200      	movs	r2, #0
 800411a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800411e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004122:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004126:	4642      	mov	r2, r8
 8004128:	464b      	mov	r3, r9
 800412a:	1891      	adds	r1, r2, r2
 800412c:	6239      	str	r1, [r7, #32]
 800412e:	415b      	adcs	r3, r3
 8004130:	627b      	str	r3, [r7, #36]	; 0x24
 8004132:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004136:	4641      	mov	r1, r8
 8004138:	1854      	adds	r4, r2, r1
 800413a:	4649      	mov	r1, r9
 800413c:	eb43 0501 	adc.w	r5, r3, r1
 8004140:	f04f 0200 	mov.w	r2, #0
 8004144:	f04f 0300 	mov.w	r3, #0
 8004148:	00eb      	lsls	r3, r5, #3
 800414a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800414e:	00e2      	lsls	r2, r4, #3
 8004150:	4614      	mov	r4, r2
 8004152:	461d      	mov	r5, r3
 8004154:	4643      	mov	r3, r8
 8004156:	18e3      	adds	r3, r4, r3
 8004158:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800415c:	464b      	mov	r3, r9
 800415e:	eb45 0303 	adc.w	r3, r5, r3
 8004162:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004166:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	2200      	movs	r2, #0
 800416e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004172:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004176:	f04f 0200 	mov.w	r2, #0
 800417a:	f04f 0300 	mov.w	r3, #0
 800417e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004182:	4629      	mov	r1, r5
 8004184:	008b      	lsls	r3, r1, #2
 8004186:	4621      	mov	r1, r4
 8004188:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800418c:	4621      	mov	r1, r4
 800418e:	008a      	lsls	r2, r1, #2
 8004190:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004194:	f7fc f86c 	bl	8000270 <__aeabi_uldivmod>
 8004198:	4602      	mov	r2, r0
 800419a:	460b      	mov	r3, r1
 800419c:	4b60      	ldr	r3, [pc, #384]	; (8004320 <UART_SetConfig+0x4e4>)
 800419e:	fba3 2302 	umull	r2, r3, r3, r2
 80041a2:	095b      	lsrs	r3, r3, #5
 80041a4:	011c      	lsls	r4, r3, #4
 80041a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041aa:	2200      	movs	r2, #0
 80041ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80041b0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80041b4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80041b8:	4642      	mov	r2, r8
 80041ba:	464b      	mov	r3, r9
 80041bc:	1891      	adds	r1, r2, r2
 80041be:	61b9      	str	r1, [r7, #24]
 80041c0:	415b      	adcs	r3, r3
 80041c2:	61fb      	str	r3, [r7, #28]
 80041c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041c8:	4641      	mov	r1, r8
 80041ca:	1851      	adds	r1, r2, r1
 80041cc:	6139      	str	r1, [r7, #16]
 80041ce:	4649      	mov	r1, r9
 80041d0:	414b      	adcs	r3, r1
 80041d2:	617b      	str	r3, [r7, #20]
 80041d4:	f04f 0200 	mov.w	r2, #0
 80041d8:	f04f 0300 	mov.w	r3, #0
 80041dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80041e0:	4659      	mov	r1, fp
 80041e2:	00cb      	lsls	r3, r1, #3
 80041e4:	4651      	mov	r1, sl
 80041e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041ea:	4651      	mov	r1, sl
 80041ec:	00ca      	lsls	r2, r1, #3
 80041ee:	4610      	mov	r0, r2
 80041f0:	4619      	mov	r1, r3
 80041f2:	4603      	mov	r3, r0
 80041f4:	4642      	mov	r2, r8
 80041f6:	189b      	adds	r3, r3, r2
 80041f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80041fc:	464b      	mov	r3, r9
 80041fe:	460a      	mov	r2, r1
 8004200:	eb42 0303 	adc.w	r3, r2, r3
 8004204:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	2200      	movs	r2, #0
 8004210:	67bb      	str	r3, [r7, #120]	; 0x78
 8004212:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004214:	f04f 0200 	mov.w	r2, #0
 8004218:	f04f 0300 	mov.w	r3, #0
 800421c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004220:	4649      	mov	r1, r9
 8004222:	008b      	lsls	r3, r1, #2
 8004224:	4641      	mov	r1, r8
 8004226:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800422a:	4641      	mov	r1, r8
 800422c:	008a      	lsls	r2, r1, #2
 800422e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004232:	f7fc f81d 	bl	8000270 <__aeabi_uldivmod>
 8004236:	4602      	mov	r2, r0
 8004238:	460b      	mov	r3, r1
 800423a:	4611      	mov	r1, r2
 800423c:	4b38      	ldr	r3, [pc, #224]	; (8004320 <UART_SetConfig+0x4e4>)
 800423e:	fba3 2301 	umull	r2, r3, r3, r1
 8004242:	095b      	lsrs	r3, r3, #5
 8004244:	2264      	movs	r2, #100	; 0x64
 8004246:	fb02 f303 	mul.w	r3, r2, r3
 800424a:	1acb      	subs	r3, r1, r3
 800424c:	011b      	lsls	r3, r3, #4
 800424e:	3332      	adds	r3, #50	; 0x32
 8004250:	4a33      	ldr	r2, [pc, #204]	; (8004320 <UART_SetConfig+0x4e4>)
 8004252:	fba2 2303 	umull	r2, r3, r2, r3
 8004256:	095b      	lsrs	r3, r3, #5
 8004258:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800425c:	441c      	add	r4, r3
 800425e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004262:	2200      	movs	r2, #0
 8004264:	673b      	str	r3, [r7, #112]	; 0x70
 8004266:	677a      	str	r2, [r7, #116]	; 0x74
 8004268:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800426c:	4642      	mov	r2, r8
 800426e:	464b      	mov	r3, r9
 8004270:	1891      	adds	r1, r2, r2
 8004272:	60b9      	str	r1, [r7, #8]
 8004274:	415b      	adcs	r3, r3
 8004276:	60fb      	str	r3, [r7, #12]
 8004278:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800427c:	4641      	mov	r1, r8
 800427e:	1851      	adds	r1, r2, r1
 8004280:	6039      	str	r1, [r7, #0]
 8004282:	4649      	mov	r1, r9
 8004284:	414b      	adcs	r3, r1
 8004286:	607b      	str	r3, [r7, #4]
 8004288:	f04f 0200 	mov.w	r2, #0
 800428c:	f04f 0300 	mov.w	r3, #0
 8004290:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004294:	4659      	mov	r1, fp
 8004296:	00cb      	lsls	r3, r1, #3
 8004298:	4651      	mov	r1, sl
 800429a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800429e:	4651      	mov	r1, sl
 80042a0:	00ca      	lsls	r2, r1, #3
 80042a2:	4610      	mov	r0, r2
 80042a4:	4619      	mov	r1, r3
 80042a6:	4603      	mov	r3, r0
 80042a8:	4642      	mov	r2, r8
 80042aa:	189b      	adds	r3, r3, r2
 80042ac:	66bb      	str	r3, [r7, #104]	; 0x68
 80042ae:	464b      	mov	r3, r9
 80042b0:	460a      	mov	r2, r1
 80042b2:	eb42 0303 	adc.w	r3, r2, r3
 80042b6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80042b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	663b      	str	r3, [r7, #96]	; 0x60
 80042c2:	667a      	str	r2, [r7, #100]	; 0x64
 80042c4:	f04f 0200 	mov.w	r2, #0
 80042c8:	f04f 0300 	mov.w	r3, #0
 80042cc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80042d0:	4649      	mov	r1, r9
 80042d2:	008b      	lsls	r3, r1, #2
 80042d4:	4641      	mov	r1, r8
 80042d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042da:	4641      	mov	r1, r8
 80042dc:	008a      	lsls	r2, r1, #2
 80042de:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80042e2:	f7fb ffc5 	bl	8000270 <__aeabi_uldivmod>
 80042e6:	4602      	mov	r2, r0
 80042e8:	460b      	mov	r3, r1
 80042ea:	4b0d      	ldr	r3, [pc, #52]	; (8004320 <UART_SetConfig+0x4e4>)
 80042ec:	fba3 1302 	umull	r1, r3, r3, r2
 80042f0:	095b      	lsrs	r3, r3, #5
 80042f2:	2164      	movs	r1, #100	; 0x64
 80042f4:	fb01 f303 	mul.w	r3, r1, r3
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	011b      	lsls	r3, r3, #4
 80042fc:	3332      	adds	r3, #50	; 0x32
 80042fe:	4a08      	ldr	r2, [pc, #32]	; (8004320 <UART_SetConfig+0x4e4>)
 8004300:	fba2 2303 	umull	r2, r3, r2, r3
 8004304:	095b      	lsrs	r3, r3, #5
 8004306:	f003 020f 	and.w	r2, r3, #15
 800430a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4422      	add	r2, r4
 8004312:	609a      	str	r2, [r3, #8]
}
 8004314:	bf00      	nop
 8004316:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800431a:	46bd      	mov	sp, r7
 800431c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004320:	51eb851f 	.word	0x51eb851f

08004324 <std>:
 8004324:	2300      	movs	r3, #0
 8004326:	b510      	push	{r4, lr}
 8004328:	4604      	mov	r4, r0
 800432a:	e9c0 3300 	strd	r3, r3, [r0]
 800432e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004332:	6083      	str	r3, [r0, #8]
 8004334:	8181      	strh	r1, [r0, #12]
 8004336:	6643      	str	r3, [r0, #100]	; 0x64
 8004338:	81c2      	strh	r2, [r0, #14]
 800433a:	6183      	str	r3, [r0, #24]
 800433c:	4619      	mov	r1, r3
 800433e:	2208      	movs	r2, #8
 8004340:	305c      	adds	r0, #92	; 0x5c
 8004342:	f000 f906 	bl	8004552 <memset>
 8004346:	4b0d      	ldr	r3, [pc, #52]	; (800437c <std+0x58>)
 8004348:	6263      	str	r3, [r4, #36]	; 0x24
 800434a:	4b0d      	ldr	r3, [pc, #52]	; (8004380 <std+0x5c>)
 800434c:	62a3      	str	r3, [r4, #40]	; 0x28
 800434e:	4b0d      	ldr	r3, [pc, #52]	; (8004384 <std+0x60>)
 8004350:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004352:	4b0d      	ldr	r3, [pc, #52]	; (8004388 <std+0x64>)
 8004354:	6323      	str	r3, [r4, #48]	; 0x30
 8004356:	4b0d      	ldr	r3, [pc, #52]	; (800438c <std+0x68>)
 8004358:	6224      	str	r4, [r4, #32]
 800435a:	429c      	cmp	r4, r3
 800435c:	d006      	beq.n	800436c <std+0x48>
 800435e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004362:	4294      	cmp	r4, r2
 8004364:	d002      	beq.n	800436c <std+0x48>
 8004366:	33d0      	adds	r3, #208	; 0xd0
 8004368:	429c      	cmp	r4, r3
 800436a:	d105      	bne.n	8004378 <std+0x54>
 800436c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004370:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004374:	f000 b966 	b.w	8004644 <__retarget_lock_init_recursive>
 8004378:	bd10      	pop	{r4, pc}
 800437a:	bf00      	nop
 800437c:	080044cd 	.word	0x080044cd
 8004380:	080044ef 	.word	0x080044ef
 8004384:	08004527 	.word	0x08004527
 8004388:	0800454b 	.word	0x0800454b
 800438c:	20000264 	.word	0x20000264

08004390 <stdio_exit_handler>:
 8004390:	4a02      	ldr	r2, [pc, #8]	; (800439c <stdio_exit_handler+0xc>)
 8004392:	4903      	ldr	r1, [pc, #12]	; (80043a0 <stdio_exit_handler+0x10>)
 8004394:	4803      	ldr	r0, [pc, #12]	; (80043a4 <stdio_exit_handler+0x14>)
 8004396:	f000 b869 	b.w	800446c <_fwalk_sglue>
 800439a:	bf00      	nop
 800439c:	2000001c 	.word	0x2000001c
 80043a0:	08004ef1 	.word	0x08004ef1
 80043a4:	20000028 	.word	0x20000028

080043a8 <cleanup_stdio>:
 80043a8:	6841      	ldr	r1, [r0, #4]
 80043aa:	4b0c      	ldr	r3, [pc, #48]	; (80043dc <cleanup_stdio+0x34>)
 80043ac:	4299      	cmp	r1, r3
 80043ae:	b510      	push	{r4, lr}
 80043b0:	4604      	mov	r4, r0
 80043b2:	d001      	beq.n	80043b8 <cleanup_stdio+0x10>
 80043b4:	f000 fd9c 	bl	8004ef0 <_fflush_r>
 80043b8:	68a1      	ldr	r1, [r4, #8]
 80043ba:	4b09      	ldr	r3, [pc, #36]	; (80043e0 <cleanup_stdio+0x38>)
 80043bc:	4299      	cmp	r1, r3
 80043be:	d002      	beq.n	80043c6 <cleanup_stdio+0x1e>
 80043c0:	4620      	mov	r0, r4
 80043c2:	f000 fd95 	bl	8004ef0 <_fflush_r>
 80043c6:	68e1      	ldr	r1, [r4, #12]
 80043c8:	4b06      	ldr	r3, [pc, #24]	; (80043e4 <cleanup_stdio+0x3c>)
 80043ca:	4299      	cmp	r1, r3
 80043cc:	d004      	beq.n	80043d8 <cleanup_stdio+0x30>
 80043ce:	4620      	mov	r0, r4
 80043d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043d4:	f000 bd8c 	b.w	8004ef0 <_fflush_r>
 80043d8:	bd10      	pop	{r4, pc}
 80043da:	bf00      	nop
 80043dc:	20000264 	.word	0x20000264
 80043e0:	200002cc 	.word	0x200002cc
 80043e4:	20000334 	.word	0x20000334

080043e8 <global_stdio_init.part.0>:
 80043e8:	b510      	push	{r4, lr}
 80043ea:	4b0b      	ldr	r3, [pc, #44]	; (8004418 <global_stdio_init.part.0+0x30>)
 80043ec:	4c0b      	ldr	r4, [pc, #44]	; (800441c <global_stdio_init.part.0+0x34>)
 80043ee:	4a0c      	ldr	r2, [pc, #48]	; (8004420 <global_stdio_init.part.0+0x38>)
 80043f0:	601a      	str	r2, [r3, #0]
 80043f2:	4620      	mov	r0, r4
 80043f4:	2200      	movs	r2, #0
 80043f6:	2104      	movs	r1, #4
 80043f8:	f7ff ff94 	bl	8004324 <std>
 80043fc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004400:	2201      	movs	r2, #1
 8004402:	2109      	movs	r1, #9
 8004404:	f7ff ff8e 	bl	8004324 <std>
 8004408:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800440c:	2202      	movs	r2, #2
 800440e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004412:	2112      	movs	r1, #18
 8004414:	f7ff bf86 	b.w	8004324 <std>
 8004418:	2000039c 	.word	0x2000039c
 800441c:	20000264 	.word	0x20000264
 8004420:	08004391 	.word	0x08004391

08004424 <__sfp_lock_acquire>:
 8004424:	4801      	ldr	r0, [pc, #4]	; (800442c <__sfp_lock_acquire+0x8>)
 8004426:	f000 b90e 	b.w	8004646 <__retarget_lock_acquire_recursive>
 800442a:	bf00      	nop
 800442c:	200003a5 	.word	0x200003a5

08004430 <__sfp_lock_release>:
 8004430:	4801      	ldr	r0, [pc, #4]	; (8004438 <__sfp_lock_release+0x8>)
 8004432:	f000 b909 	b.w	8004648 <__retarget_lock_release_recursive>
 8004436:	bf00      	nop
 8004438:	200003a5 	.word	0x200003a5

0800443c <__sinit>:
 800443c:	b510      	push	{r4, lr}
 800443e:	4604      	mov	r4, r0
 8004440:	f7ff fff0 	bl	8004424 <__sfp_lock_acquire>
 8004444:	6a23      	ldr	r3, [r4, #32]
 8004446:	b11b      	cbz	r3, 8004450 <__sinit+0x14>
 8004448:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800444c:	f7ff bff0 	b.w	8004430 <__sfp_lock_release>
 8004450:	4b04      	ldr	r3, [pc, #16]	; (8004464 <__sinit+0x28>)
 8004452:	6223      	str	r3, [r4, #32]
 8004454:	4b04      	ldr	r3, [pc, #16]	; (8004468 <__sinit+0x2c>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d1f5      	bne.n	8004448 <__sinit+0xc>
 800445c:	f7ff ffc4 	bl	80043e8 <global_stdio_init.part.0>
 8004460:	e7f2      	b.n	8004448 <__sinit+0xc>
 8004462:	bf00      	nop
 8004464:	080043a9 	.word	0x080043a9
 8004468:	2000039c 	.word	0x2000039c

0800446c <_fwalk_sglue>:
 800446c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004470:	4607      	mov	r7, r0
 8004472:	4688      	mov	r8, r1
 8004474:	4614      	mov	r4, r2
 8004476:	2600      	movs	r6, #0
 8004478:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800447c:	f1b9 0901 	subs.w	r9, r9, #1
 8004480:	d505      	bpl.n	800448e <_fwalk_sglue+0x22>
 8004482:	6824      	ldr	r4, [r4, #0]
 8004484:	2c00      	cmp	r4, #0
 8004486:	d1f7      	bne.n	8004478 <_fwalk_sglue+0xc>
 8004488:	4630      	mov	r0, r6
 800448a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800448e:	89ab      	ldrh	r3, [r5, #12]
 8004490:	2b01      	cmp	r3, #1
 8004492:	d907      	bls.n	80044a4 <_fwalk_sglue+0x38>
 8004494:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004498:	3301      	adds	r3, #1
 800449a:	d003      	beq.n	80044a4 <_fwalk_sglue+0x38>
 800449c:	4629      	mov	r1, r5
 800449e:	4638      	mov	r0, r7
 80044a0:	47c0      	blx	r8
 80044a2:	4306      	orrs	r6, r0
 80044a4:	3568      	adds	r5, #104	; 0x68
 80044a6:	e7e9      	b.n	800447c <_fwalk_sglue+0x10>

080044a8 <iprintf>:
 80044a8:	b40f      	push	{r0, r1, r2, r3}
 80044aa:	b507      	push	{r0, r1, r2, lr}
 80044ac:	4906      	ldr	r1, [pc, #24]	; (80044c8 <iprintf+0x20>)
 80044ae:	ab04      	add	r3, sp, #16
 80044b0:	6808      	ldr	r0, [r1, #0]
 80044b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80044b6:	6881      	ldr	r1, [r0, #8]
 80044b8:	9301      	str	r3, [sp, #4]
 80044ba:	f000 f9e9 	bl	8004890 <_vfiprintf_r>
 80044be:	b003      	add	sp, #12
 80044c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80044c4:	b004      	add	sp, #16
 80044c6:	4770      	bx	lr
 80044c8:	20000074 	.word	0x20000074

080044cc <__sread>:
 80044cc:	b510      	push	{r4, lr}
 80044ce:	460c      	mov	r4, r1
 80044d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044d4:	f000 f868 	bl	80045a8 <_read_r>
 80044d8:	2800      	cmp	r0, #0
 80044da:	bfab      	itete	ge
 80044dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80044de:	89a3      	ldrhlt	r3, [r4, #12]
 80044e0:	181b      	addge	r3, r3, r0
 80044e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80044e6:	bfac      	ite	ge
 80044e8:	6563      	strge	r3, [r4, #84]	; 0x54
 80044ea:	81a3      	strhlt	r3, [r4, #12]
 80044ec:	bd10      	pop	{r4, pc}

080044ee <__swrite>:
 80044ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044f2:	461f      	mov	r7, r3
 80044f4:	898b      	ldrh	r3, [r1, #12]
 80044f6:	05db      	lsls	r3, r3, #23
 80044f8:	4605      	mov	r5, r0
 80044fa:	460c      	mov	r4, r1
 80044fc:	4616      	mov	r6, r2
 80044fe:	d505      	bpl.n	800450c <__swrite+0x1e>
 8004500:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004504:	2302      	movs	r3, #2
 8004506:	2200      	movs	r2, #0
 8004508:	f000 f83c 	bl	8004584 <_lseek_r>
 800450c:	89a3      	ldrh	r3, [r4, #12]
 800450e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004512:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004516:	81a3      	strh	r3, [r4, #12]
 8004518:	4632      	mov	r2, r6
 800451a:	463b      	mov	r3, r7
 800451c:	4628      	mov	r0, r5
 800451e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004522:	f000 b853 	b.w	80045cc <_write_r>

08004526 <__sseek>:
 8004526:	b510      	push	{r4, lr}
 8004528:	460c      	mov	r4, r1
 800452a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800452e:	f000 f829 	bl	8004584 <_lseek_r>
 8004532:	1c43      	adds	r3, r0, #1
 8004534:	89a3      	ldrh	r3, [r4, #12]
 8004536:	bf15      	itete	ne
 8004538:	6560      	strne	r0, [r4, #84]	; 0x54
 800453a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800453e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004542:	81a3      	strheq	r3, [r4, #12]
 8004544:	bf18      	it	ne
 8004546:	81a3      	strhne	r3, [r4, #12]
 8004548:	bd10      	pop	{r4, pc}

0800454a <__sclose>:
 800454a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800454e:	f000 b809 	b.w	8004564 <_close_r>

08004552 <memset>:
 8004552:	4402      	add	r2, r0
 8004554:	4603      	mov	r3, r0
 8004556:	4293      	cmp	r3, r2
 8004558:	d100      	bne.n	800455c <memset+0xa>
 800455a:	4770      	bx	lr
 800455c:	f803 1b01 	strb.w	r1, [r3], #1
 8004560:	e7f9      	b.n	8004556 <memset+0x4>
	...

08004564 <_close_r>:
 8004564:	b538      	push	{r3, r4, r5, lr}
 8004566:	4d06      	ldr	r5, [pc, #24]	; (8004580 <_close_r+0x1c>)
 8004568:	2300      	movs	r3, #0
 800456a:	4604      	mov	r4, r0
 800456c:	4608      	mov	r0, r1
 800456e:	602b      	str	r3, [r5, #0]
 8004570:	f7fc fa53 	bl	8000a1a <_close>
 8004574:	1c43      	adds	r3, r0, #1
 8004576:	d102      	bne.n	800457e <_close_r+0x1a>
 8004578:	682b      	ldr	r3, [r5, #0]
 800457a:	b103      	cbz	r3, 800457e <_close_r+0x1a>
 800457c:	6023      	str	r3, [r4, #0]
 800457e:	bd38      	pop	{r3, r4, r5, pc}
 8004580:	200003a0 	.word	0x200003a0

08004584 <_lseek_r>:
 8004584:	b538      	push	{r3, r4, r5, lr}
 8004586:	4d07      	ldr	r5, [pc, #28]	; (80045a4 <_lseek_r+0x20>)
 8004588:	4604      	mov	r4, r0
 800458a:	4608      	mov	r0, r1
 800458c:	4611      	mov	r1, r2
 800458e:	2200      	movs	r2, #0
 8004590:	602a      	str	r2, [r5, #0]
 8004592:	461a      	mov	r2, r3
 8004594:	f7fc fa68 	bl	8000a68 <_lseek>
 8004598:	1c43      	adds	r3, r0, #1
 800459a:	d102      	bne.n	80045a2 <_lseek_r+0x1e>
 800459c:	682b      	ldr	r3, [r5, #0]
 800459e:	b103      	cbz	r3, 80045a2 <_lseek_r+0x1e>
 80045a0:	6023      	str	r3, [r4, #0]
 80045a2:	bd38      	pop	{r3, r4, r5, pc}
 80045a4:	200003a0 	.word	0x200003a0

080045a8 <_read_r>:
 80045a8:	b538      	push	{r3, r4, r5, lr}
 80045aa:	4d07      	ldr	r5, [pc, #28]	; (80045c8 <_read_r+0x20>)
 80045ac:	4604      	mov	r4, r0
 80045ae:	4608      	mov	r0, r1
 80045b0:	4611      	mov	r1, r2
 80045b2:	2200      	movs	r2, #0
 80045b4:	602a      	str	r2, [r5, #0]
 80045b6:	461a      	mov	r2, r3
 80045b8:	f7fc f9f6 	bl	80009a8 <_read>
 80045bc:	1c43      	adds	r3, r0, #1
 80045be:	d102      	bne.n	80045c6 <_read_r+0x1e>
 80045c0:	682b      	ldr	r3, [r5, #0]
 80045c2:	b103      	cbz	r3, 80045c6 <_read_r+0x1e>
 80045c4:	6023      	str	r3, [r4, #0]
 80045c6:	bd38      	pop	{r3, r4, r5, pc}
 80045c8:	200003a0 	.word	0x200003a0

080045cc <_write_r>:
 80045cc:	b538      	push	{r3, r4, r5, lr}
 80045ce:	4d07      	ldr	r5, [pc, #28]	; (80045ec <_write_r+0x20>)
 80045d0:	4604      	mov	r4, r0
 80045d2:	4608      	mov	r0, r1
 80045d4:	4611      	mov	r1, r2
 80045d6:	2200      	movs	r2, #0
 80045d8:	602a      	str	r2, [r5, #0]
 80045da:	461a      	mov	r2, r3
 80045dc:	f7fc fa01 	bl	80009e2 <_write>
 80045e0:	1c43      	adds	r3, r0, #1
 80045e2:	d102      	bne.n	80045ea <_write_r+0x1e>
 80045e4:	682b      	ldr	r3, [r5, #0]
 80045e6:	b103      	cbz	r3, 80045ea <_write_r+0x1e>
 80045e8:	6023      	str	r3, [r4, #0]
 80045ea:	bd38      	pop	{r3, r4, r5, pc}
 80045ec:	200003a0 	.word	0x200003a0

080045f0 <__errno>:
 80045f0:	4b01      	ldr	r3, [pc, #4]	; (80045f8 <__errno+0x8>)
 80045f2:	6818      	ldr	r0, [r3, #0]
 80045f4:	4770      	bx	lr
 80045f6:	bf00      	nop
 80045f8:	20000074 	.word	0x20000074

080045fc <__libc_init_array>:
 80045fc:	b570      	push	{r4, r5, r6, lr}
 80045fe:	4d0d      	ldr	r5, [pc, #52]	; (8004634 <__libc_init_array+0x38>)
 8004600:	4c0d      	ldr	r4, [pc, #52]	; (8004638 <__libc_init_array+0x3c>)
 8004602:	1b64      	subs	r4, r4, r5
 8004604:	10a4      	asrs	r4, r4, #2
 8004606:	2600      	movs	r6, #0
 8004608:	42a6      	cmp	r6, r4
 800460a:	d109      	bne.n	8004620 <__libc_init_array+0x24>
 800460c:	4d0b      	ldr	r5, [pc, #44]	; (800463c <__libc_init_array+0x40>)
 800460e:	4c0c      	ldr	r4, [pc, #48]	; (8004640 <__libc_init_array+0x44>)
 8004610:	f000 fdc0 	bl	8005194 <_init>
 8004614:	1b64      	subs	r4, r4, r5
 8004616:	10a4      	asrs	r4, r4, #2
 8004618:	2600      	movs	r6, #0
 800461a:	42a6      	cmp	r6, r4
 800461c:	d105      	bne.n	800462a <__libc_init_array+0x2e>
 800461e:	bd70      	pop	{r4, r5, r6, pc}
 8004620:	f855 3b04 	ldr.w	r3, [r5], #4
 8004624:	4798      	blx	r3
 8004626:	3601      	adds	r6, #1
 8004628:	e7ee      	b.n	8004608 <__libc_init_array+0xc>
 800462a:	f855 3b04 	ldr.w	r3, [r5], #4
 800462e:	4798      	blx	r3
 8004630:	3601      	adds	r6, #1
 8004632:	e7f2      	b.n	800461a <__libc_init_array+0x1e>
 8004634:	0800521c 	.word	0x0800521c
 8004638:	0800521c 	.word	0x0800521c
 800463c:	0800521c 	.word	0x0800521c
 8004640:	08005220 	.word	0x08005220

08004644 <__retarget_lock_init_recursive>:
 8004644:	4770      	bx	lr

08004646 <__retarget_lock_acquire_recursive>:
 8004646:	4770      	bx	lr

08004648 <__retarget_lock_release_recursive>:
 8004648:	4770      	bx	lr
	...

0800464c <_free_r>:
 800464c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800464e:	2900      	cmp	r1, #0
 8004650:	d044      	beq.n	80046dc <_free_r+0x90>
 8004652:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004656:	9001      	str	r0, [sp, #4]
 8004658:	2b00      	cmp	r3, #0
 800465a:	f1a1 0404 	sub.w	r4, r1, #4
 800465e:	bfb8      	it	lt
 8004660:	18e4      	addlt	r4, r4, r3
 8004662:	f000 f8df 	bl	8004824 <__malloc_lock>
 8004666:	4a1e      	ldr	r2, [pc, #120]	; (80046e0 <_free_r+0x94>)
 8004668:	9801      	ldr	r0, [sp, #4]
 800466a:	6813      	ldr	r3, [r2, #0]
 800466c:	b933      	cbnz	r3, 800467c <_free_r+0x30>
 800466e:	6063      	str	r3, [r4, #4]
 8004670:	6014      	str	r4, [r2, #0]
 8004672:	b003      	add	sp, #12
 8004674:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004678:	f000 b8da 	b.w	8004830 <__malloc_unlock>
 800467c:	42a3      	cmp	r3, r4
 800467e:	d908      	bls.n	8004692 <_free_r+0x46>
 8004680:	6825      	ldr	r5, [r4, #0]
 8004682:	1961      	adds	r1, r4, r5
 8004684:	428b      	cmp	r3, r1
 8004686:	bf01      	itttt	eq
 8004688:	6819      	ldreq	r1, [r3, #0]
 800468a:	685b      	ldreq	r3, [r3, #4]
 800468c:	1949      	addeq	r1, r1, r5
 800468e:	6021      	streq	r1, [r4, #0]
 8004690:	e7ed      	b.n	800466e <_free_r+0x22>
 8004692:	461a      	mov	r2, r3
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	b10b      	cbz	r3, 800469c <_free_r+0x50>
 8004698:	42a3      	cmp	r3, r4
 800469a:	d9fa      	bls.n	8004692 <_free_r+0x46>
 800469c:	6811      	ldr	r1, [r2, #0]
 800469e:	1855      	adds	r5, r2, r1
 80046a0:	42a5      	cmp	r5, r4
 80046a2:	d10b      	bne.n	80046bc <_free_r+0x70>
 80046a4:	6824      	ldr	r4, [r4, #0]
 80046a6:	4421      	add	r1, r4
 80046a8:	1854      	adds	r4, r2, r1
 80046aa:	42a3      	cmp	r3, r4
 80046ac:	6011      	str	r1, [r2, #0]
 80046ae:	d1e0      	bne.n	8004672 <_free_r+0x26>
 80046b0:	681c      	ldr	r4, [r3, #0]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	6053      	str	r3, [r2, #4]
 80046b6:	440c      	add	r4, r1
 80046b8:	6014      	str	r4, [r2, #0]
 80046ba:	e7da      	b.n	8004672 <_free_r+0x26>
 80046bc:	d902      	bls.n	80046c4 <_free_r+0x78>
 80046be:	230c      	movs	r3, #12
 80046c0:	6003      	str	r3, [r0, #0]
 80046c2:	e7d6      	b.n	8004672 <_free_r+0x26>
 80046c4:	6825      	ldr	r5, [r4, #0]
 80046c6:	1961      	adds	r1, r4, r5
 80046c8:	428b      	cmp	r3, r1
 80046ca:	bf04      	itt	eq
 80046cc:	6819      	ldreq	r1, [r3, #0]
 80046ce:	685b      	ldreq	r3, [r3, #4]
 80046d0:	6063      	str	r3, [r4, #4]
 80046d2:	bf04      	itt	eq
 80046d4:	1949      	addeq	r1, r1, r5
 80046d6:	6021      	streq	r1, [r4, #0]
 80046d8:	6054      	str	r4, [r2, #4]
 80046da:	e7ca      	b.n	8004672 <_free_r+0x26>
 80046dc:	b003      	add	sp, #12
 80046de:	bd30      	pop	{r4, r5, pc}
 80046e0:	200003a8 	.word	0x200003a8

080046e4 <sbrk_aligned>:
 80046e4:	b570      	push	{r4, r5, r6, lr}
 80046e6:	4e0e      	ldr	r6, [pc, #56]	; (8004720 <sbrk_aligned+0x3c>)
 80046e8:	460c      	mov	r4, r1
 80046ea:	6831      	ldr	r1, [r6, #0]
 80046ec:	4605      	mov	r5, r0
 80046ee:	b911      	cbnz	r1, 80046f6 <sbrk_aligned+0x12>
 80046f0:	f000 fcbc 	bl	800506c <_sbrk_r>
 80046f4:	6030      	str	r0, [r6, #0]
 80046f6:	4621      	mov	r1, r4
 80046f8:	4628      	mov	r0, r5
 80046fa:	f000 fcb7 	bl	800506c <_sbrk_r>
 80046fe:	1c43      	adds	r3, r0, #1
 8004700:	d00a      	beq.n	8004718 <sbrk_aligned+0x34>
 8004702:	1cc4      	adds	r4, r0, #3
 8004704:	f024 0403 	bic.w	r4, r4, #3
 8004708:	42a0      	cmp	r0, r4
 800470a:	d007      	beq.n	800471c <sbrk_aligned+0x38>
 800470c:	1a21      	subs	r1, r4, r0
 800470e:	4628      	mov	r0, r5
 8004710:	f000 fcac 	bl	800506c <_sbrk_r>
 8004714:	3001      	adds	r0, #1
 8004716:	d101      	bne.n	800471c <sbrk_aligned+0x38>
 8004718:	f04f 34ff 	mov.w	r4, #4294967295
 800471c:	4620      	mov	r0, r4
 800471e:	bd70      	pop	{r4, r5, r6, pc}
 8004720:	200003ac 	.word	0x200003ac

08004724 <_malloc_r>:
 8004724:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004728:	1ccd      	adds	r5, r1, #3
 800472a:	f025 0503 	bic.w	r5, r5, #3
 800472e:	3508      	adds	r5, #8
 8004730:	2d0c      	cmp	r5, #12
 8004732:	bf38      	it	cc
 8004734:	250c      	movcc	r5, #12
 8004736:	2d00      	cmp	r5, #0
 8004738:	4607      	mov	r7, r0
 800473a:	db01      	blt.n	8004740 <_malloc_r+0x1c>
 800473c:	42a9      	cmp	r1, r5
 800473e:	d905      	bls.n	800474c <_malloc_r+0x28>
 8004740:	230c      	movs	r3, #12
 8004742:	603b      	str	r3, [r7, #0]
 8004744:	2600      	movs	r6, #0
 8004746:	4630      	mov	r0, r6
 8004748:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800474c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004820 <_malloc_r+0xfc>
 8004750:	f000 f868 	bl	8004824 <__malloc_lock>
 8004754:	f8d8 3000 	ldr.w	r3, [r8]
 8004758:	461c      	mov	r4, r3
 800475a:	bb5c      	cbnz	r4, 80047b4 <_malloc_r+0x90>
 800475c:	4629      	mov	r1, r5
 800475e:	4638      	mov	r0, r7
 8004760:	f7ff ffc0 	bl	80046e4 <sbrk_aligned>
 8004764:	1c43      	adds	r3, r0, #1
 8004766:	4604      	mov	r4, r0
 8004768:	d155      	bne.n	8004816 <_malloc_r+0xf2>
 800476a:	f8d8 4000 	ldr.w	r4, [r8]
 800476e:	4626      	mov	r6, r4
 8004770:	2e00      	cmp	r6, #0
 8004772:	d145      	bne.n	8004800 <_malloc_r+0xdc>
 8004774:	2c00      	cmp	r4, #0
 8004776:	d048      	beq.n	800480a <_malloc_r+0xe6>
 8004778:	6823      	ldr	r3, [r4, #0]
 800477a:	4631      	mov	r1, r6
 800477c:	4638      	mov	r0, r7
 800477e:	eb04 0903 	add.w	r9, r4, r3
 8004782:	f000 fc73 	bl	800506c <_sbrk_r>
 8004786:	4581      	cmp	r9, r0
 8004788:	d13f      	bne.n	800480a <_malloc_r+0xe6>
 800478a:	6821      	ldr	r1, [r4, #0]
 800478c:	1a6d      	subs	r5, r5, r1
 800478e:	4629      	mov	r1, r5
 8004790:	4638      	mov	r0, r7
 8004792:	f7ff ffa7 	bl	80046e4 <sbrk_aligned>
 8004796:	3001      	adds	r0, #1
 8004798:	d037      	beq.n	800480a <_malloc_r+0xe6>
 800479a:	6823      	ldr	r3, [r4, #0]
 800479c:	442b      	add	r3, r5
 800479e:	6023      	str	r3, [r4, #0]
 80047a0:	f8d8 3000 	ldr.w	r3, [r8]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d038      	beq.n	800481a <_malloc_r+0xf6>
 80047a8:	685a      	ldr	r2, [r3, #4]
 80047aa:	42a2      	cmp	r2, r4
 80047ac:	d12b      	bne.n	8004806 <_malloc_r+0xe2>
 80047ae:	2200      	movs	r2, #0
 80047b0:	605a      	str	r2, [r3, #4]
 80047b2:	e00f      	b.n	80047d4 <_malloc_r+0xb0>
 80047b4:	6822      	ldr	r2, [r4, #0]
 80047b6:	1b52      	subs	r2, r2, r5
 80047b8:	d41f      	bmi.n	80047fa <_malloc_r+0xd6>
 80047ba:	2a0b      	cmp	r2, #11
 80047bc:	d917      	bls.n	80047ee <_malloc_r+0xca>
 80047be:	1961      	adds	r1, r4, r5
 80047c0:	42a3      	cmp	r3, r4
 80047c2:	6025      	str	r5, [r4, #0]
 80047c4:	bf18      	it	ne
 80047c6:	6059      	strne	r1, [r3, #4]
 80047c8:	6863      	ldr	r3, [r4, #4]
 80047ca:	bf08      	it	eq
 80047cc:	f8c8 1000 	streq.w	r1, [r8]
 80047d0:	5162      	str	r2, [r4, r5]
 80047d2:	604b      	str	r3, [r1, #4]
 80047d4:	4638      	mov	r0, r7
 80047d6:	f104 060b 	add.w	r6, r4, #11
 80047da:	f000 f829 	bl	8004830 <__malloc_unlock>
 80047de:	f026 0607 	bic.w	r6, r6, #7
 80047e2:	1d23      	adds	r3, r4, #4
 80047e4:	1af2      	subs	r2, r6, r3
 80047e6:	d0ae      	beq.n	8004746 <_malloc_r+0x22>
 80047e8:	1b9b      	subs	r3, r3, r6
 80047ea:	50a3      	str	r3, [r4, r2]
 80047ec:	e7ab      	b.n	8004746 <_malloc_r+0x22>
 80047ee:	42a3      	cmp	r3, r4
 80047f0:	6862      	ldr	r2, [r4, #4]
 80047f2:	d1dd      	bne.n	80047b0 <_malloc_r+0x8c>
 80047f4:	f8c8 2000 	str.w	r2, [r8]
 80047f8:	e7ec      	b.n	80047d4 <_malloc_r+0xb0>
 80047fa:	4623      	mov	r3, r4
 80047fc:	6864      	ldr	r4, [r4, #4]
 80047fe:	e7ac      	b.n	800475a <_malloc_r+0x36>
 8004800:	4634      	mov	r4, r6
 8004802:	6876      	ldr	r6, [r6, #4]
 8004804:	e7b4      	b.n	8004770 <_malloc_r+0x4c>
 8004806:	4613      	mov	r3, r2
 8004808:	e7cc      	b.n	80047a4 <_malloc_r+0x80>
 800480a:	230c      	movs	r3, #12
 800480c:	603b      	str	r3, [r7, #0]
 800480e:	4638      	mov	r0, r7
 8004810:	f000 f80e 	bl	8004830 <__malloc_unlock>
 8004814:	e797      	b.n	8004746 <_malloc_r+0x22>
 8004816:	6025      	str	r5, [r4, #0]
 8004818:	e7dc      	b.n	80047d4 <_malloc_r+0xb0>
 800481a:	605b      	str	r3, [r3, #4]
 800481c:	deff      	udf	#255	; 0xff
 800481e:	bf00      	nop
 8004820:	200003a8 	.word	0x200003a8

08004824 <__malloc_lock>:
 8004824:	4801      	ldr	r0, [pc, #4]	; (800482c <__malloc_lock+0x8>)
 8004826:	f7ff bf0e 	b.w	8004646 <__retarget_lock_acquire_recursive>
 800482a:	bf00      	nop
 800482c:	200003a4 	.word	0x200003a4

08004830 <__malloc_unlock>:
 8004830:	4801      	ldr	r0, [pc, #4]	; (8004838 <__malloc_unlock+0x8>)
 8004832:	f7ff bf09 	b.w	8004648 <__retarget_lock_release_recursive>
 8004836:	bf00      	nop
 8004838:	200003a4 	.word	0x200003a4

0800483c <__sfputc_r>:
 800483c:	6893      	ldr	r3, [r2, #8]
 800483e:	3b01      	subs	r3, #1
 8004840:	2b00      	cmp	r3, #0
 8004842:	b410      	push	{r4}
 8004844:	6093      	str	r3, [r2, #8]
 8004846:	da08      	bge.n	800485a <__sfputc_r+0x1e>
 8004848:	6994      	ldr	r4, [r2, #24]
 800484a:	42a3      	cmp	r3, r4
 800484c:	db01      	blt.n	8004852 <__sfputc_r+0x16>
 800484e:	290a      	cmp	r1, #10
 8004850:	d103      	bne.n	800485a <__sfputc_r+0x1e>
 8004852:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004856:	f000 bb73 	b.w	8004f40 <__swbuf_r>
 800485a:	6813      	ldr	r3, [r2, #0]
 800485c:	1c58      	adds	r0, r3, #1
 800485e:	6010      	str	r0, [r2, #0]
 8004860:	7019      	strb	r1, [r3, #0]
 8004862:	4608      	mov	r0, r1
 8004864:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004868:	4770      	bx	lr

0800486a <__sfputs_r>:
 800486a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800486c:	4606      	mov	r6, r0
 800486e:	460f      	mov	r7, r1
 8004870:	4614      	mov	r4, r2
 8004872:	18d5      	adds	r5, r2, r3
 8004874:	42ac      	cmp	r4, r5
 8004876:	d101      	bne.n	800487c <__sfputs_r+0x12>
 8004878:	2000      	movs	r0, #0
 800487a:	e007      	b.n	800488c <__sfputs_r+0x22>
 800487c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004880:	463a      	mov	r2, r7
 8004882:	4630      	mov	r0, r6
 8004884:	f7ff ffda 	bl	800483c <__sfputc_r>
 8004888:	1c43      	adds	r3, r0, #1
 800488a:	d1f3      	bne.n	8004874 <__sfputs_r+0xa>
 800488c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004890 <_vfiprintf_r>:
 8004890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004894:	460d      	mov	r5, r1
 8004896:	b09d      	sub	sp, #116	; 0x74
 8004898:	4614      	mov	r4, r2
 800489a:	4698      	mov	r8, r3
 800489c:	4606      	mov	r6, r0
 800489e:	b118      	cbz	r0, 80048a8 <_vfiprintf_r+0x18>
 80048a0:	6a03      	ldr	r3, [r0, #32]
 80048a2:	b90b      	cbnz	r3, 80048a8 <_vfiprintf_r+0x18>
 80048a4:	f7ff fdca 	bl	800443c <__sinit>
 80048a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80048aa:	07d9      	lsls	r1, r3, #31
 80048ac:	d405      	bmi.n	80048ba <_vfiprintf_r+0x2a>
 80048ae:	89ab      	ldrh	r3, [r5, #12]
 80048b0:	059a      	lsls	r2, r3, #22
 80048b2:	d402      	bmi.n	80048ba <_vfiprintf_r+0x2a>
 80048b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80048b6:	f7ff fec6 	bl	8004646 <__retarget_lock_acquire_recursive>
 80048ba:	89ab      	ldrh	r3, [r5, #12]
 80048bc:	071b      	lsls	r3, r3, #28
 80048be:	d501      	bpl.n	80048c4 <_vfiprintf_r+0x34>
 80048c0:	692b      	ldr	r3, [r5, #16]
 80048c2:	b99b      	cbnz	r3, 80048ec <_vfiprintf_r+0x5c>
 80048c4:	4629      	mov	r1, r5
 80048c6:	4630      	mov	r0, r6
 80048c8:	f000 fb78 	bl	8004fbc <__swsetup_r>
 80048cc:	b170      	cbz	r0, 80048ec <_vfiprintf_r+0x5c>
 80048ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80048d0:	07dc      	lsls	r4, r3, #31
 80048d2:	d504      	bpl.n	80048de <_vfiprintf_r+0x4e>
 80048d4:	f04f 30ff 	mov.w	r0, #4294967295
 80048d8:	b01d      	add	sp, #116	; 0x74
 80048da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048de:	89ab      	ldrh	r3, [r5, #12]
 80048e0:	0598      	lsls	r0, r3, #22
 80048e2:	d4f7      	bmi.n	80048d4 <_vfiprintf_r+0x44>
 80048e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80048e6:	f7ff feaf 	bl	8004648 <__retarget_lock_release_recursive>
 80048ea:	e7f3      	b.n	80048d4 <_vfiprintf_r+0x44>
 80048ec:	2300      	movs	r3, #0
 80048ee:	9309      	str	r3, [sp, #36]	; 0x24
 80048f0:	2320      	movs	r3, #32
 80048f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80048f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80048fa:	2330      	movs	r3, #48	; 0x30
 80048fc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8004ab0 <_vfiprintf_r+0x220>
 8004900:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004904:	f04f 0901 	mov.w	r9, #1
 8004908:	4623      	mov	r3, r4
 800490a:	469a      	mov	sl, r3
 800490c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004910:	b10a      	cbz	r2, 8004916 <_vfiprintf_r+0x86>
 8004912:	2a25      	cmp	r2, #37	; 0x25
 8004914:	d1f9      	bne.n	800490a <_vfiprintf_r+0x7a>
 8004916:	ebba 0b04 	subs.w	fp, sl, r4
 800491a:	d00b      	beq.n	8004934 <_vfiprintf_r+0xa4>
 800491c:	465b      	mov	r3, fp
 800491e:	4622      	mov	r2, r4
 8004920:	4629      	mov	r1, r5
 8004922:	4630      	mov	r0, r6
 8004924:	f7ff ffa1 	bl	800486a <__sfputs_r>
 8004928:	3001      	adds	r0, #1
 800492a:	f000 80a9 	beq.w	8004a80 <_vfiprintf_r+0x1f0>
 800492e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004930:	445a      	add	r2, fp
 8004932:	9209      	str	r2, [sp, #36]	; 0x24
 8004934:	f89a 3000 	ldrb.w	r3, [sl]
 8004938:	2b00      	cmp	r3, #0
 800493a:	f000 80a1 	beq.w	8004a80 <_vfiprintf_r+0x1f0>
 800493e:	2300      	movs	r3, #0
 8004940:	f04f 32ff 	mov.w	r2, #4294967295
 8004944:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004948:	f10a 0a01 	add.w	sl, sl, #1
 800494c:	9304      	str	r3, [sp, #16]
 800494e:	9307      	str	r3, [sp, #28]
 8004950:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004954:	931a      	str	r3, [sp, #104]	; 0x68
 8004956:	4654      	mov	r4, sl
 8004958:	2205      	movs	r2, #5
 800495a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800495e:	4854      	ldr	r0, [pc, #336]	; (8004ab0 <_vfiprintf_r+0x220>)
 8004960:	f7fb fc36 	bl	80001d0 <memchr>
 8004964:	9a04      	ldr	r2, [sp, #16]
 8004966:	b9d8      	cbnz	r0, 80049a0 <_vfiprintf_r+0x110>
 8004968:	06d1      	lsls	r1, r2, #27
 800496a:	bf44      	itt	mi
 800496c:	2320      	movmi	r3, #32
 800496e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004972:	0713      	lsls	r3, r2, #28
 8004974:	bf44      	itt	mi
 8004976:	232b      	movmi	r3, #43	; 0x2b
 8004978:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800497c:	f89a 3000 	ldrb.w	r3, [sl]
 8004980:	2b2a      	cmp	r3, #42	; 0x2a
 8004982:	d015      	beq.n	80049b0 <_vfiprintf_r+0x120>
 8004984:	9a07      	ldr	r2, [sp, #28]
 8004986:	4654      	mov	r4, sl
 8004988:	2000      	movs	r0, #0
 800498a:	f04f 0c0a 	mov.w	ip, #10
 800498e:	4621      	mov	r1, r4
 8004990:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004994:	3b30      	subs	r3, #48	; 0x30
 8004996:	2b09      	cmp	r3, #9
 8004998:	d94d      	bls.n	8004a36 <_vfiprintf_r+0x1a6>
 800499a:	b1b0      	cbz	r0, 80049ca <_vfiprintf_r+0x13a>
 800499c:	9207      	str	r2, [sp, #28]
 800499e:	e014      	b.n	80049ca <_vfiprintf_r+0x13a>
 80049a0:	eba0 0308 	sub.w	r3, r0, r8
 80049a4:	fa09 f303 	lsl.w	r3, r9, r3
 80049a8:	4313      	orrs	r3, r2
 80049aa:	9304      	str	r3, [sp, #16]
 80049ac:	46a2      	mov	sl, r4
 80049ae:	e7d2      	b.n	8004956 <_vfiprintf_r+0xc6>
 80049b0:	9b03      	ldr	r3, [sp, #12]
 80049b2:	1d19      	adds	r1, r3, #4
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	9103      	str	r1, [sp, #12]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	bfbb      	ittet	lt
 80049bc:	425b      	neglt	r3, r3
 80049be:	f042 0202 	orrlt.w	r2, r2, #2
 80049c2:	9307      	strge	r3, [sp, #28]
 80049c4:	9307      	strlt	r3, [sp, #28]
 80049c6:	bfb8      	it	lt
 80049c8:	9204      	strlt	r2, [sp, #16]
 80049ca:	7823      	ldrb	r3, [r4, #0]
 80049cc:	2b2e      	cmp	r3, #46	; 0x2e
 80049ce:	d10c      	bne.n	80049ea <_vfiprintf_r+0x15a>
 80049d0:	7863      	ldrb	r3, [r4, #1]
 80049d2:	2b2a      	cmp	r3, #42	; 0x2a
 80049d4:	d134      	bne.n	8004a40 <_vfiprintf_r+0x1b0>
 80049d6:	9b03      	ldr	r3, [sp, #12]
 80049d8:	1d1a      	adds	r2, r3, #4
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	9203      	str	r2, [sp, #12]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	bfb8      	it	lt
 80049e2:	f04f 33ff 	movlt.w	r3, #4294967295
 80049e6:	3402      	adds	r4, #2
 80049e8:	9305      	str	r3, [sp, #20]
 80049ea:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8004ac0 <_vfiprintf_r+0x230>
 80049ee:	7821      	ldrb	r1, [r4, #0]
 80049f0:	2203      	movs	r2, #3
 80049f2:	4650      	mov	r0, sl
 80049f4:	f7fb fbec 	bl	80001d0 <memchr>
 80049f8:	b138      	cbz	r0, 8004a0a <_vfiprintf_r+0x17a>
 80049fa:	9b04      	ldr	r3, [sp, #16]
 80049fc:	eba0 000a 	sub.w	r0, r0, sl
 8004a00:	2240      	movs	r2, #64	; 0x40
 8004a02:	4082      	lsls	r2, r0
 8004a04:	4313      	orrs	r3, r2
 8004a06:	3401      	adds	r4, #1
 8004a08:	9304      	str	r3, [sp, #16]
 8004a0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a0e:	4829      	ldr	r0, [pc, #164]	; (8004ab4 <_vfiprintf_r+0x224>)
 8004a10:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004a14:	2206      	movs	r2, #6
 8004a16:	f7fb fbdb 	bl	80001d0 <memchr>
 8004a1a:	2800      	cmp	r0, #0
 8004a1c:	d03f      	beq.n	8004a9e <_vfiprintf_r+0x20e>
 8004a1e:	4b26      	ldr	r3, [pc, #152]	; (8004ab8 <_vfiprintf_r+0x228>)
 8004a20:	bb1b      	cbnz	r3, 8004a6a <_vfiprintf_r+0x1da>
 8004a22:	9b03      	ldr	r3, [sp, #12]
 8004a24:	3307      	adds	r3, #7
 8004a26:	f023 0307 	bic.w	r3, r3, #7
 8004a2a:	3308      	adds	r3, #8
 8004a2c:	9303      	str	r3, [sp, #12]
 8004a2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a30:	443b      	add	r3, r7
 8004a32:	9309      	str	r3, [sp, #36]	; 0x24
 8004a34:	e768      	b.n	8004908 <_vfiprintf_r+0x78>
 8004a36:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a3a:	460c      	mov	r4, r1
 8004a3c:	2001      	movs	r0, #1
 8004a3e:	e7a6      	b.n	800498e <_vfiprintf_r+0xfe>
 8004a40:	2300      	movs	r3, #0
 8004a42:	3401      	adds	r4, #1
 8004a44:	9305      	str	r3, [sp, #20]
 8004a46:	4619      	mov	r1, r3
 8004a48:	f04f 0c0a 	mov.w	ip, #10
 8004a4c:	4620      	mov	r0, r4
 8004a4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a52:	3a30      	subs	r2, #48	; 0x30
 8004a54:	2a09      	cmp	r2, #9
 8004a56:	d903      	bls.n	8004a60 <_vfiprintf_r+0x1d0>
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d0c6      	beq.n	80049ea <_vfiprintf_r+0x15a>
 8004a5c:	9105      	str	r1, [sp, #20]
 8004a5e:	e7c4      	b.n	80049ea <_vfiprintf_r+0x15a>
 8004a60:	fb0c 2101 	mla	r1, ip, r1, r2
 8004a64:	4604      	mov	r4, r0
 8004a66:	2301      	movs	r3, #1
 8004a68:	e7f0      	b.n	8004a4c <_vfiprintf_r+0x1bc>
 8004a6a:	ab03      	add	r3, sp, #12
 8004a6c:	9300      	str	r3, [sp, #0]
 8004a6e:	462a      	mov	r2, r5
 8004a70:	4b12      	ldr	r3, [pc, #72]	; (8004abc <_vfiprintf_r+0x22c>)
 8004a72:	a904      	add	r1, sp, #16
 8004a74:	4630      	mov	r0, r6
 8004a76:	f3af 8000 	nop.w
 8004a7a:	4607      	mov	r7, r0
 8004a7c:	1c78      	adds	r0, r7, #1
 8004a7e:	d1d6      	bne.n	8004a2e <_vfiprintf_r+0x19e>
 8004a80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004a82:	07d9      	lsls	r1, r3, #31
 8004a84:	d405      	bmi.n	8004a92 <_vfiprintf_r+0x202>
 8004a86:	89ab      	ldrh	r3, [r5, #12]
 8004a88:	059a      	lsls	r2, r3, #22
 8004a8a:	d402      	bmi.n	8004a92 <_vfiprintf_r+0x202>
 8004a8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004a8e:	f7ff fddb 	bl	8004648 <__retarget_lock_release_recursive>
 8004a92:	89ab      	ldrh	r3, [r5, #12]
 8004a94:	065b      	lsls	r3, r3, #25
 8004a96:	f53f af1d 	bmi.w	80048d4 <_vfiprintf_r+0x44>
 8004a9a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004a9c:	e71c      	b.n	80048d8 <_vfiprintf_r+0x48>
 8004a9e:	ab03      	add	r3, sp, #12
 8004aa0:	9300      	str	r3, [sp, #0]
 8004aa2:	462a      	mov	r2, r5
 8004aa4:	4b05      	ldr	r3, [pc, #20]	; (8004abc <_vfiprintf_r+0x22c>)
 8004aa6:	a904      	add	r1, sp, #16
 8004aa8:	4630      	mov	r0, r6
 8004aaa:	f000 f879 	bl	8004ba0 <_printf_i>
 8004aae:	e7e4      	b.n	8004a7a <_vfiprintf_r+0x1ea>
 8004ab0:	080051e0 	.word	0x080051e0
 8004ab4:	080051ea 	.word	0x080051ea
 8004ab8:	00000000 	.word	0x00000000
 8004abc:	0800486b 	.word	0x0800486b
 8004ac0:	080051e6 	.word	0x080051e6

08004ac4 <_printf_common>:
 8004ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ac8:	4616      	mov	r6, r2
 8004aca:	4699      	mov	r9, r3
 8004acc:	688a      	ldr	r2, [r1, #8]
 8004ace:	690b      	ldr	r3, [r1, #16]
 8004ad0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	bfb8      	it	lt
 8004ad8:	4613      	movlt	r3, r2
 8004ada:	6033      	str	r3, [r6, #0]
 8004adc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004ae0:	4607      	mov	r7, r0
 8004ae2:	460c      	mov	r4, r1
 8004ae4:	b10a      	cbz	r2, 8004aea <_printf_common+0x26>
 8004ae6:	3301      	adds	r3, #1
 8004ae8:	6033      	str	r3, [r6, #0]
 8004aea:	6823      	ldr	r3, [r4, #0]
 8004aec:	0699      	lsls	r1, r3, #26
 8004aee:	bf42      	ittt	mi
 8004af0:	6833      	ldrmi	r3, [r6, #0]
 8004af2:	3302      	addmi	r3, #2
 8004af4:	6033      	strmi	r3, [r6, #0]
 8004af6:	6825      	ldr	r5, [r4, #0]
 8004af8:	f015 0506 	ands.w	r5, r5, #6
 8004afc:	d106      	bne.n	8004b0c <_printf_common+0x48>
 8004afe:	f104 0a19 	add.w	sl, r4, #25
 8004b02:	68e3      	ldr	r3, [r4, #12]
 8004b04:	6832      	ldr	r2, [r6, #0]
 8004b06:	1a9b      	subs	r3, r3, r2
 8004b08:	42ab      	cmp	r3, r5
 8004b0a:	dc26      	bgt.n	8004b5a <_printf_common+0x96>
 8004b0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004b10:	1e13      	subs	r3, r2, #0
 8004b12:	6822      	ldr	r2, [r4, #0]
 8004b14:	bf18      	it	ne
 8004b16:	2301      	movne	r3, #1
 8004b18:	0692      	lsls	r2, r2, #26
 8004b1a:	d42b      	bmi.n	8004b74 <_printf_common+0xb0>
 8004b1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b20:	4649      	mov	r1, r9
 8004b22:	4638      	mov	r0, r7
 8004b24:	47c0      	blx	r8
 8004b26:	3001      	adds	r0, #1
 8004b28:	d01e      	beq.n	8004b68 <_printf_common+0xa4>
 8004b2a:	6823      	ldr	r3, [r4, #0]
 8004b2c:	6922      	ldr	r2, [r4, #16]
 8004b2e:	f003 0306 	and.w	r3, r3, #6
 8004b32:	2b04      	cmp	r3, #4
 8004b34:	bf02      	ittt	eq
 8004b36:	68e5      	ldreq	r5, [r4, #12]
 8004b38:	6833      	ldreq	r3, [r6, #0]
 8004b3a:	1aed      	subeq	r5, r5, r3
 8004b3c:	68a3      	ldr	r3, [r4, #8]
 8004b3e:	bf0c      	ite	eq
 8004b40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b44:	2500      	movne	r5, #0
 8004b46:	4293      	cmp	r3, r2
 8004b48:	bfc4      	itt	gt
 8004b4a:	1a9b      	subgt	r3, r3, r2
 8004b4c:	18ed      	addgt	r5, r5, r3
 8004b4e:	2600      	movs	r6, #0
 8004b50:	341a      	adds	r4, #26
 8004b52:	42b5      	cmp	r5, r6
 8004b54:	d11a      	bne.n	8004b8c <_printf_common+0xc8>
 8004b56:	2000      	movs	r0, #0
 8004b58:	e008      	b.n	8004b6c <_printf_common+0xa8>
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	4652      	mov	r2, sl
 8004b5e:	4649      	mov	r1, r9
 8004b60:	4638      	mov	r0, r7
 8004b62:	47c0      	blx	r8
 8004b64:	3001      	adds	r0, #1
 8004b66:	d103      	bne.n	8004b70 <_printf_common+0xac>
 8004b68:	f04f 30ff 	mov.w	r0, #4294967295
 8004b6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b70:	3501      	adds	r5, #1
 8004b72:	e7c6      	b.n	8004b02 <_printf_common+0x3e>
 8004b74:	18e1      	adds	r1, r4, r3
 8004b76:	1c5a      	adds	r2, r3, #1
 8004b78:	2030      	movs	r0, #48	; 0x30
 8004b7a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004b7e:	4422      	add	r2, r4
 8004b80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004b84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004b88:	3302      	adds	r3, #2
 8004b8a:	e7c7      	b.n	8004b1c <_printf_common+0x58>
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	4622      	mov	r2, r4
 8004b90:	4649      	mov	r1, r9
 8004b92:	4638      	mov	r0, r7
 8004b94:	47c0      	blx	r8
 8004b96:	3001      	adds	r0, #1
 8004b98:	d0e6      	beq.n	8004b68 <_printf_common+0xa4>
 8004b9a:	3601      	adds	r6, #1
 8004b9c:	e7d9      	b.n	8004b52 <_printf_common+0x8e>
	...

08004ba0 <_printf_i>:
 8004ba0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ba4:	7e0f      	ldrb	r7, [r1, #24]
 8004ba6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004ba8:	2f78      	cmp	r7, #120	; 0x78
 8004baa:	4691      	mov	r9, r2
 8004bac:	4680      	mov	r8, r0
 8004bae:	460c      	mov	r4, r1
 8004bb0:	469a      	mov	sl, r3
 8004bb2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004bb6:	d807      	bhi.n	8004bc8 <_printf_i+0x28>
 8004bb8:	2f62      	cmp	r7, #98	; 0x62
 8004bba:	d80a      	bhi.n	8004bd2 <_printf_i+0x32>
 8004bbc:	2f00      	cmp	r7, #0
 8004bbe:	f000 80d4 	beq.w	8004d6a <_printf_i+0x1ca>
 8004bc2:	2f58      	cmp	r7, #88	; 0x58
 8004bc4:	f000 80c0 	beq.w	8004d48 <_printf_i+0x1a8>
 8004bc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004bcc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004bd0:	e03a      	b.n	8004c48 <_printf_i+0xa8>
 8004bd2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004bd6:	2b15      	cmp	r3, #21
 8004bd8:	d8f6      	bhi.n	8004bc8 <_printf_i+0x28>
 8004bda:	a101      	add	r1, pc, #4	; (adr r1, 8004be0 <_printf_i+0x40>)
 8004bdc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004be0:	08004c39 	.word	0x08004c39
 8004be4:	08004c4d 	.word	0x08004c4d
 8004be8:	08004bc9 	.word	0x08004bc9
 8004bec:	08004bc9 	.word	0x08004bc9
 8004bf0:	08004bc9 	.word	0x08004bc9
 8004bf4:	08004bc9 	.word	0x08004bc9
 8004bf8:	08004c4d 	.word	0x08004c4d
 8004bfc:	08004bc9 	.word	0x08004bc9
 8004c00:	08004bc9 	.word	0x08004bc9
 8004c04:	08004bc9 	.word	0x08004bc9
 8004c08:	08004bc9 	.word	0x08004bc9
 8004c0c:	08004d51 	.word	0x08004d51
 8004c10:	08004c79 	.word	0x08004c79
 8004c14:	08004d0b 	.word	0x08004d0b
 8004c18:	08004bc9 	.word	0x08004bc9
 8004c1c:	08004bc9 	.word	0x08004bc9
 8004c20:	08004d73 	.word	0x08004d73
 8004c24:	08004bc9 	.word	0x08004bc9
 8004c28:	08004c79 	.word	0x08004c79
 8004c2c:	08004bc9 	.word	0x08004bc9
 8004c30:	08004bc9 	.word	0x08004bc9
 8004c34:	08004d13 	.word	0x08004d13
 8004c38:	682b      	ldr	r3, [r5, #0]
 8004c3a:	1d1a      	adds	r2, r3, #4
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	602a      	str	r2, [r5, #0]
 8004c40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e09f      	b.n	8004d8c <_printf_i+0x1ec>
 8004c4c:	6820      	ldr	r0, [r4, #0]
 8004c4e:	682b      	ldr	r3, [r5, #0]
 8004c50:	0607      	lsls	r7, r0, #24
 8004c52:	f103 0104 	add.w	r1, r3, #4
 8004c56:	6029      	str	r1, [r5, #0]
 8004c58:	d501      	bpl.n	8004c5e <_printf_i+0xbe>
 8004c5a:	681e      	ldr	r6, [r3, #0]
 8004c5c:	e003      	b.n	8004c66 <_printf_i+0xc6>
 8004c5e:	0646      	lsls	r6, r0, #25
 8004c60:	d5fb      	bpl.n	8004c5a <_printf_i+0xba>
 8004c62:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004c66:	2e00      	cmp	r6, #0
 8004c68:	da03      	bge.n	8004c72 <_printf_i+0xd2>
 8004c6a:	232d      	movs	r3, #45	; 0x2d
 8004c6c:	4276      	negs	r6, r6
 8004c6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c72:	485a      	ldr	r0, [pc, #360]	; (8004ddc <_printf_i+0x23c>)
 8004c74:	230a      	movs	r3, #10
 8004c76:	e012      	b.n	8004c9e <_printf_i+0xfe>
 8004c78:	682b      	ldr	r3, [r5, #0]
 8004c7a:	6820      	ldr	r0, [r4, #0]
 8004c7c:	1d19      	adds	r1, r3, #4
 8004c7e:	6029      	str	r1, [r5, #0]
 8004c80:	0605      	lsls	r5, r0, #24
 8004c82:	d501      	bpl.n	8004c88 <_printf_i+0xe8>
 8004c84:	681e      	ldr	r6, [r3, #0]
 8004c86:	e002      	b.n	8004c8e <_printf_i+0xee>
 8004c88:	0641      	lsls	r1, r0, #25
 8004c8a:	d5fb      	bpl.n	8004c84 <_printf_i+0xe4>
 8004c8c:	881e      	ldrh	r6, [r3, #0]
 8004c8e:	4853      	ldr	r0, [pc, #332]	; (8004ddc <_printf_i+0x23c>)
 8004c90:	2f6f      	cmp	r7, #111	; 0x6f
 8004c92:	bf0c      	ite	eq
 8004c94:	2308      	moveq	r3, #8
 8004c96:	230a      	movne	r3, #10
 8004c98:	2100      	movs	r1, #0
 8004c9a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004c9e:	6865      	ldr	r5, [r4, #4]
 8004ca0:	60a5      	str	r5, [r4, #8]
 8004ca2:	2d00      	cmp	r5, #0
 8004ca4:	bfa2      	ittt	ge
 8004ca6:	6821      	ldrge	r1, [r4, #0]
 8004ca8:	f021 0104 	bicge.w	r1, r1, #4
 8004cac:	6021      	strge	r1, [r4, #0]
 8004cae:	b90e      	cbnz	r6, 8004cb4 <_printf_i+0x114>
 8004cb0:	2d00      	cmp	r5, #0
 8004cb2:	d04b      	beq.n	8004d4c <_printf_i+0x1ac>
 8004cb4:	4615      	mov	r5, r2
 8004cb6:	fbb6 f1f3 	udiv	r1, r6, r3
 8004cba:	fb03 6711 	mls	r7, r3, r1, r6
 8004cbe:	5dc7      	ldrb	r7, [r0, r7]
 8004cc0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004cc4:	4637      	mov	r7, r6
 8004cc6:	42bb      	cmp	r3, r7
 8004cc8:	460e      	mov	r6, r1
 8004cca:	d9f4      	bls.n	8004cb6 <_printf_i+0x116>
 8004ccc:	2b08      	cmp	r3, #8
 8004cce:	d10b      	bne.n	8004ce8 <_printf_i+0x148>
 8004cd0:	6823      	ldr	r3, [r4, #0]
 8004cd2:	07de      	lsls	r6, r3, #31
 8004cd4:	d508      	bpl.n	8004ce8 <_printf_i+0x148>
 8004cd6:	6923      	ldr	r3, [r4, #16]
 8004cd8:	6861      	ldr	r1, [r4, #4]
 8004cda:	4299      	cmp	r1, r3
 8004cdc:	bfde      	ittt	le
 8004cde:	2330      	movle	r3, #48	; 0x30
 8004ce0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004ce4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004ce8:	1b52      	subs	r2, r2, r5
 8004cea:	6122      	str	r2, [r4, #16]
 8004cec:	f8cd a000 	str.w	sl, [sp]
 8004cf0:	464b      	mov	r3, r9
 8004cf2:	aa03      	add	r2, sp, #12
 8004cf4:	4621      	mov	r1, r4
 8004cf6:	4640      	mov	r0, r8
 8004cf8:	f7ff fee4 	bl	8004ac4 <_printf_common>
 8004cfc:	3001      	adds	r0, #1
 8004cfe:	d14a      	bne.n	8004d96 <_printf_i+0x1f6>
 8004d00:	f04f 30ff 	mov.w	r0, #4294967295
 8004d04:	b004      	add	sp, #16
 8004d06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d0a:	6823      	ldr	r3, [r4, #0]
 8004d0c:	f043 0320 	orr.w	r3, r3, #32
 8004d10:	6023      	str	r3, [r4, #0]
 8004d12:	4833      	ldr	r0, [pc, #204]	; (8004de0 <_printf_i+0x240>)
 8004d14:	2778      	movs	r7, #120	; 0x78
 8004d16:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004d1a:	6823      	ldr	r3, [r4, #0]
 8004d1c:	6829      	ldr	r1, [r5, #0]
 8004d1e:	061f      	lsls	r7, r3, #24
 8004d20:	f851 6b04 	ldr.w	r6, [r1], #4
 8004d24:	d402      	bmi.n	8004d2c <_printf_i+0x18c>
 8004d26:	065f      	lsls	r7, r3, #25
 8004d28:	bf48      	it	mi
 8004d2a:	b2b6      	uxthmi	r6, r6
 8004d2c:	07df      	lsls	r7, r3, #31
 8004d2e:	bf48      	it	mi
 8004d30:	f043 0320 	orrmi.w	r3, r3, #32
 8004d34:	6029      	str	r1, [r5, #0]
 8004d36:	bf48      	it	mi
 8004d38:	6023      	strmi	r3, [r4, #0]
 8004d3a:	b91e      	cbnz	r6, 8004d44 <_printf_i+0x1a4>
 8004d3c:	6823      	ldr	r3, [r4, #0]
 8004d3e:	f023 0320 	bic.w	r3, r3, #32
 8004d42:	6023      	str	r3, [r4, #0]
 8004d44:	2310      	movs	r3, #16
 8004d46:	e7a7      	b.n	8004c98 <_printf_i+0xf8>
 8004d48:	4824      	ldr	r0, [pc, #144]	; (8004ddc <_printf_i+0x23c>)
 8004d4a:	e7e4      	b.n	8004d16 <_printf_i+0x176>
 8004d4c:	4615      	mov	r5, r2
 8004d4e:	e7bd      	b.n	8004ccc <_printf_i+0x12c>
 8004d50:	682b      	ldr	r3, [r5, #0]
 8004d52:	6826      	ldr	r6, [r4, #0]
 8004d54:	6961      	ldr	r1, [r4, #20]
 8004d56:	1d18      	adds	r0, r3, #4
 8004d58:	6028      	str	r0, [r5, #0]
 8004d5a:	0635      	lsls	r5, r6, #24
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	d501      	bpl.n	8004d64 <_printf_i+0x1c4>
 8004d60:	6019      	str	r1, [r3, #0]
 8004d62:	e002      	b.n	8004d6a <_printf_i+0x1ca>
 8004d64:	0670      	lsls	r0, r6, #25
 8004d66:	d5fb      	bpl.n	8004d60 <_printf_i+0x1c0>
 8004d68:	8019      	strh	r1, [r3, #0]
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	6123      	str	r3, [r4, #16]
 8004d6e:	4615      	mov	r5, r2
 8004d70:	e7bc      	b.n	8004cec <_printf_i+0x14c>
 8004d72:	682b      	ldr	r3, [r5, #0]
 8004d74:	1d1a      	adds	r2, r3, #4
 8004d76:	602a      	str	r2, [r5, #0]
 8004d78:	681d      	ldr	r5, [r3, #0]
 8004d7a:	6862      	ldr	r2, [r4, #4]
 8004d7c:	2100      	movs	r1, #0
 8004d7e:	4628      	mov	r0, r5
 8004d80:	f7fb fa26 	bl	80001d0 <memchr>
 8004d84:	b108      	cbz	r0, 8004d8a <_printf_i+0x1ea>
 8004d86:	1b40      	subs	r0, r0, r5
 8004d88:	6060      	str	r0, [r4, #4]
 8004d8a:	6863      	ldr	r3, [r4, #4]
 8004d8c:	6123      	str	r3, [r4, #16]
 8004d8e:	2300      	movs	r3, #0
 8004d90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d94:	e7aa      	b.n	8004cec <_printf_i+0x14c>
 8004d96:	6923      	ldr	r3, [r4, #16]
 8004d98:	462a      	mov	r2, r5
 8004d9a:	4649      	mov	r1, r9
 8004d9c:	4640      	mov	r0, r8
 8004d9e:	47d0      	blx	sl
 8004da0:	3001      	adds	r0, #1
 8004da2:	d0ad      	beq.n	8004d00 <_printf_i+0x160>
 8004da4:	6823      	ldr	r3, [r4, #0]
 8004da6:	079b      	lsls	r3, r3, #30
 8004da8:	d413      	bmi.n	8004dd2 <_printf_i+0x232>
 8004daa:	68e0      	ldr	r0, [r4, #12]
 8004dac:	9b03      	ldr	r3, [sp, #12]
 8004dae:	4298      	cmp	r0, r3
 8004db0:	bfb8      	it	lt
 8004db2:	4618      	movlt	r0, r3
 8004db4:	e7a6      	b.n	8004d04 <_printf_i+0x164>
 8004db6:	2301      	movs	r3, #1
 8004db8:	4632      	mov	r2, r6
 8004dba:	4649      	mov	r1, r9
 8004dbc:	4640      	mov	r0, r8
 8004dbe:	47d0      	blx	sl
 8004dc0:	3001      	adds	r0, #1
 8004dc2:	d09d      	beq.n	8004d00 <_printf_i+0x160>
 8004dc4:	3501      	adds	r5, #1
 8004dc6:	68e3      	ldr	r3, [r4, #12]
 8004dc8:	9903      	ldr	r1, [sp, #12]
 8004dca:	1a5b      	subs	r3, r3, r1
 8004dcc:	42ab      	cmp	r3, r5
 8004dce:	dcf2      	bgt.n	8004db6 <_printf_i+0x216>
 8004dd0:	e7eb      	b.n	8004daa <_printf_i+0x20a>
 8004dd2:	2500      	movs	r5, #0
 8004dd4:	f104 0619 	add.w	r6, r4, #25
 8004dd8:	e7f5      	b.n	8004dc6 <_printf_i+0x226>
 8004dda:	bf00      	nop
 8004ddc:	080051f1 	.word	0x080051f1
 8004de0:	08005202 	.word	0x08005202

08004de4 <__sflush_r>:
 8004de4:	898a      	ldrh	r2, [r1, #12]
 8004de6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004dea:	4605      	mov	r5, r0
 8004dec:	0710      	lsls	r0, r2, #28
 8004dee:	460c      	mov	r4, r1
 8004df0:	d458      	bmi.n	8004ea4 <__sflush_r+0xc0>
 8004df2:	684b      	ldr	r3, [r1, #4]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	dc05      	bgt.n	8004e04 <__sflush_r+0x20>
 8004df8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	dc02      	bgt.n	8004e04 <__sflush_r+0x20>
 8004dfe:	2000      	movs	r0, #0
 8004e00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004e06:	2e00      	cmp	r6, #0
 8004e08:	d0f9      	beq.n	8004dfe <__sflush_r+0x1a>
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004e10:	682f      	ldr	r7, [r5, #0]
 8004e12:	6a21      	ldr	r1, [r4, #32]
 8004e14:	602b      	str	r3, [r5, #0]
 8004e16:	d032      	beq.n	8004e7e <__sflush_r+0x9a>
 8004e18:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004e1a:	89a3      	ldrh	r3, [r4, #12]
 8004e1c:	075a      	lsls	r2, r3, #29
 8004e1e:	d505      	bpl.n	8004e2c <__sflush_r+0x48>
 8004e20:	6863      	ldr	r3, [r4, #4]
 8004e22:	1ac0      	subs	r0, r0, r3
 8004e24:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004e26:	b10b      	cbz	r3, 8004e2c <__sflush_r+0x48>
 8004e28:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004e2a:	1ac0      	subs	r0, r0, r3
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	4602      	mov	r2, r0
 8004e30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004e32:	6a21      	ldr	r1, [r4, #32]
 8004e34:	4628      	mov	r0, r5
 8004e36:	47b0      	blx	r6
 8004e38:	1c43      	adds	r3, r0, #1
 8004e3a:	89a3      	ldrh	r3, [r4, #12]
 8004e3c:	d106      	bne.n	8004e4c <__sflush_r+0x68>
 8004e3e:	6829      	ldr	r1, [r5, #0]
 8004e40:	291d      	cmp	r1, #29
 8004e42:	d82b      	bhi.n	8004e9c <__sflush_r+0xb8>
 8004e44:	4a29      	ldr	r2, [pc, #164]	; (8004eec <__sflush_r+0x108>)
 8004e46:	410a      	asrs	r2, r1
 8004e48:	07d6      	lsls	r6, r2, #31
 8004e4a:	d427      	bmi.n	8004e9c <__sflush_r+0xb8>
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	6062      	str	r2, [r4, #4]
 8004e50:	04d9      	lsls	r1, r3, #19
 8004e52:	6922      	ldr	r2, [r4, #16]
 8004e54:	6022      	str	r2, [r4, #0]
 8004e56:	d504      	bpl.n	8004e62 <__sflush_r+0x7e>
 8004e58:	1c42      	adds	r2, r0, #1
 8004e5a:	d101      	bne.n	8004e60 <__sflush_r+0x7c>
 8004e5c:	682b      	ldr	r3, [r5, #0]
 8004e5e:	b903      	cbnz	r3, 8004e62 <__sflush_r+0x7e>
 8004e60:	6560      	str	r0, [r4, #84]	; 0x54
 8004e62:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e64:	602f      	str	r7, [r5, #0]
 8004e66:	2900      	cmp	r1, #0
 8004e68:	d0c9      	beq.n	8004dfe <__sflush_r+0x1a>
 8004e6a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004e6e:	4299      	cmp	r1, r3
 8004e70:	d002      	beq.n	8004e78 <__sflush_r+0x94>
 8004e72:	4628      	mov	r0, r5
 8004e74:	f7ff fbea 	bl	800464c <_free_r>
 8004e78:	2000      	movs	r0, #0
 8004e7a:	6360      	str	r0, [r4, #52]	; 0x34
 8004e7c:	e7c0      	b.n	8004e00 <__sflush_r+0x1c>
 8004e7e:	2301      	movs	r3, #1
 8004e80:	4628      	mov	r0, r5
 8004e82:	47b0      	blx	r6
 8004e84:	1c41      	adds	r1, r0, #1
 8004e86:	d1c8      	bne.n	8004e1a <__sflush_r+0x36>
 8004e88:	682b      	ldr	r3, [r5, #0]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d0c5      	beq.n	8004e1a <__sflush_r+0x36>
 8004e8e:	2b1d      	cmp	r3, #29
 8004e90:	d001      	beq.n	8004e96 <__sflush_r+0xb2>
 8004e92:	2b16      	cmp	r3, #22
 8004e94:	d101      	bne.n	8004e9a <__sflush_r+0xb6>
 8004e96:	602f      	str	r7, [r5, #0]
 8004e98:	e7b1      	b.n	8004dfe <__sflush_r+0x1a>
 8004e9a:	89a3      	ldrh	r3, [r4, #12]
 8004e9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ea0:	81a3      	strh	r3, [r4, #12]
 8004ea2:	e7ad      	b.n	8004e00 <__sflush_r+0x1c>
 8004ea4:	690f      	ldr	r7, [r1, #16]
 8004ea6:	2f00      	cmp	r7, #0
 8004ea8:	d0a9      	beq.n	8004dfe <__sflush_r+0x1a>
 8004eaa:	0793      	lsls	r3, r2, #30
 8004eac:	680e      	ldr	r6, [r1, #0]
 8004eae:	bf08      	it	eq
 8004eb0:	694b      	ldreq	r3, [r1, #20]
 8004eb2:	600f      	str	r7, [r1, #0]
 8004eb4:	bf18      	it	ne
 8004eb6:	2300      	movne	r3, #0
 8004eb8:	eba6 0807 	sub.w	r8, r6, r7
 8004ebc:	608b      	str	r3, [r1, #8]
 8004ebe:	f1b8 0f00 	cmp.w	r8, #0
 8004ec2:	dd9c      	ble.n	8004dfe <__sflush_r+0x1a>
 8004ec4:	6a21      	ldr	r1, [r4, #32]
 8004ec6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004ec8:	4643      	mov	r3, r8
 8004eca:	463a      	mov	r2, r7
 8004ecc:	4628      	mov	r0, r5
 8004ece:	47b0      	blx	r6
 8004ed0:	2800      	cmp	r0, #0
 8004ed2:	dc06      	bgt.n	8004ee2 <__sflush_r+0xfe>
 8004ed4:	89a3      	ldrh	r3, [r4, #12]
 8004ed6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004eda:	81a3      	strh	r3, [r4, #12]
 8004edc:	f04f 30ff 	mov.w	r0, #4294967295
 8004ee0:	e78e      	b.n	8004e00 <__sflush_r+0x1c>
 8004ee2:	4407      	add	r7, r0
 8004ee4:	eba8 0800 	sub.w	r8, r8, r0
 8004ee8:	e7e9      	b.n	8004ebe <__sflush_r+0xda>
 8004eea:	bf00      	nop
 8004eec:	dfbffffe 	.word	0xdfbffffe

08004ef0 <_fflush_r>:
 8004ef0:	b538      	push	{r3, r4, r5, lr}
 8004ef2:	690b      	ldr	r3, [r1, #16]
 8004ef4:	4605      	mov	r5, r0
 8004ef6:	460c      	mov	r4, r1
 8004ef8:	b913      	cbnz	r3, 8004f00 <_fflush_r+0x10>
 8004efa:	2500      	movs	r5, #0
 8004efc:	4628      	mov	r0, r5
 8004efe:	bd38      	pop	{r3, r4, r5, pc}
 8004f00:	b118      	cbz	r0, 8004f0a <_fflush_r+0x1a>
 8004f02:	6a03      	ldr	r3, [r0, #32]
 8004f04:	b90b      	cbnz	r3, 8004f0a <_fflush_r+0x1a>
 8004f06:	f7ff fa99 	bl	800443c <__sinit>
 8004f0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d0f3      	beq.n	8004efa <_fflush_r+0xa>
 8004f12:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004f14:	07d0      	lsls	r0, r2, #31
 8004f16:	d404      	bmi.n	8004f22 <_fflush_r+0x32>
 8004f18:	0599      	lsls	r1, r3, #22
 8004f1a:	d402      	bmi.n	8004f22 <_fflush_r+0x32>
 8004f1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f1e:	f7ff fb92 	bl	8004646 <__retarget_lock_acquire_recursive>
 8004f22:	4628      	mov	r0, r5
 8004f24:	4621      	mov	r1, r4
 8004f26:	f7ff ff5d 	bl	8004de4 <__sflush_r>
 8004f2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004f2c:	07da      	lsls	r2, r3, #31
 8004f2e:	4605      	mov	r5, r0
 8004f30:	d4e4      	bmi.n	8004efc <_fflush_r+0xc>
 8004f32:	89a3      	ldrh	r3, [r4, #12]
 8004f34:	059b      	lsls	r3, r3, #22
 8004f36:	d4e1      	bmi.n	8004efc <_fflush_r+0xc>
 8004f38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f3a:	f7ff fb85 	bl	8004648 <__retarget_lock_release_recursive>
 8004f3e:	e7dd      	b.n	8004efc <_fflush_r+0xc>

08004f40 <__swbuf_r>:
 8004f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f42:	460e      	mov	r6, r1
 8004f44:	4614      	mov	r4, r2
 8004f46:	4605      	mov	r5, r0
 8004f48:	b118      	cbz	r0, 8004f52 <__swbuf_r+0x12>
 8004f4a:	6a03      	ldr	r3, [r0, #32]
 8004f4c:	b90b      	cbnz	r3, 8004f52 <__swbuf_r+0x12>
 8004f4e:	f7ff fa75 	bl	800443c <__sinit>
 8004f52:	69a3      	ldr	r3, [r4, #24]
 8004f54:	60a3      	str	r3, [r4, #8]
 8004f56:	89a3      	ldrh	r3, [r4, #12]
 8004f58:	071a      	lsls	r2, r3, #28
 8004f5a:	d525      	bpl.n	8004fa8 <__swbuf_r+0x68>
 8004f5c:	6923      	ldr	r3, [r4, #16]
 8004f5e:	b31b      	cbz	r3, 8004fa8 <__swbuf_r+0x68>
 8004f60:	6823      	ldr	r3, [r4, #0]
 8004f62:	6922      	ldr	r2, [r4, #16]
 8004f64:	1a98      	subs	r0, r3, r2
 8004f66:	6963      	ldr	r3, [r4, #20]
 8004f68:	b2f6      	uxtb	r6, r6
 8004f6a:	4283      	cmp	r3, r0
 8004f6c:	4637      	mov	r7, r6
 8004f6e:	dc04      	bgt.n	8004f7a <__swbuf_r+0x3a>
 8004f70:	4621      	mov	r1, r4
 8004f72:	4628      	mov	r0, r5
 8004f74:	f7ff ffbc 	bl	8004ef0 <_fflush_r>
 8004f78:	b9e0      	cbnz	r0, 8004fb4 <__swbuf_r+0x74>
 8004f7a:	68a3      	ldr	r3, [r4, #8]
 8004f7c:	3b01      	subs	r3, #1
 8004f7e:	60a3      	str	r3, [r4, #8]
 8004f80:	6823      	ldr	r3, [r4, #0]
 8004f82:	1c5a      	adds	r2, r3, #1
 8004f84:	6022      	str	r2, [r4, #0]
 8004f86:	701e      	strb	r6, [r3, #0]
 8004f88:	6962      	ldr	r2, [r4, #20]
 8004f8a:	1c43      	adds	r3, r0, #1
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d004      	beq.n	8004f9a <__swbuf_r+0x5a>
 8004f90:	89a3      	ldrh	r3, [r4, #12]
 8004f92:	07db      	lsls	r3, r3, #31
 8004f94:	d506      	bpl.n	8004fa4 <__swbuf_r+0x64>
 8004f96:	2e0a      	cmp	r6, #10
 8004f98:	d104      	bne.n	8004fa4 <__swbuf_r+0x64>
 8004f9a:	4621      	mov	r1, r4
 8004f9c:	4628      	mov	r0, r5
 8004f9e:	f7ff ffa7 	bl	8004ef0 <_fflush_r>
 8004fa2:	b938      	cbnz	r0, 8004fb4 <__swbuf_r+0x74>
 8004fa4:	4638      	mov	r0, r7
 8004fa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004fa8:	4621      	mov	r1, r4
 8004faa:	4628      	mov	r0, r5
 8004fac:	f000 f806 	bl	8004fbc <__swsetup_r>
 8004fb0:	2800      	cmp	r0, #0
 8004fb2:	d0d5      	beq.n	8004f60 <__swbuf_r+0x20>
 8004fb4:	f04f 37ff 	mov.w	r7, #4294967295
 8004fb8:	e7f4      	b.n	8004fa4 <__swbuf_r+0x64>
	...

08004fbc <__swsetup_r>:
 8004fbc:	b538      	push	{r3, r4, r5, lr}
 8004fbe:	4b2a      	ldr	r3, [pc, #168]	; (8005068 <__swsetup_r+0xac>)
 8004fc0:	4605      	mov	r5, r0
 8004fc2:	6818      	ldr	r0, [r3, #0]
 8004fc4:	460c      	mov	r4, r1
 8004fc6:	b118      	cbz	r0, 8004fd0 <__swsetup_r+0x14>
 8004fc8:	6a03      	ldr	r3, [r0, #32]
 8004fca:	b90b      	cbnz	r3, 8004fd0 <__swsetup_r+0x14>
 8004fcc:	f7ff fa36 	bl	800443c <__sinit>
 8004fd0:	89a3      	ldrh	r3, [r4, #12]
 8004fd2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004fd6:	0718      	lsls	r0, r3, #28
 8004fd8:	d422      	bmi.n	8005020 <__swsetup_r+0x64>
 8004fda:	06d9      	lsls	r1, r3, #27
 8004fdc:	d407      	bmi.n	8004fee <__swsetup_r+0x32>
 8004fde:	2309      	movs	r3, #9
 8004fe0:	602b      	str	r3, [r5, #0]
 8004fe2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004fe6:	81a3      	strh	r3, [r4, #12]
 8004fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8004fec:	e034      	b.n	8005058 <__swsetup_r+0x9c>
 8004fee:	0758      	lsls	r0, r3, #29
 8004ff0:	d512      	bpl.n	8005018 <__swsetup_r+0x5c>
 8004ff2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004ff4:	b141      	cbz	r1, 8005008 <__swsetup_r+0x4c>
 8004ff6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004ffa:	4299      	cmp	r1, r3
 8004ffc:	d002      	beq.n	8005004 <__swsetup_r+0x48>
 8004ffe:	4628      	mov	r0, r5
 8005000:	f7ff fb24 	bl	800464c <_free_r>
 8005004:	2300      	movs	r3, #0
 8005006:	6363      	str	r3, [r4, #52]	; 0x34
 8005008:	89a3      	ldrh	r3, [r4, #12]
 800500a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800500e:	81a3      	strh	r3, [r4, #12]
 8005010:	2300      	movs	r3, #0
 8005012:	6063      	str	r3, [r4, #4]
 8005014:	6923      	ldr	r3, [r4, #16]
 8005016:	6023      	str	r3, [r4, #0]
 8005018:	89a3      	ldrh	r3, [r4, #12]
 800501a:	f043 0308 	orr.w	r3, r3, #8
 800501e:	81a3      	strh	r3, [r4, #12]
 8005020:	6923      	ldr	r3, [r4, #16]
 8005022:	b94b      	cbnz	r3, 8005038 <__swsetup_r+0x7c>
 8005024:	89a3      	ldrh	r3, [r4, #12]
 8005026:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800502a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800502e:	d003      	beq.n	8005038 <__swsetup_r+0x7c>
 8005030:	4621      	mov	r1, r4
 8005032:	4628      	mov	r0, r5
 8005034:	f000 f850 	bl	80050d8 <__smakebuf_r>
 8005038:	89a0      	ldrh	r0, [r4, #12]
 800503a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800503e:	f010 0301 	ands.w	r3, r0, #1
 8005042:	d00a      	beq.n	800505a <__swsetup_r+0x9e>
 8005044:	2300      	movs	r3, #0
 8005046:	60a3      	str	r3, [r4, #8]
 8005048:	6963      	ldr	r3, [r4, #20]
 800504a:	425b      	negs	r3, r3
 800504c:	61a3      	str	r3, [r4, #24]
 800504e:	6923      	ldr	r3, [r4, #16]
 8005050:	b943      	cbnz	r3, 8005064 <__swsetup_r+0xa8>
 8005052:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005056:	d1c4      	bne.n	8004fe2 <__swsetup_r+0x26>
 8005058:	bd38      	pop	{r3, r4, r5, pc}
 800505a:	0781      	lsls	r1, r0, #30
 800505c:	bf58      	it	pl
 800505e:	6963      	ldrpl	r3, [r4, #20]
 8005060:	60a3      	str	r3, [r4, #8]
 8005062:	e7f4      	b.n	800504e <__swsetup_r+0x92>
 8005064:	2000      	movs	r0, #0
 8005066:	e7f7      	b.n	8005058 <__swsetup_r+0x9c>
 8005068:	20000074 	.word	0x20000074

0800506c <_sbrk_r>:
 800506c:	b538      	push	{r3, r4, r5, lr}
 800506e:	4d06      	ldr	r5, [pc, #24]	; (8005088 <_sbrk_r+0x1c>)
 8005070:	2300      	movs	r3, #0
 8005072:	4604      	mov	r4, r0
 8005074:	4608      	mov	r0, r1
 8005076:	602b      	str	r3, [r5, #0]
 8005078:	f7fb fd04 	bl	8000a84 <_sbrk>
 800507c:	1c43      	adds	r3, r0, #1
 800507e:	d102      	bne.n	8005086 <_sbrk_r+0x1a>
 8005080:	682b      	ldr	r3, [r5, #0]
 8005082:	b103      	cbz	r3, 8005086 <_sbrk_r+0x1a>
 8005084:	6023      	str	r3, [r4, #0]
 8005086:	bd38      	pop	{r3, r4, r5, pc}
 8005088:	200003a0 	.word	0x200003a0

0800508c <__swhatbuf_r>:
 800508c:	b570      	push	{r4, r5, r6, lr}
 800508e:	460c      	mov	r4, r1
 8005090:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005094:	2900      	cmp	r1, #0
 8005096:	b096      	sub	sp, #88	; 0x58
 8005098:	4615      	mov	r5, r2
 800509a:	461e      	mov	r6, r3
 800509c:	da0d      	bge.n	80050ba <__swhatbuf_r+0x2e>
 800509e:	89a3      	ldrh	r3, [r4, #12]
 80050a0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80050a4:	f04f 0100 	mov.w	r1, #0
 80050a8:	bf0c      	ite	eq
 80050aa:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80050ae:	2340      	movne	r3, #64	; 0x40
 80050b0:	2000      	movs	r0, #0
 80050b2:	6031      	str	r1, [r6, #0]
 80050b4:	602b      	str	r3, [r5, #0]
 80050b6:	b016      	add	sp, #88	; 0x58
 80050b8:	bd70      	pop	{r4, r5, r6, pc}
 80050ba:	466a      	mov	r2, sp
 80050bc:	f000 f848 	bl	8005150 <_fstat_r>
 80050c0:	2800      	cmp	r0, #0
 80050c2:	dbec      	blt.n	800509e <__swhatbuf_r+0x12>
 80050c4:	9901      	ldr	r1, [sp, #4]
 80050c6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80050ca:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80050ce:	4259      	negs	r1, r3
 80050d0:	4159      	adcs	r1, r3
 80050d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050d6:	e7eb      	b.n	80050b0 <__swhatbuf_r+0x24>

080050d8 <__smakebuf_r>:
 80050d8:	898b      	ldrh	r3, [r1, #12]
 80050da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80050dc:	079d      	lsls	r5, r3, #30
 80050de:	4606      	mov	r6, r0
 80050e0:	460c      	mov	r4, r1
 80050e2:	d507      	bpl.n	80050f4 <__smakebuf_r+0x1c>
 80050e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80050e8:	6023      	str	r3, [r4, #0]
 80050ea:	6123      	str	r3, [r4, #16]
 80050ec:	2301      	movs	r3, #1
 80050ee:	6163      	str	r3, [r4, #20]
 80050f0:	b002      	add	sp, #8
 80050f2:	bd70      	pop	{r4, r5, r6, pc}
 80050f4:	ab01      	add	r3, sp, #4
 80050f6:	466a      	mov	r2, sp
 80050f8:	f7ff ffc8 	bl	800508c <__swhatbuf_r>
 80050fc:	9900      	ldr	r1, [sp, #0]
 80050fe:	4605      	mov	r5, r0
 8005100:	4630      	mov	r0, r6
 8005102:	f7ff fb0f 	bl	8004724 <_malloc_r>
 8005106:	b948      	cbnz	r0, 800511c <__smakebuf_r+0x44>
 8005108:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800510c:	059a      	lsls	r2, r3, #22
 800510e:	d4ef      	bmi.n	80050f0 <__smakebuf_r+0x18>
 8005110:	f023 0303 	bic.w	r3, r3, #3
 8005114:	f043 0302 	orr.w	r3, r3, #2
 8005118:	81a3      	strh	r3, [r4, #12]
 800511a:	e7e3      	b.n	80050e4 <__smakebuf_r+0xc>
 800511c:	89a3      	ldrh	r3, [r4, #12]
 800511e:	6020      	str	r0, [r4, #0]
 8005120:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005124:	81a3      	strh	r3, [r4, #12]
 8005126:	9b00      	ldr	r3, [sp, #0]
 8005128:	6163      	str	r3, [r4, #20]
 800512a:	9b01      	ldr	r3, [sp, #4]
 800512c:	6120      	str	r0, [r4, #16]
 800512e:	b15b      	cbz	r3, 8005148 <__smakebuf_r+0x70>
 8005130:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005134:	4630      	mov	r0, r6
 8005136:	f000 f81d 	bl	8005174 <_isatty_r>
 800513a:	b128      	cbz	r0, 8005148 <__smakebuf_r+0x70>
 800513c:	89a3      	ldrh	r3, [r4, #12]
 800513e:	f023 0303 	bic.w	r3, r3, #3
 8005142:	f043 0301 	orr.w	r3, r3, #1
 8005146:	81a3      	strh	r3, [r4, #12]
 8005148:	89a3      	ldrh	r3, [r4, #12]
 800514a:	431d      	orrs	r5, r3
 800514c:	81a5      	strh	r5, [r4, #12]
 800514e:	e7cf      	b.n	80050f0 <__smakebuf_r+0x18>

08005150 <_fstat_r>:
 8005150:	b538      	push	{r3, r4, r5, lr}
 8005152:	4d07      	ldr	r5, [pc, #28]	; (8005170 <_fstat_r+0x20>)
 8005154:	2300      	movs	r3, #0
 8005156:	4604      	mov	r4, r0
 8005158:	4608      	mov	r0, r1
 800515a:	4611      	mov	r1, r2
 800515c:	602b      	str	r3, [r5, #0]
 800515e:	f7fb fc68 	bl	8000a32 <_fstat>
 8005162:	1c43      	adds	r3, r0, #1
 8005164:	d102      	bne.n	800516c <_fstat_r+0x1c>
 8005166:	682b      	ldr	r3, [r5, #0]
 8005168:	b103      	cbz	r3, 800516c <_fstat_r+0x1c>
 800516a:	6023      	str	r3, [r4, #0]
 800516c:	bd38      	pop	{r3, r4, r5, pc}
 800516e:	bf00      	nop
 8005170:	200003a0 	.word	0x200003a0

08005174 <_isatty_r>:
 8005174:	b538      	push	{r3, r4, r5, lr}
 8005176:	4d06      	ldr	r5, [pc, #24]	; (8005190 <_isatty_r+0x1c>)
 8005178:	2300      	movs	r3, #0
 800517a:	4604      	mov	r4, r0
 800517c:	4608      	mov	r0, r1
 800517e:	602b      	str	r3, [r5, #0]
 8005180:	f7fb fc67 	bl	8000a52 <_isatty>
 8005184:	1c43      	adds	r3, r0, #1
 8005186:	d102      	bne.n	800518e <_isatty_r+0x1a>
 8005188:	682b      	ldr	r3, [r5, #0]
 800518a:	b103      	cbz	r3, 800518e <_isatty_r+0x1a>
 800518c:	6023      	str	r3, [r4, #0]
 800518e:	bd38      	pop	{r3, r4, r5, pc}
 8005190:	200003a0 	.word	0x200003a0

08005194 <_init>:
 8005194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005196:	bf00      	nop
 8005198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800519a:	bc08      	pop	{r3}
 800519c:	469e      	mov	lr, r3
 800519e:	4770      	bx	lr

080051a0 <_fini>:
 80051a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051a2:	bf00      	nop
 80051a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051a6:	bc08      	pop	{r3}
 80051a8:	469e      	mov	lr, r3
 80051aa:	4770      	bx	lr
