
timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004198  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08004328  08004328  00014328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004390  08004390  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08004390  08004390  00014390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004398  08004398  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004398  08004398  00014398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800439c  0800439c  0001439c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080043a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00000260  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200002d8  200002d8  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000bf0c  00000000  00000000  000200eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001bfc  00000000  00000000  0002bff7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000b98  00000000  00000000  0002dbf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000900  00000000  00000000  0002e790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00021a45  00000000  00000000  0002f090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000d239  00000000  00000000  00050ad5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cca84  00000000  00000000  0005dd0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000037f4  00000000  00000000  0012a794  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  0012df88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004310 	.word	0x08004310

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08004310 	.word	0x08004310

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <handleButtonPress1>:
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

void handleButtonPress1(TIM_HandleTypeDef *htim) {
 800056c:	b580      	push	{r7, lr}
 800056e:	b084      	sub	sp, #16
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]

			uint16_t timer_val;
			timer_val = __HAL_TIM_GET_COUNTER(htim);
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800057a:	81fb      	strh	r3, [r7, #14]
			 if (timer_val>=2000)
 800057c:	89fb      	ldrh	r3, [r7, #14]
 800057e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000582:	d30d      	bcc.n	80005a0 <handleButtonPress1+0x34>
			 {
			 HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_SET);
 8000584:	2201      	movs	r2, #1
 8000586:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800058a:	4807      	ldr	r0, [pc, #28]	; (80005a8 <handleButtonPress1+0x3c>)
 800058c:	f001 fa94 	bl	8001ab8 <HAL_GPIO_WritePin>
			 printf("Wartosc timera: %d\n", timer_val);
 8000590:	89fb      	ldrh	r3, [r7, #14]
 8000592:	4619      	mov	r1, r3
 8000594:	4805      	ldr	r0, [pc, #20]	; (80005ac <handleButtonPress1+0x40>)
 8000596:	f003 f845 	bl	8003624 <iprintf>
			 HAL_Delay(100);
 800059a:	2064      	movs	r0, #100	; 0x64
 800059c:	f000 fc26 	bl	8000dec <HAL_Delay>
			 }

}
 80005a0:	bf00      	nop
 80005a2:	3710      	adds	r7, #16
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	40020c00 	.word	0x40020c00
 80005ac:	08004328 	.word	0x08004328

080005b0 <handleButtonRelease1>:

void handleButtonRelease1(TIM_HandleTypeDef *htim) {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
			HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 80005b8:	2200      	movs	r2, #0
 80005ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005be:	4805      	ldr	r0, [pc, #20]	; (80005d4 <handleButtonRelease1+0x24>)
 80005c0:	f001 fa7a 	bl	8001ab8 <HAL_GPIO_WritePin>
			htim->Instance->CNT = 0;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	2200      	movs	r2, #0
 80005ca:	625a      	str	r2, [r3, #36]	; 0x24
}
 80005cc:	bf00      	nop
 80005ce:	3708      	adds	r7, #8
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	40020c00 	.word	0x40020c00

080005d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0


  /* USER CODE END 1 */
  /* MCU Configuration--------------------------------------------------------*/
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005de:	f000 fb93 	bl	8000d08 <HAL_Init>
  /* USER CODE BEGIN Init */
  /* USER CODE END Init */
  /* Configure the system clock */
  SystemClock_Config();
 80005e2:	f000 f84d 	bl	8000680 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */
  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e6:	f000 f917 	bl	8000818 <MX_GPIO_Init>
  MX_DMA_Init();
 80005ea:	f000 f8f5 	bl	80007d8 <MX_DMA_Init>
  MX_TIM14_Init();
 80005ee:	f000 f8a5 	bl	800073c <MX_TIM14_Init>
  MX_USART2_UART_Init();
 80005f2:	f000 f8c7 	bl	8000784 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
 // uart_buf_len = sprintf(uart_buf, "Timer test\r\n");
 // HAL_UART_Transmit(&husart2, (uint8_t *)uart_buf, uart_buf_len, 100);
  //Start timer
  HAL_TIM_Base_Start(&htim14);
 80005f6:	4820      	ldr	r0, [pc, #128]	; (8000678 <main+0xa0>)
 80005f8:	f001 ff20 	bl	800243c <HAL_TIM_Base_Start>
  /* USER CODE END 2 */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  for (int i = 0; i < NUM_BUTTONS; i++)
 80005fc:	2300      	movs	r3, #0
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	e036      	b.n	8000670 <main+0x98>
	  {
	              if (HAL_GPIO_ReadPin(buttons[i].port, buttons[i].pin) == 1)
 8000602:	4a1e      	ldr	r2, [pc, #120]	; (800067c <main+0xa4>)
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	011b      	lsls	r3, r3, #4
 8000608:	4413      	add	r3, r2
 800060a:	681a      	ldr	r2, [r3, #0]
 800060c:	491b      	ldr	r1, [pc, #108]	; (800067c <main+0xa4>)
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	011b      	lsls	r3, r3, #4
 8000612:	440b      	add	r3, r1
 8000614:	3304      	adds	r3, #4
 8000616:	881b      	ldrh	r3, [r3, #0]
 8000618:	4619      	mov	r1, r3
 800061a:	4610      	mov	r0, r2
 800061c:	f001 fa34 	bl	8001a88 <HAL_GPIO_ReadPin>
 8000620:	4603      	mov	r3, r0
 8000622:	2b01      	cmp	r3, #1
 8000624:	d107      	bne.n	8000636 <main+0x5e>
	              {
	                  buttons[i].press_callback(&htim14);
 8000626:	4a15      	ldr	r2, [pc, #84]	; (800067c <main+0xa4>)
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	011b      	lsls	r3, r3, #4
 800062c:	4413      	add	r3, r2
 800062e:	3308      	adds	r3, #8
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	4811      	ldr	r0, [pc, #68]	; (8000678 <main+0xa0>)
 8000634:	4798      	blx	r3
	              }
	              if (HAL_GPIO_ReadPin(buttons[i].port, buttons[i].pin) == 0)
 8000636:	4a11      	ldr	r2, [pc, #68]	; (800067c <main+0xa4>)
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	011b      	lsls	r3, r3, #4
 800063c:	4413      	add	r3, r2
 800063e:	681a      	ldr	r2, [r3, #0]
 8000640:	490e      	ldr	r1, [pc, #56]	; (800067c <main+0xa4>)
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	011b      	lsls	r3, r3, #4
 8000646:	440b      	add	r3, r1
 8000648:	3304      	adds	r3, #4
 800064a:	881b      	ldrh	r3, [r3, #0]
 800064c:	4619      	mov	r1, r3
 800064e:	4610      	mov	r0, r2
 8000650:	f001 fa1a 	bl	8001a88 <HAL_GPIO_ReadPin>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d107      	bne.n	800066a <main+0x92>
	              {
	            	  buttons[i].release_callback(&htim14);
 800065a:	4a08      	ldr	r2, [pc, #32]	; (800067c <main+0xa4>)
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	011b      	lsls	r3, r3, #4
 8000660:	4413      	add	r3, r2
 8000662:	330c      	adds	r3, #12
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	4804      	ldr	r0, [pc, #16]	; (8000678 <main+0xa0>)
 8000668:	4798      	blx	r3
	  for (int i = 0; i < NUM_BUTTONS; i++)
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	3301      	adds	r3, #1
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	2b00      	cmp	r3, #0
 8000674:	d0c5      	beq.n	8000602 <main+0x2a>
 8000676:	e7c1      	b.n	80005fc <main+0x24>
 8000678:	20000094 	.word	0x20000094
 800067c:	20000000 	.word	0x20000000

08000680 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b094      	sub	sp, #80	; 0x50
 8000684:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000686:	f107 0320 	add.w	r3, r7, #32
 800068a:	2230      	movs	r2, #48	; 0x30
 800068c:	2100      	movs	r1, #0
 800068e:	4618      	mov	r0, r3
 8000690:	f003 f81d 	bl	80036ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000694:	f107 030c 	add.w	r3, r7, #12
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
 800069c:	605a      	str	r2, [r3, #4]
 800069e:	609a      	str	r2, [r3, #8]
 80006a0:	60da      	str	r2, [r3, #12]
 80006a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a4:	2300      	movs	r3, #0
 80006a6:	60bb      	str	r3, [r7, #8]
 80006a8:	4b22      	ldr	r3, [pc, #136]	; (8000734 <SystemClock_Config+0xb4>)
 80006aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ac:	4a21      	ldr	r2, [pc, #132]	; (8000734 <SystemClock_Config+0xb4>)
 80006ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006b2:	6413      	str	r3, [r2, #64]	; 0x40
 80006b4:	4b1f      	ldr	r3, [pc, #124]	; (8000734 <SystemClock_Config+0xb4>)
 80006b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006bc:	60bb      	str	r3, [r7, #8]
 80006be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006c0:	2300      	movs	r3, #0
 80006c2:	607b      	str	r3, [r7, #4]
 80006c4:	4b1c      	ldr	r3, [pc, #112]	; (8000738 <SystemClock_Config+0xb8>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a1b      	ldr	r2, [pc, #108]	; (8000738 <SystemClock_Config+0xb8>)
 80006ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ce:	6013      	str	r3, [r2, #0]
 80006d0:	4b19      	ldr	r3, [pc, #100]	; (8000738 <SystemClock_Config+0xb8>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006d8:	607b      	str	r3, [r7, #4]
 80006da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006dc:	2302      	movs	r3, #2
 80006de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006e0:	2301      	movs	r3, #1
 80006e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006e4:	2310      	movs	r3, #16
 80006e6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006e8:	2300      	movs	r3, #0
 80006ea:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ec:	f107 0320 	add.w	r3, r7, #32
 80006f0:	4618      	mov	r0, r3
 80006f2:	f001 f9fb 	bl	8001aec <HAL_RCC_OscConfig>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80006fc:	f000 f8ec 	bl	80008d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000700:	230f      	movs	r3, #15
 8000702:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000704:	2300      	movs	r3, #0
 8000706:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000708:	2300      	movs	r3, #0
 800070a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800070c:	2300      	movs	r3, #0
 800070e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000710:	2300      	movs	r3, #0
 8000712:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000714:	f107 030c 	add.w	r3, r7, #12
 8000718:	2100      	movs	r1, #0
 800071a:	4618      	mov	r0, r3
 800071c:	f001 fc5e 	bl	8001fdc <HAL_RCC_ClockConfig>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000726:	f000 f8d7 	bl	80008d8 <Error_Handler>
  }
}
 800072a:	bf00      	nop
 800072c:	3750      	adds	r7, #80	; 0x50
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	40023800 	.word	0x40023800
 8000738:	40007000 	.word	0x40007000

0800073c <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000740:	4b0e      	ldr	r3, [pc, #56]	; (800077c <MX_TIM14_Init+0x40>)
 8000742:	4a0f      	ldr	r2, [pc, #60]	; (8000780 <MX_TIM14_Init+0x44>)
 8000744:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 15999;
 8000746:	4b0d      	ldr	r3, [pc, #52]	; (800077c <MX_TIM14_Init+0x40>)
 8000748:	f643 627f 	movw	r2, #15999	; 0x3e7f
 800074c:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800074e:	4b0b      	ldr	r3, [pc, #44]	; (800077c <MX_TIM14_Init+0x40>)
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 5000;
 8000754:	4b09      	ldr	r3, [pc, #36]	; (800077c <MX_TIM14_Init+0x40>)
 8000756:	f241 3288 	movw	r2, #5000	; 0x1388
 800075a:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800075c:	4b07      	ldr	r3, [pc, #28]	; (800077c <MX_TIM14_Init+0x40>)
 800075e:	2200      	movs	r2, #0
 8000760:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000762:	4b06      	ldr	r3, [pc, #24]	; (800077c <MX_TIM14_Init+0x40>)
 8000764:	2200      	movs	r2, #0
 8000766:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000768:	4804      	ldr	r0, [pc, #16]	; (800077c <MX_TIM14_Init+0x40>)
 800076a:	f001 fe17 	bl	800239c <HAL_TIM_Base_Init>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_TIM14_Init+0x3c>
  {
    Error_Handler();
 8000774:	f000 f8b0 	bl	80008d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000778:	bf00      	nop
 800077a:	bd80      	pop	{r7, pc}
 800077c:	20000094 	.word	0x20000094
 8000780:	40002000 	.word	0x40002000

08000784 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000788:	4b11      	ldr	r3, [pc, #68]	; (80007d0 <MX_USART2_UART_Init+0x4c>)
 800078a:	4a12      	ldr	r2, [pc, #72]	; (80007d4 <MX_USART2_UART_Init+0x50>)
 800078c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800078e:	4b10      	ldr	r3, [pc, #64]	; (80007d0 <MX_USART2_UART_Init+0x4c>)
 8000790:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000794:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000796:	4b0e      	ldr	r3, [pc, #56]	; (80007d0 <MX_USART2_UART_Init+0x4c>)
 8000798:	2200      	movs	r2, #0
 800079a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800079c:	4b0c      	ldr	r3, [pc, #48]	; (80007d0 <MX_USART2_UART_Init+0x4c>)
 800079e:	2200      	movs	r2, #0
 80007a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007a2:	4b0b      	ldr	r3, [pc, #44]	; (80007d0 <MX_USART2_UART_Init+0x4c>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007a8:	4b09      	ldr	r3, [pc, #36]	; (80007d0 <MX_USART2_UART_Init+0x4c>)
 80007aa:	220c      	movs	r2, #12
 80007ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ae:	4b08      	ldr	r3, [pc, #32]	; (80007d0 <MX_USART2_UART_Init+0x4c>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b4:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <MX_USART2_UART_Init+0x4c>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007ba:	4805      	ldr	r0, [pc, #20]	; (80007d0 <MX_USART2_UART_Init+0x4c>)
 80007bc:	f001 ff52 	bl	8002664 <HAL_UART_Init>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007c6:	f000 f887 	bl	80008d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	200000dc 	.word	0x200000dc
 80007d4:	40004400 	.word	0x40004400

080007d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	607b      	str	r3, [r7, #4]
 80007e2:	4b0c      	ldr	r3, [pc, #48]	; (8000814 <MX_DMA_Init+0x3c>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a0b      	ldr	r2, [pc, #44]	; (8000814 <MX_DMA_Init+0x3c>)
 80007e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b09      	ldr	r3, [pc, #36]	; (8000814 <MX_DMA_Init+0x3c>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80007fa:	2200      	movs	r2, #0
 80007fc:	2100      	movs	r1, #0
 80007fe:	2011      	movs	r0, #17
 8000800:	f000 fbf3 	bl	8000fea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000804:	2011      	movs	r0, #17
 8000806:	f000 fc0c 	bl	8001022 <HAL_NVIC_EnableIRQ>

}
 800080a:	bf00      	nop
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	40023800 	.word	0x40023800

08000818 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b088      	sub	sp, #32
 800081c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081e:	f107 030c 	add.w	r3, r7, #12
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
 8000826:	605a      	str	r2, [r3, #4]
 8000828:	609a      	str	r2, [r3, #8]
 800082a:	60da      	str	r2, [r3, #12]
 800082c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	60bb      	str	r3, [r7, #8]
 8000832:	4b26      	ldr	r3, [pc, #152]	; (80008cc <MX_GPIO_Init+0xb4>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	4a25      	ldr	r2, [pc, #148]	; (80008cc <MX_GPIO_Init+0xb4>)
 8000838:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800083c:	6313      	str	r3, [r2, #48]	; 0x30
 800083e:	4b23      	ldr	r3, [pc, #140]	; (80008cc <MX_GPIO_Init+0xb4>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000846:	60bb      	str	r3, [r7, #8]
 8000848:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	607b      	str	r3, [r7, #4]
 800084e:	4b1f      	ldr	r3, [pc, #124]	; (80008cc <MX_GPIO_Init+0xb4>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	4a1e      	ldr	r2, [pc, #120]	; (80008cc <MX_GPIO_Init+0xb4>)
 8000854:	f043 0301 	orr.w	r3, r3, #1
 8000858:	6313      	str	r3, [r2, #48]	; 0x30
 800085a:	4b1c      	ldr	r3, [pc, #112]	; (80008cc <MX_GPIO_Init+0xb4>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	f003 0301 	and.w	r3, r3, #1
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	603b      	str	r3, [r7, #0]
 800086a:	4b18      	ldr	r3, [pc, #96]	; (80008cc <MX_GPIO_Init+0xb4>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	4a17      	ldr	r2, [pc, #92]	; (80008cc <MX_GPIO_Init+0xb4>)
 8000870:	f043 0308 	orr.w	r3, r3, #8
 8000874:	6313      	str	r3, [r2, #48]	; 0x30
 8000876:	4b15      	ldr	r3, [pc, #84]	; (80008cc <MX_GPIO_Init+0xb4>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	f003 0308 	and.w	r3, r3, #8
 800087e:	603b      	str	r3, [r7, #0]
 8000880:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 8000882:	2200      	movs	r2, #0
 8000884:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000888:	4811      	ldr	r0, [pc, #68]	; (80008d0 <MX_GPIO_Init+0xb8>)
 800088a:	f001 f915 	bl	8001ab8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800088e:	2301      	movs	r3, #1
 8000890:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000892:	2300      	movs	r3, #0
 8000894:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	2300      	movs	r3, #0
 8000898:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800089a:	f107 030c 	add.w	r3, r7, #12
 800089e:	4619      	mov	r1, r3
 80008a0:	480c      	ldr	r0, [pc, #48]	; (80008d4 <MX_GPIO_Init+0xbc>)
 80008a2:	f000 ff55 	bl	8001750 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUE_LED_Pin */
  GPIO_InitStruct.Pin = BLUE_LED_Pin;
 80008a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80008aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ac:	2301      	movs	r3, #1
 80008ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b4:	2300      	movs	r3, #0
 80008b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BLUE_LED_GPIO_Port, &GPIO_InitStruct);
 80008b8:	f107 030c 	add.w	r3, r7, #12
 80008bc:	4619      	mov	r1, r3
 80008be:	4804      	ldr	r0, [pc, #16]	; (80008d0 <MX_GPIO_Init+0xb8>)
 80008c0:	f000 ff46 	bl	8001750 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008c4:	bf00      	nop
 80008c6:	3720      	adds	r7, #32
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	40023800 	.word	0x40023800
 80008d0:	40020c00 	.word	0x40020c00
 80008d4:	40020000 	.word	0x40020000

080008d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008dc:	b672      	cpsid	i
}
 80008de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008e0:	e7fe      	b.n	80008e0 <Error_Handler+0x8>
	...

080008e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	607b      	str	r3, [r7, #4]
 80008ee:	4b10      	ldr	r3, [pc, #64]	; (8000930 <HAL_MspInit+0x4c>)
 80008f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008f2:	4a0f      	ldr	r2, [pc, #60]	; (8000930 <HAL_MspInit+0x4c>)
 80008f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008f8:	6453      	str	r3, [r2, #68]	; 0x44
 80008fa:	4b0d      	ldr	r3, [pc, #52]	; (8000930 <HAL_MspInit+0x4c>)
 80008fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000902:	607b      	str	r3, [r7, #4]
 8000904:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	603b      	str	r3, [r7, #0]
 800090a:	4b09      	ldr	r3, [pc, #36]	; (8000930 <HAL_MspInit+0x4c>)
 800090c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090e:	4a08      	ldr	r2, [pc, #32]	; (8000930 <HAL_MspInit+0x4c>)
 8000910:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000914:	6413      	str	r3, [r2, #64]	; 0x40
 8000916:	4b06      	ldr	r3, [pc, #24]	; (8000930 <HAL_MspInit+0x4c>)
 8000918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800091e:	603b      	str	r3, [r7, #0]
 8000920:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000922:	bf00      	nop
 8000924:	370c      	adds	r7, #12
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	40023800 	.word	0x40023800

08000934 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000934:	b480      	push	{r7}
 8000936:	b085      	sub	sp, #20
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a0b      	ldr	r2, [pc, #44]	; (8000970 <HAL_TIM_Base_MspInit+0x3c>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d10d      	bne.n	8000962 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	60fb      	str	r3, [r7, #12]
 800094a:	4b0a      	ldr	r3, [pc, #40]	; (8000974 <HAL_TIM_Base_MspInit+0x40>)
 800094c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094e:	4a09      	ldr	r2, [pc, #36]	; (8000974 <HAL_TIM_Base_MspInit+0x40>)
 8000950:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000954:	6413      	str	r3, [r2, #64]	; 0x40
 8000956:	4b07      	ldr	r3, [pc, #28]	; (8000974 <HAL_TIM_Base_MspInit+0x40>)
 8000958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800095e:	60fb      	str	r3, [r7, #12]
 8000960:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8000962:	bf00      	nop
 8000964:	3714      	adds	r7, #20
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	40002000 	.word	0x40002000
 8000974:	40023800 	.word	0x40023800

08000978 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b08a      	sub	sp, #40	; 0x28
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000980:	f107 0314 	add.w	r3, r7, #20
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	605a      	str	r2, [r3, #4]
 800098a:	609a      	str	r2, [r3, #8]
 800098c:	60da      	str	r2, [r3, #12]
 800098e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a34      	ldr	r2, [pc, #208]	; (8000a68 <HAL_UART_MspInit+0xf0>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d161      	bne.n	8000a5e <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	613b      	str	r3, [r7, #16]
 800099e:	4b33      	ldr	r3, [pc, #204]	; (8000a6c <HAL_UART_MspInit+0xf4>)
 80009a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a2:	4a32      	ldr	r2, [pc, #200]	; (8000a6c <HAL_UART_MspInit+0xf4>)
 80009a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009a8:	6413      	str	r3, [r2, #64]	; 0x40
 80009aa:	4b30      	ldr	r3, [pc, #192]	; (8000a6c <HAL_UART_MspInit+0xf4>)
 80009ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009b2:	613b      	str	r3, [r7, #16]
 80009b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	60fb      	str	r3, [r7, #12]
 80009ba:	4b2c      	ldr	r3, [pc, #176]	; (8000a6c <HAL_UART_MspInit+0xf4>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	4a2b      	ldr	r2, [pc, #172]	; (8000a6c <HAL_UART_MspInit+0xf4>)
 80009c0:	f043 0301 	orr.w	r3, r3, #1
 80009c4:	6313      	str	r3, [r2, #48]	; 0x30
 80009c6:	4b29      	ldr	r3, [pc, #164]	; (8000a6c <HAL_UART_MspInit+0xf4>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	f003 0301 	and.w	r3, r3, #1
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009d2:	230c      	movs	r3, #12
 80009d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d6:	2302      	movs	r3, #2
 80009d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009de:	2303      	movs	r3, #3
 80009e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009e2:	2307      	movs	r3, #7
 80009e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e6:	f107 0314 	add.w	r3, r7, #20
 80009ea:	4619      	mov	r1, r3
 80009ec:	4820      	ldr	r0, [pc, #128]	; (8000a70 <HAL_UART_MspInit+0xf8>)
 80009ee:	f000 feaf 	bl	8001750 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80009f2:	4b20      	ldr	r3, [pc, #128]	; (8000a74 <HAL_UART_MspInit+0xfc>)
 80009f4:	4a20      	ldr	r2, [pc, #128]	; (8000a78 <HAL_UART_MspInit+0x100>)
 80009f6:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80009f8:	4b1e      	ldr	r3, [pc, #120]	; (8000a74 <HAL_UART_MspInit+0xfc>)
 80009fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80009fe:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a00:	4b1c      	ldr	r3, [pc, #112]	; (8000a74 <HAL_UART_MspInit+0xfc>)
 8000a02:	2240      	movs	r2, #64	; 0x40
 8000a04:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a06:	4b1b      	ldr	r3, [pc, #108]	; (8000a74 <HAL_UART_MspInit+0xfc>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000a0c:	4b19      	ldr	r3, [pc, #100]	; (8000a74 <HAL_UART_MspInit+0xfc>)
 8000a0e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a12:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a14:	4b17      	ldr	r3, [pc, #92]	; (8000a74 <HAL_UART_MspInit+0xfc>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a1a:	4b16      	ldr	r3, [pc, #88]	; (8000a74 <HAL_UART_MspInit+0xfc>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000a20:	4b14      	ldr	r3, [pc, #80]	; (8000a74 <HAL_UART_MspInit+0xfc>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000a26:	4b13      	ldr	r3, [pc, #76]	; (8000a74 <HAL_UART_MspInit+0xfc>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a2c:	4b11      	ldr	r3, [pc, #68]	; (8000a74 <HAL_UART_MspInit+0xfc>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000a32:	4810      	ldr	r0, [pc, #64]	; (8000a74 <HAL_UART_MspInit+0xfc>)
 8000a34:	f000 fb10 	bl	8001058 <HAL_DMA_Init>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8000a3e:	f7ff ff4b 	bl	80008d8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	4a0b      	ldr	r2, [pc, #44]	; (8000a74 <HAL_UART_MspInit+0xfc>)
 8000a46:	639a      	str	r2, [r3, #56]	; 0x38
 8000a48:	4a0a      	ldr	r2, [pc, #40]	; (8000a74 <HAL_UART_MspInit+0xfc>)
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	2100      	movs	r1, #0
 8000a52:	2026      	movs	r0, #38	; 0x26
 8000a54:	f000 fac9 	bl	8000fea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a58:	2026      	movs	r0, #38	; 0x26
 8000a5a:	f000 fae2 	bl	8001022 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a5e:	bf00      	nop
 8000a60:	3728      	adds	r7, #40	; 0x28
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	40004400 	.word	0x40004400
 8000a6c:	40023800 	.word	0x40023800
 8000a70:	40020000 	.word	0x40020000
 8000a74:	20000124 	.word	0x20000124
 8000a78:	400260a0 	.word	0x400260a0

08000a7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a80:	e7fe      	b.n	8000a80 <NMI_Handler+0x4>

08000a82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a82:	b480      	push	{r7}
 8000a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a86:	e7fe      	b.n	8000a86 <HardFault_Handler+0x4>

08000a88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a8c:	e7fe      	b.n	8000a8c <MemManage_Handler+0x4>

08000a8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a92:	e7fe      	b.n	8000a92 <BusFault_Handler+0x4>

08000a94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a98:	e7fe      	b.n	8000a98 <UsageFault_Handler+0x4>

08000a9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr

08000aa8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aac:	bf00      	nop
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr

08000ab6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ab6:	b480      	push	{r7}
 8000ab8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aba:	bf00      	nop
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr

08000ac4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ac8:	f000 f970 	bl	8000dac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000acc:	bf00      	nop
 8000ace:	bd80      	pop	{r7, pc}

08000ad0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000ad4:	4802      	ldr	r0, [pc, #8]	; (8000ae0 <DMA1_Stream6_IRQHandler+0x10>)
 8000ad6:	f000 fbff 	bl	80012d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000ada:	bf00      	nop
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	20000124 	.word	0x20000124

08000ae4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ae8:	4802      	ldr	r0, [pc, #8]	; (8000af4 <USART2_IRQHandler+0x10>)
 8000aea:	f001 fe0b 	bl	8002704 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000aee:	bf00      	nop
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	200000dc 	.word	0x200000dc

08000af8 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	4603      	mov	r3, r0
 8000b00:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000b02:	4b0f      	ldr	r3, [pc, #60]	; (8000b40 <ITM_SendChar+0x48>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4a0e      	ldr	r2, [pc, #56]	; (8000b40 <ITM_SendChar+0x48>)
 8000b08:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000b0c:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000b0e:	4b0d      	ldr	r3, [pc, #52]	; (8000b44 <ITM_SendChar+0x4c>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4a0c      	ldr	r2, [pc, #48]	; (8000b44 <ITM_SendChar+0x4c>)
 8000b14:	f043 0301 	orr.w	r3, r3, #1
 8000b18:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000b1a:	bf00      	nop
 8000b1c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	f003 0301 	and.w	r3, r3, #1
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d0f8      	beq.n	8000b1c <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000b2a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000b2e:	79fb      	ldrb	r3, [r7, #7]
 8000b30:	6013      	str	r3, [r2, #0]
}
 8000b32:	bf00      	nop
 8000b34:	370c      	adds	r7, #12
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	e000edfc 	.word	0xe000edfc
 8000b44:	e0000e00 	.word	0xe0000e00

08000b48 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b086      	sub	sp, #24
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	60f8      	str	r0, [r7, #12]
 8000b50:	60b9      	str	r1, [r7, #8]
 8000b52:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b54:	2300      	movs	r3, #0
 8000b56:	617b      	str	r3, [r7, #20]
 8000b58:	e00a      	b.n	8000b70 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b5a:	f3af 8000 	nop.w
 8000b5e:	4601      	mov	r1, r0
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	1c5a      	adds	r2, r3, #1
 8000b64:	60ba      	str	r2, [r7, #8]
 8000b66:	b2ca      	uxtb	r2, r1
 8000b68:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b6a:	697b      	ldr	r3, [r7, #20]
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	617b      	str	r3, [r7, #20]
 8000b70:	697a      	ldr	r2, [r7, #20]
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	429a      	cmp	r2, r3
 8000b76:	dbf0      	blt.n	8000b5a <_read+0x12>
  }

  return len;
 8000b78:	687b      	ldr	r3, [r7, #4]
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3718      	adds	r7, #24
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}

08000b82 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b82:	b580      	push	{r7, lr}
 8000b84:	b086      	sub	sp, #24
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	60f8      	str	r0, [r7, #12]
 8000b8a:	60b9      	str	r1, [r7, #8]
 8000b8c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b8e:	2300      	movs	r3, #0
 8000b90:	617b      	str	r3, [r7, #20]
 8000b92:	e009      	b.n	8000ba8 <_write+0x26>
  {
	  ITM_SendChar(*ptr++);
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	1c5a      	adds	r2, r3, #1
 8000b98:	60ba      	str	r2, [r7, #8]
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f7ff ffab 	bl	8000af8 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	617b      	str	r3, [r7, #20]
 8000ba8:	697a      	ldr	r2, [r7, #20]
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	429a      	cmp	r2, r3
 8000bae:	dbf1      	blt.n	8000b94 <_write+0x12>
  }
  return len;
 8000bb0:	687b      	ldr	r3, [r7, #4]
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	3718      	adds	r7, #24
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}

08000bba <_close>:

int _close(int file)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	b083      	sub	sp, #12
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000bc2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	370c      	adds	r7, #12
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr

08000bd2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bd2:	b480      	push	{r7}
 8000bd4:	b083      	sub	sp, #12
 8000bd6:	af00      	add	r7, sp, #0
 8000bd8:	6078      	str	r0, [r7, #4]
 8000bda:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000be2:	605a      	str	r2, [r3, #4]
  return 0;
 8000be4:	2300      	movs	r3, #0
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	370c      	adds	r7, #12
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr

08000bf2 <_isatty>:

int _isatty(int file)
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	b083      	sub	sp, #12
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000bfa:	2301      	movs	r3, #1
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	370c      	adds	r7, #12
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr

08000c08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b085      	sub	sp, #20
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	60f8      	str	r0, [r7, #12]
 8000c10:	60b9      	str	r1, [r7, #8]
 8000c12:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c14:	2300      	movs	r3, #0
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	3714      	adds	r7, #20
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
	...

08000c24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b086      	sub	sp, #24
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c2c:	4a14      	ldr	r2, [pc, #80]	; (8000c80 <_sbrk+0x5c>)
 8000c2e:	4b15      	ldr	r3, [pc, #84]	; (8000c84 <_sbrk+0x60>)
 8000c30:	1ad3      	subs	r3, r2, r3
 8000c32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c38:	4b13      	ldr	r3, [pc, #76]	; (8000c88 <_sbrk+0x64>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d102      	bne.n	8000c46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c40:	4b11      	ldr	r3, [pc, #68]	; (8000c88 <_sbrk+0x64>)
 8000c42:	4a12      	ldr	r2, [pc, #72]	; (8000c8c <_sbrk+0x68>)
 8000c44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c46:	4b10      	ldr	r3, [pc, #64]	; (8000c88 <_sbrk+0x64>)
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	4413      	add	r3, r2
 8000c4e:	693a      	ldr	r2, [r7, #16]
 8000c50:	429a      	cmp	r2, r3
 8000c52:	d207      	bcs.n	8000c64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c54:	f002 fd8a 	bl	800376c <__errno>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	220c      	movs	r2, #12
 8000c5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c62:	e009      	b.n	8000c78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c64:	4b08      	ldr	r3, [pc, #32]	; (8000c88 <_sbrk+0x64>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c6a:	4b07      	ldr	r3, [pc, #28]	; (8000c88 <_sbrk+0x64>)
 8000c6c:	681a      	ldr	r2, [r3, #0]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	4413      	add	r3, r2
 8000c72:	4a05      	ldr	r2, [pc, #20]	; (8000c88 <_sbrk+0x64>)
 8000c74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c76:	68fb      	ldr	r3, [r7, #12]
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	3718      	adds	r7, #24
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	20020000 	.word	0x20020000
 8000c84:	00000400 	.word	0x00000400
 8000c88:	20000184 	.word	0x20000184
 8000c8c:	200002d8 	.word	0x200002d8

08000c90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c94:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <SystemInit+0x20>)
 8000c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c9a:	4a05      	ldr	r2, [pc, #20]	; (8000cb0 <SystemInit+0x20>)
 8000c9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ca0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ca4:	bf00      	nop
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	e000ed00 	.word	0xe000ed00

08000cb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000cb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cec <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000cb8:	f7ff ffea 	bl	8000c90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cbc:	480c      	ldr	r0, [pc, #48]	; (8000cf0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cbe:	490d      	ldr	r1, [pc, #52]	; (8000cf4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000cc0:	4a0d      	ldr	r2, [pc, #52]	; (8000cf8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cc4:	e002      	b.n	8000ccc <LoopCopyDataInit>

08000cc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cca:	3304      	adds	r3, #4

08000ccc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ccc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cd0:	d3f9      	bcc.n	8000cc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cd2:	4a0a      	ldr	r2, [pc, #40]	; (8000cfc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000cd4:	4c0a      	ldr	r4, [pc, #40]	; (8000d00 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cd8:	e001      	b.n	8000cde <LoopFillZerobss>

08000cda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cdc:	3204      	adds	r2, #4

08000cde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ce0:	d3fb      	bcc.n	8000cda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ce2:	f002 fd49 	bl	8003778 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ce6:	f7ff fc77 	bl	80005d8 <main>
  bx  lr    
 8000cea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000cec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cf0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cf4:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000cf8:	080043a0 	.word	0x080043a0
  ldr r2, =_sbss
 8000cfc:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000d00:	200002d8 	.word	0x200002d8

08000d04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d04:	e7fe      	b.n	8000d04 <ADC_IRQHandler>
	...

08000d08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d0c:	4b0e      	ldr	r3, [pc, #56]	; (8000d48 <HAL_Init+0x40>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a0d      	ldr	r2, [pc, #52]	; (8000d48 <HAL_Init+0x40>)
 8000d12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d18:	4b0b      	ldr	r3, [pc, #44]	; (8000d48 <HAL_Init+0x40>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a0a      	ldr	r2, [pc, #40]	; (8000d48 <HAL_Init+0x40>)
 8000d1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d24:	4b08      	ldr	r3, [pc, #32]	; (8000d48 <HAL_Init+0x40>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a07      	ldr	r2, [pc, #28]	; (8000d48 <HAL_Init+0x40>)
 8000d2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d30:	2003      	movs	r0, #3
 8000d32:	f000 f94f 	bl	8000fd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d36:	200f      	movs	r0, #15
 8000d38:	f000 f808 	bl	8000d4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d3c:	f7ff fdd2 	bl	80008e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d40:	2300      	movs	r3, #0
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	40023c00 	.word	0x40023c00

08000d4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d54:	4b12      	ldr	r3, [pc, #72]	; (8000da0 <HAL_InitTick+0x54>)
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	4b12      	ldr	r3, [pc, #72]	; (8000da4 <HAL_InitTick+0x58>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d62:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f000 f967 	bl	800103e <HAL_SYSTICK_Config>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d76:	2301      	movs	r3, #1
 8000d78:	e00e      	b.n	8000d98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	2b0f      	cmp	r3, #15
 8000d7e:	d80a      	bhi.n	8000d96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d80:	2200      	movs	r2, #0
 8000d82:	6879      	ldr	r1, [r7, #4]
 8000d84:	f04f 30ff 	mov.w	r0, #4294967295
 8000d88:	f000 f92f 	bl	8000fea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d8c:	4a06      	ldr	r2, [pc, #24]	; (8000da8 <HAL_InitTick+0x5c>)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d92:	2300      	movs	r3, #0
 8000d94:	e000      	b.n	8000d98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d96:	2301      	movs	r3, #1
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	3708      	adds	r7, #8
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	20000010 	.word	0x20000010
 8000da4:	20000018 	.word	0x20000018
 8000da8:	20000014 	.word	0x20000014

08000dac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000db0:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <HAL_IncTick+0x20>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	461a      	mov	r2, r3
 8000db6:	4b06      	ldr	r3, [pc, #24]	; (8000dd0 <HAL_IncTick+0x24>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4413      	add	r3, r2
 8000dbc:	4a04      	ldr	r2, [pc, #16]	; (8000dd0 <HAL_IncTick+0x24>)
 8000dbe:	6013      	str	r3, [r2, #0]
}
 8000dc0:	bf00      	nop
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	20000018 	.word	0x20000018
 8000dd0:	20000188 	.word	0x20000188

08000dd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  return uwTick;
 8000dd8:	4b03      	ldr	r3, [pc, #12]	; (8000de8 <HAL_GetTick+0x14>)
 8000dda:	681b      	ldr	r3, [r3, #0]
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	20000188 	.word	0x20000188

08000dec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000df4:	f7ff ffee 	bl	8000dd4 <HAL_GetTick>
 8000df8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e04:	d005      	beq.n	8000e12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e06:	4b0a      	ldr	r3, [pc, #40]	; (8000e30 <HAL_Delay+0x44>)
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	461a      	mov	r2, r3
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	4413      	add	r3, r2
 8000e10:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e12:	bf00      	nop
 8000e14:	f7ff ffde 	bl	8000dd4 <HAL_GetTick>
 8000e18:	4602      	mov	r2, r0
 8000e1a:	68bb      	ldr	r3, [r7, #8]
 8000e1c:	1ad3      	subs	r3, r2, r3
 8000e1e:	68fa      	ldr	r2, [r7, #12]
 8000e20:	429a      	cmp	r2, r3
 8000e22:	d8f7      	bhi.n	8000e14 <HAL_Delay+0x28>
  {
  }
}
 8000e24:	bf00      	nop
 8000e26:	bf00      	nop
 8000e28:	3710      	adds	r7, #16
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	20000018 	.word	0x20000018

08000e34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b085      	sub	sp, #20
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	f003 0307 	and.w	r3, r3, #7
 8000e42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e44:	4b0c      	ldr	r3, [pc, #48]	; (8000e78 <__NVIC_SetPriorityGrouping+0x44>)
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e4a:	68ba      	ldr	r2, [r7, #8]
 8000e4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e50:	4013      	ands	r3, r2
 8000e52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e66:	4a04      	ldr	r2, [pc, #16]	; (8000e78 <__NVIC_SetPriorityGrouping+0x44>)
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	60d3      	str	r3, [r2, #12]
}
 8000e6c:	bf00      	nop
 8000e6e:	3714      	adds	r7, #20
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr
 8000e78:	e000ed00 	.word	0xe000ed00

08000e7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e80:	4b04      	ldr	r3, [pc, #16]	; (8000e94 <__NVIC_GetPriorityGrouping+0x18>)
 8000e82:	68db      	ldr	r3, [r3, #12]
 8000e84:	0a1b      	lsrs	r3, r3, #8
 8000e86:	f003 0307 	and.w	r3, r3, #7
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr
 8000e94:	e000ed00 	.word	0xe000ed00

08000e98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	db0b      	blt.n	8000ec2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eaa:	79fb      	ldrb	r3, [r7, #7]
 8000eac:	f003 021f 	and.w	r2, r3, #31
 8000eb0:	4907      	ldr	r1, [pc, #28]	; (8000ed0 <__NVIC_EnableIRQ+0x38>)
 8000eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb6:	095b      	lsrs	r3, r3, #5
 8000eb8:	2001      	movs	r0, #1
 8000eba:	fa00 f202 	lsl.w	r2, r0, r2
 8000ebe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ec2:	bf00      	nop
 8000ec4:	370c      	adds	r7, #12
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	e000e100 	.word	0xe000e100

08000ed4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	6039      	str	r1, [r7, #0]
 8000ede:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ee0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	db0a      	blt.n	8000efe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	b2da      	uxtb	r2, r3
 8000eec:	490c      	ldr	r1, [pc, #48]	; (8000f20 <__NVIC_SetPriority+0x4c>)
 8000eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef2:	0112      	lsls	r2, r2, #4
 8000ef4:	b2d2      	uxtb	r2, r2
 8000ef6:	440b      	add	r3, r1
 8000ef8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000efc:	e00a      	b.n	8000f14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	b2da      	uxtb	r2, r3
 8000f02:	4908      	ldr	r1, [pc, #32]	; (8000f24 <__NVIC_SetPriority+0x50>)
 8000f04:	79fb      	ldrb	r3, [r7, #7]
 8000f06:	f003 030f 	and.w	r3, r3, #15
 8000f0a:	3b04      	subs	r3, #4
 8000f0c:	0112      	lsls	r2, r2, #4
 8000f0e:	b2d2      	uxtb	r2, r2
 8000f10:	440b      	add	r3, r1
 8000f12:	761a      	strb	r2, [r3, #24]
}
 8000f14:	bf00      	nop
 8000f16:	370c      	adds	r7, #12
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr
 8000f20:	e000e100 	.word	0xe000e100
 8000f24:	e000ed00 	.word	0xe000ed00

08000f28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b089      	sub	sp, #36	; 0x24
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	60f8      	str	r0, [r7, #12]
 8000f30:	60b9      	str	r1, [r7, #8]
 8000f32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	f003 0307 	and.w	r3, r3, #7
 8000f3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	f1c3 0307 	rsb	r3, r3, #7
 8000f42:	2b04      	cmp	r3, #4
 8000f44:	bf28      	it	cs
 8000f46:	2304      	movcs	r3, #4
 8000f48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	3304      	adds	r3, #4
 8000f4e:	2b06      	cmp	r3, #6
 8000f50:	d902      	bls.n	8000f58 <NVIC_EncodePriority+0x30>
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	3b03      	subs	r3, #3
 8000f56:	e000      	b.n	8000f5a <NVIC_EncodePriority+0x32>
 8000f58:	2300      	movs	r3, #0
 8000f5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f60:	69bb      	ldr	r3, [r7, #24]
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	43da      	mvns	r2, r3
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	401a      	ands	r2, r3
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f70:	f04f 31ff 	mov.w	r1, #4294967295
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	fa01 f303 	lsl.w	r3, r1, r3
 8000f7a:	43d9      	mvns	r1, r3
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f80:	4313      	orrs	r3, r2
         );
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3724      	adds	r7, #36	; 0x24
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
	...

08000f90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	3b01      	subs	r3, #1
 8000f9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fa0:	d301      	bcc.n	8000fa6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e00f      	b.n	8000fc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fa6:	4a0a      	ldr	r2, [pc, #40]	; (8000fd0 <SysTick_Config+0x40>)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	3b01      	subs	r3, #1
 8000fac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fae:	210f      	movs	r1, #15
 8000fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb4:	f7ff ff8e 	bl	8000ed4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fb8:	4b05      	ldr	r3, [pc, #20]	; (8000fd0 <SysTick_Config+0x40>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fbe:	4b04      	ldr	r3, [pc, #16]	; (8000fd0 <SysTick_Config+0x40>)
 8000fc0:	2207      	movs	r2, #7
 8000fc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fc4:	2300      	movs	r3, #0
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	e000e010 	.word	0xe000e010

08000fd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f7ff ff29 	bl	8000e34 <__NVIC_SetPriorityGrouping>
}
 8000fe2:	bf00      	nop
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fea:	b580      	push	{r7, lr}
 8000fec:	b086      	sub	sp, #24
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	60b9      	str	r1, [r7, #8]
 8000ff4:	607a      	str	r2, [r7, #4]
 8000ff6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ffc:	f7ff ff3e 	bl	8000e7c <__NVIC_GetPriorityGrouping>
 8001000:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001002:	687a      	ldr	r2, [r7, #4]
 8001004:	68b9      	ldr	r1, [r7, #8]
 8001006:	6978      	ldr	r0, [r7, #20]
 8001008:	f7ff ff8e 	bl	8000f28 <NVIC_EncodePriority>
 800100c:	4602      	mov	r2, r0
 800100e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001012:	4611      	mov	r1, r2
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff ff5d 	bl	8000ed4 <__NVIC_SetPriority>
}
 800101a:	bf00      	nop
 800101c:	3718      	adds	r7, #24
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001022:	b580      	push	{r7, lr}
 8001024:	b082      	sub	sp, #8
 8001026:	af00      	add	r7, sp, #0
 8001028:	4603      	mov	r3, r0
 800102a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800102c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff ff31 	bl	8000e98 <__NVIC_EnableIRQ>
}
 8001036:	bf00      	nop
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}

0800103e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800103e:	b580      	push	{r7, lr}
 8001040:	b082      	sub	sp, #8
 8001042:	af00      	add	r7, sp, #0
 8001044:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	f7ff ffa2 	bl	8000f90 <SysTick_Config>
 800104c:	4603      	mov	r3, r0
}
 800104e:	4618      	mov	r0, r3
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
	...

08001058 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b086      	sub	sp, #24
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001060:	2300      	movs	r3, #0
 8001062:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001064:	f7ff feb6 	bl	8000dd4 <HAL_GetTick>
 8001068:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d101      	bne.n	8001074 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001070:	2301      	movs	r3, #1
 8001072:	e099      	b.n	80011a8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2202      	movs	r2, #2
 8001078:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2200      	movs	r2, #0
 8001080:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f022 0201 	bic.w	r2, r2, #1
 8001092:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001094:	e00f      	b.n	80010b6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001096:	f7ff fe9d 	bl	8000dd4 <HAL_GetTick>
 800109a:	4602      	mov	r2, r0
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	1ad3      	subs	r3, r2, r3
 80010a0:	2b05      	cmp	r3, #5
 80010a2:	d908      	bls.n	80010b6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2220      	movs	r2, #32
 80010a8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2203      	movs	r2, #3
 80010ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80010b2:	2303      	movs	r3, #3
 80010b4:	e078      	b.n	80011a8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f003 0301 	and.w	r3, r3, #1
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d1e8      	bne.n	8001096 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80010cc:	697a      	ldr	r2, [r7, #20]
 80010ce:	4b38      	ldr	r3, [pc, #224]	; (80011b0 <HAL_DMA_Init+0x158>)
 80010d0:	4013      	ands	r3, r2
 80010d2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	685a      	ldr	r2, [r3, #4]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	689b      	ldr	r3, [r3, #8]
 80010dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	691b      	ldr	r3, [r3, #16]
 80010e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	699b      	ldr	r3, [r3, #24]
 80010f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6a1b      	ldr	r3, [r3, #32]
 8001100:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001102:	697a      	ldr	r2, [r7, #20]
 8001104:	4313      	orrs	r3, r2
 8001106:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800110c:	2b04      	cmp	r3, #4
 800110e:	d107      	bne.n	8001120 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001118:	4313      	orrs	r3, r2
 800111a:	697a      	ldr	r2, [r7, #20]
 800111c:	4313      	orrs	r3, r2
 800111e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	697a      	ldr	r2, [r7, #20]
 8001126:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	695b      	ldr	r3, [r3, #20]
 800112e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	f023 0307 	bic.w	r3, r3, #7
 8001136:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800113c:	697a      	ldr	r2, [r7, #20]
 800113e:	4313      	orrs	r3, r2
 8001140:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001146:	2b04      	cmp	r3, #4
 8001148:	d117      	bne.n	800117a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800114e:	697a      	ldr	r2, [r7, #20]
 8001150:	4313      	orrs	r3, r2
 8001152:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001158:	2b00      	cmp	r3, #0
 800115a:	d00e      	beq.n	800117a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f000 fa7b 	bl	8001658 <DMA_CheckFifoParam>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d008      	beq.n	800117a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2240      	movs	r2, #64	; 0x40
 800116c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2201      	movs	r2, #1
 8001172:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001176:	2301      	movs	r3, #1
 8001178:	e016      	b.n	80011a8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	697a      	ldr	r2, [r7, #20]
 8001180:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001182:	6878      	ldr	r0, [r7, #4]
 8001184:	f000 fa32 	bl	80015ec <DMA_CalcBaseAndBitshift>
 8001188:	4603      	mov	r3, r0
 800118a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001190:	223f      	movs	r2, #63	; 0x3f
 8001192:	409a      	lsls	r2, r3
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2200      	movs	r2, #0
 800119c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2201      	movs	r2, #1
 80011a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80011a6:	2300      	movs	r3, #0
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	3718      	adds	r7, #24
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	f010803f 	.word	0xf010803f

080011b4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011c0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80011c2:	f7ff fe07 	bl	8000dd4 <HAL_GetTick>
 80011c6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	2b02      	cmp	r3, #2
 80011d2:	d008      	beq.n	80011e6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2280      	movs	r2, #128	; 0x80
 80011d8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2200      	movs	r2, #0
 80011de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e052      	b.n	800128c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f022 0216 	bic.w	r2, r2, #22
 80011f4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	695a      	ldr	r2, [r3, #20]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001204:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120a:	2b00      	cmp	r3, #0
 800120c:	d103      	bne.n	8001216 <HAL_DMA_Abort+0x62>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001212:	2b00      	cmp	r3, #0
 8001214:	d007      	beq.n	8001226 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f022 0208 	bic.w	r2, r2, #8
 8001224:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f022 0201 	bic.w	r2, r2, #1
 8001234:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001236:	e013      	b.n	8001260 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001238:	f7ff fdcc 	bl	8000dd4 <HAL_GetTick>
 800123c:	4602      	mov	r2, r0
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	2b05      	cmp	r3, #5
 8001244:	d90c      	bls.n	8001260 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2220      	movs	r2, #32
 800124a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2203      	movs	r2, #3
 8001250:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2200      	movs	r2, #0
 8001258:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800125c:	2303      	movs	r3, #3
 800125e:	e015      	b.n	800128c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f003 0301 	and.w	r3, r3, #1
 800126a:	2b00      	cmp	r3, #0
 800126c:	d1e4      	bne.n	8001238 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001272:	223f      	movs	r2, #63	; 0x3f
 8001274:	409a      	lsls	r2, r3
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2201      	movs	r2, #1
 800127e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2200      	movs	r2, #0
 8001286:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800128a:	2300      	movs	r3, #0
}
 800128c:	4618      	mov	r0, r3
 800128e:	3710      	adds	r7, #16
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}

08001294 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	2b02      	cmp	r3, #2
 80012a6:	d004      	beq.n	80012b2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2280      	movs	r2, #128	; 0x80
 80012ac:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e00c      	b.n	80012cc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2205      	movs	r2, #5
 80012b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f022 0201 	bic.w	r2, r2, #1
 80012c8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80012ca:	2300      	movs	r3, #0
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	370c      	adds	r7, #12
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr

080012d8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b086      	sub	sp, #24
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80012e0:	2300      	movs	r3, #0
 80012e2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80012e4:	4b8e      	ldr	r3, [pc, #568]	; (8001520 <HAL_DMA_IRQHandler+0x248>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a8e      	ldr	r2, [pc, #568]	; (8001524 <HAL_DMA_IRQHandler+0x24c>)
 80012ea:	fba2 2303 	umull	r2, r3, r2, r3
 80012ee:	0a9b      	lsrs	r3, r3, #10
 80012f0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012f6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001302:	2208      	movs	r2, #8
 8001304:	409a      	lsls	r2, r3
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	4013      	ands	r3, r2
 800130a:	2b00      	cmp	r3, #0
 800130c:	d01a      	beq.n	8001344 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f003 0304 	and.w	r3, r3, #4
 8001318:	2b00      	cmp	r3, #0
 800131a:	d013      	beq.n	8001344 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f022 0204 	bic.w	r2, r2, #4
 800132a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001330:	2208      	movs	r2, #8
 8001332:	409a      	lsls	r2, r3
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800133c:	f043 0201 	orr.w	r2, r3, #1
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001348:	2201      	movs	r2, #1
 800134a:	409a      	lsls	r2, r3
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	4013      	ands	r3, r2
 8001350:	2b00      	cmp	r3, #0
 8001352:	d012      	beq.n	800137a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	695b      	ldr	r3, [r3, #20]
 800135a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800135e:	2b00      	cmp	r3, #0
 8001360:	d00b      	beq.n	800137a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001366:	2201      	movs	r2, #1
 8001368:	409a      	lsls	r2, r3
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001372:	f043 0202 	orr.w	r2, r3, #2
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800137e:	2204      	movs	r2, #4
 8001380:	409a      	lsls	r2, r3
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	4013      	ands	r3, r2
 8001386:	2b00      	cmp	r3, #0
 8001388:	d012      	beq.n	80013b0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f003 0302 	and.w	r3, r3, #2
 8001394:	2b00      	cmp	r3, #0
 8001396:	d00b      	beq.n	80013b0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800139c:	2204      	movs	r2, #4
 800139e:	409a      	lsls	r2, r3
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013a8:	f043 0204 	orr.w	r2, r3, #4
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013b4:	2210      	movs	r2, #16
 80013b6:	409a      	lsls	r2, r3
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	4013      	ands	r3, r2
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d043      	beq.n	8001448 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0308 	and.w	r3, r3, #8
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d03c      	beq.n	8001448 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013d2:	2210      	movs	r2, #16
 80013d4:	409a      	lsls	r2, r3
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d018      	beq.n	800141a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d108      	bne.n	8001408 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d024      	beq.n	8001448 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	4798      	blx	r3
 8001406:	e01f      	b.n	8001448 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800140c:	2b00      	cmp	r3, #0
 800140e:	d01b      	beq.n	8001448 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	4798      	blx	r3
 8001418:	e016      	b.n	8001448 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001424:	2b00      	cmp	r3, #0
 8001426:	d107      	bne.n	8001438 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f022 0208 	bic.w	r2, r2, #8
 8001436:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143c:	2b00      	cmp	r3, #0
 800143e:	d003      	beq.n	8001448 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800144c:	2220      	movs	r2, #32
 800144e:	409a      	lsls	r2, r3
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	4013      	ands	r3, r2
 8001454:	2b00      	cmp	r3, #0
 8001456:	f000 808f 	beq.w	8001578 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f003 0310 	and.w	r3, r3, #16
 8001464:	2b00      	cmp	r3, #0
 8001466:	f000 8087 	beq.w	8001578 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800146e:	2220      	movs	r2, #32
 8001470:	409a      	lsls	r2, r3
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800147c:	b2db      	uxtb	r3, r3
 800147e:	2b05      	cmp	r3, #5
 8001480:	d136      	bne.n	80014f0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f022 0216 	bic.w	r2, r2, #22
 8001490:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	695a      	ldr	r2, [r3, #20]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014a0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d103      	bne.n	80014b2 <HAL_DMA_IRQHandler+0x1da>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d007      	beq.n	80014c2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f022 0208 	bic.w	r2, r2, #8
 80014c0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014c6:	223f      	movs	r2, #63	; 0x3f
 80014c8:	409a      	lsls	r2, r3
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2201      	movs	r2, #1
 80014d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2200      	movs	r2, #0
 80014da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d07e      	beq.n	80015e4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	4798      	blx	r3
        }
        return;
 80014ee:	e079      	b.n	80015e4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d01d      	beq.n	800153a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001508:	2b00      	cmp	r3, #0
 800150a:	d10d      	bne.n	8001528 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001510:	2b00      	cmp	r3, #0
 8001512:	d031      	beq.n	8001578 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	4798      	blx	r3
 800151c:	e02c      	b.n	8001578 <HAL_DMA_IRQHandler+0x2a0>
 800151e:	bf00      	nop
 8001520:	20000010 	.word	0x20000010
 8001524:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800152c:	2b00      	cmp	r3, #0
 800152e:	d023      	beq.n	8001578 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	4798      	blx	r3
 8001538:	e01e      	b.n	8001578 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001544:	2b00      	cmp	r3, #0
 8001546:	d10f      	bne.n	8001568 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f022 0210 	bic.w	r2, r2, #16
 8001556:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2201      	movs	r2, #1
 800155c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2200      	movs	r2, #0
 8001564:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800156c:	2b00      	cmp	r3, #0
 800156e:	d003      	beq.n	8001578 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800157c:	2b00      	cmp	r3, #0
 800157e:	d032      	beq.n	80015e6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001584:	f003 0301 	and.w	r3, r3, #1
 8001588:	2b00      	cmp	r3, #0
 800158a:	d022      	beq.n	80015d2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2205      	movs	r2, #5
 8001590:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f022 0201 	bic.w	r2, r2, #1
 80015a2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	3301      	adds	r3, #1
 80015a8:	60bb      	str	r3, [r7, #8]
 80015aa:	697a      	ldr	r2, [r7, #20]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d307      	bcc.n	80015c0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 0301 	and.w	r3, r3, #1
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d1f2      	bne.n	80015a4 <HAL_DMA_IRQHandler+0x2cc>
 80015be:	e000      	b.n	80015c2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80015c0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2201      	movs	r2, #1
 80015c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2200      	movs	r2, #0
 80015ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d005      	beq.n	80015e6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	4798      	blx	r3
 80015e2:	e000      	b.n	80015e6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80015e4:	bf00      	nop
    }
  }
}
 80015e6:	3718      	adds	r7, #24
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}

080015ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b085      	sub	sp, #20
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	3b10      	subs	r3, #16
 80015fc:	4a14      	ldr	r2, [pc, #80]	; (8001650 <DMA_CalcBaseAndBitshift+0x64>)
 80015fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001602:	091b      	lsrs	r3, r3, #4
 8001604:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001606:	4a13      	ldr	r2, [pc, #76]	; (8001654 <DMA_CalcBaseAndBitshift+0x68>)
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	4413      	add	r3, r2
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	461a      	mov	r2, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	2b03      	cmp	r3, #3
 8001618:	d909      	bls.n	800162e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001622:	f023 0303 	bic.w	r3, r3, #3
 8001626:	1d1a      	adds	r2, r3, #4
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	659a      	str	r2, [r3, #88]	; 0x58
 800162c:	e007      	b.n	800163e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001636:	f023 0303 	bic.w	r3, r3, #3
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001642:	4618      	mov	r0, r3
 8001644:	3714      	adds	r7, #20
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	aaaaaaab 	.word	0xaaaaaaab
 8001654:	08004354 	.word	0x08004354

08001658 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001658:	b480      	push	{r7}
 800165a:	b085      	sub	sp, #20
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001660:	2300      	movs	r3, #0
 8001662:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001668:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	699b      	ldr	r3, [r3, #24]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d11f      	bne.n	80016b2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	2b03      	cmp	r3, #3
 8001676:	d856      	bhi.n	8001726 <DMA_CheckFifoParam+0xce>
 8001678:	a201      	add	r2, pc, #4	; (adr r2, 8001680 <DMA_CheckFifoParam+0x28>)
 800167a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800167e:	bf00      	nop
 8001680:	08001691 	.word	0x08001691
 8001684:	080016a3 	.word	0x080016a3
 8001688:	08001691 	.word	0x08001691
 800168c:	08001727 	.word	0x08001727
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001694:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001698:	2b00      	cmp	r3, #0
 800169a:	d046      	beq.n	800172a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80016a0:	e043      	b.n	800172a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80016aa:	d140      	bne.n	800172e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80016b0:	e03d      	b.n	800172e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	699b      	ldr	r3, [r3, #24]
 80016b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80016ba:	d121      	bne.n	8001700 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	2b03      	cmp	r3, #3
 80016c0:	d837      	bhi.n	8001732 <DMA_CheckFifoParam+0xda>
 80016c2:	a201      	add	r2, pc, #4	; (adr r2, 80016c8 <DMA_CheckFifoParam+0x70>)
 80016c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016c8:	080016d9 	.word	0x080016d9
 80016cc:	080016df 	.word	0x080016df
 80016d0:	080016d9 	.word	0x080016d9
 80016d4:	080016f1 	.word	0x080016f1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	73fb      	strb	r3, [r7, #15]
      break;
 80016dc:	e030      	b.n	8001740 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d025      	beq.n	8001736 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80016ee:	e022      	b.n	8001736 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80016f8:	d11f      	bne.n	800173a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80016fe:	e01c      	b.n	800173a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	2b02      	cmp	r3, #2
 8001704:	d903      	bls.n	800170e <DMA_CheckFifoParam+0xb6>
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	2b03      	cmp	r3, #3
 800170a:	d003      	beq.n	8001714 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800170c:	e018      	b.n	8001740 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	73fb      	strb	r3, [r7, #15]
      break;
 8001712:	e015      	b.n	8001740 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001718:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800171c:	2b00      	cmp	r3, #0
 800171e:	d00e      	beq.n	800173e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	73fb      	strb	r3, [r7, #15]
      break;
 8001724:	e00b      	b.n	800173e <DMA_CheckFifoParam+0xe6>
      break;
 8001726:	bf00      	nop
 8001728:	e00a      	b.n	8001740 <DMA_CheckFifoParam+0xe8>
      break;
 800172a:	bf00      	nop
 800172c:	e008      	b.n	8001740 <DMA_CheckFifoParam+0xe8>
      break;
 800172e:	bf00      	nop
 8001730:	e006      	b.n	8001740 <DMA_CheckFifoParam+0xe8>
      break;
 8001732:	bf00      	nop
 8001734:	e004      	b.n	8001740 <DMA_CheckFifoParam+0xe8>
      break;
 8001736:	bf00      	nop
 8001738:	e002      	b.n	8001740 <DMA_CheckFifoParam+0xe8>
      break;   
 800173a:	bf00      	nop
 800173c:	e000      	b.n	8001740 <DMA_CheckFifoParam+0xe8>
      break;
 800173e:	bf00      	nop
    }
  } 
  
  return status; 
 8001740:	7bfb      	ldrb	r3, [r7, #15]
}
 8001742:	4618      	mov	r0, r3
 8001744:	3714      	adds	r7, #20
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop

08001750 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001750:	b480      	push	{r7}
 8001752:	b089      	sub	sp, #36	; 0x24
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800175a:	2300      	movs	r3, #0
 800175c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800175e:	2300      	movs	r3, #0
 8001760:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001762:	2300      	movs	r3, #0
 8001764:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001766:	2300      	movs	r3, #0
 8001768:	61fb      	str	r3, [r7, #28]
 800176a:	e16b      	b.n	8001a44 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800176c:	2201      	movs	r2, #1
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	fa02 f303 	lsl.w	r3, r2, r3
 8001774:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	697a      	ldr	r2, [r7, #20]
 800177c:	4013      	ands	r3, r2
 800177e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001780:	693a      	ldr	r2, [r7, #16]
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	429a      	cmp	r2, r3
 8001786:	f040 815a 	bne.w	8001a3e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	f003 0303 	and.w	r3, r3, #3
 8001792:	2b01      	cmp	r3, #1
 8001794:	d005      	beq.n	80017a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d130      	bne.n	8001804 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	005b      	lsls	r3, r3, #1
 80017ac:	2203      	movs	r2, #3
 80017ae:	fa02 f303 	lsl.w	r3, r2, r3
 80017b2:	43db      	mvns	r3, r3
 80017b4:	69ba      	ldr	r2, [r7, #24]
 80017b6:	4013      	ands	r3, r2
 80017b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	68da      	ldr	r2, [r3, #12]
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	005b      	lsls	r3, r3, #1
 80017c2:	fa02 f303 	lsl.w	r3, r2, r3
 80017c6:	69ba      	ldr	r2, [r7, #24]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	69ba      	ldr	r2, [r7, #24]
 80017d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017d8:	2201      	movs	r2, #1
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	fa02 f303 	lsl.w	r3, r2, r3
 80017e0:	43db      	mvns	r3, r3
 80017e2:	69ba      	ldr	r2, [r7, #24]
 80017e4:	4013      	ands	r3, r2
 80017e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	091b      	lsrs	r3, r3, #4
 80017ee:	f003 0201 	and.w	r2, r3, #1
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	fa02 f303 	lsl.w	r3, r2, r3
 80017f8:	69ba      	ldr	r2, [r7, #24]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	69ba      	ldr	r2, [r7, #24]
 8001802:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f003 0303 	and.w	r3, r3, #3
 800180c:	2b03      	cmp	r3, #3
 800180e:	d017      	beq.n	8001840 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	2203      	movs	r2, #3
 800181c:	fa02 f303 	lsl.w	r3, r2, r3
 8001820:	43db      	mvns	r3, r3
 8001822:	69ba      	ldr	r2, [r7, #24]
 8001824:	4013      	ands	r3, r2
 8001826:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	689a      	ldr	r2, [r3, #8]
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	fa02 f303 	lsl.w	r3, r2, r3
 8001834:	69ba      	ldr	r2, [r7, #24]
 8001836:	4313      	orrs	r3, r2
 8001838:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	69ba      	ldr	r2, [r7, #24]
 800183e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f003 0303 	and.w	r3, r3, #3
 8001848:	2b02      	cmp	r3, #2
 800184a:	d123      	bne.n	8001894 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	08da      	lsrs	r2, r3, #3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	3208      	adds	r2, #8
 8001854:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001858:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	f003 0307 	and.w	r3, r3, #7
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	220f      	movs	r2, #15
 8001864:	fa02 f303 	lsl.w	r3, r2, r3
 8001868:	43db      	mvns	r3, r3
 800186a:	69ba      	ldr	r2, [r7, #24]
 800186c:	4013      	ands	r3, r2
 800186e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	691a      	ldr	r2, [r3, #16]
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	f003 0307 	and.w	r3, r3, #7
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	4313      	orrs	r3, r2
 8001884:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	08da      	lsrs	r2, r3, #3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	3208      	adds	r2, #8
 800188e:	69b9      	ldr	r1, [r7, #24]
 8001890:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	2203      	movs	r2, #3
 80018a0:	fa02 f303 	lsl.w	r3, r2, r3
 80018a4:	43db      	mvns	r3, r3
 80018a6:	69ba      	ldr	r2, [r7, #24]
 80018a8:	4013      	ands	r3, r2
 80018aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f003 0203 	and.w	r2, r3, #3
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	fa02 f303 	lsl.w	r3, r2, r3
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	4313      	orrs	r3, r2
 80018c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	69ba      	ldr	r2, [r7, #24]
 80018c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	f000 80b4 	beq.w	8001a3e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018d6:	2300      	movs	r3, #0
 80018d8:	60fb      	str	r3, [r7, #12]
 80018da:	4b60      	ldr	r3, [pc, #384]	; (8001a5c <HAL_GPIO_Init+0x30c>)
 80018dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018de:	4a5f      	ldr	r2, [pc, #380]	; (8001a5c <HAL_GPIO_Init+0x30c>)
 80018e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018e4:	6453      	str	r3, [r2, #68]	; 0x44
 80018e6:	4b5d      	ldr	r3, [pc, #372]	; (8001a5c <HAL_GPIO_Init+0x30c>)
 80018e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018ee:	60fb      	str	r3, [r7, #12]
 80018f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018f2:	4a5b      	ldr	r2, [pc, #364]	; (8001a60 <HAL_GPIO_Init+0x310>)
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	089b      	lsrs	r3, r3, #2
 80018f8:	3302      	adds	r3, #2
 80018fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	f003 0303 	and.w	r3, r3, #3
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	220f      	movs	r2, #15
 800190a:	fa02 f303 	lsl.w	r3, r2, r3
 800190e:	43db      	mvns	r3, r3
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	4013      	ands	r3, r2
 8001914:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4a52      	ldr	r2, [pc, #328]	; (8001a64 <HAL_GPIO_Init+0x314>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d02b      	beq.n	8001976 <HAL_GPIO_Init+0x226>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4a51      	ldr	r2, [pc, #324]	; (8001a68 <HAL_GPIO_Init+0x318>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d025      	beq.n	8001972 <HAL_GPIO_Init+0x222>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a50      	ldr	r2, [pc, #320]	; (8001a6c <HAL_GPIO_Init+0x31c>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d01f      	beq.n	800196e <HAL_GPIO_Init+0x21e>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4a4f      	ldr	r2, [pc, #316]	; (8001a70 <HAL_GPIO_Init+0x320>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d019      	beq.n	800196a <HAL_GPIO_Init+0x21a>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a4e      	ldr	r2, [pc, #312]	; (8001a74 <HAL_GPIO_Init+0x324>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d013      	beq.n	8001966 <HAL_GPIO_Init+0x216>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4a4d      	ldr	r2, [pc, #308]	; (8001a78 <HAL_GPIO_Init+0x328>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d00d      	beq.n	8001962 <HAL_GPIO_Init+0x212>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4a4c      	ldr	r2, [pc, #304]	; (8001a7c <HAL_GPIO_Init+0x32c>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d007      	beq.n	800195e <HAL_GPIO_Init+0x20e>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4a4b      	ldr	r2, [pc, #300]	; (8001a80 <HAL_GPIO_Init+0x330>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d101      	bne.n	800195a <HAL_GPIO_Init+0x20a>
 8001956:	2307      	movs	r3, #7
 8001958:	e00e      	b.n	8001978 <HAL_GPIO_Init+0x228>
 800195a:	2308      	movs	r3, #8
 800195c:	e00c      	b.n	8001978 <HAL_GPIO_Init+0x228>
 800195e:	2306      	movs	r3, #6
 8001960:	e00a      	b.n	8001978 <HAL_GPIO_Init+0x228>
 8001962:	2305      	movs	r3, #5
 8001964:	e008      	b.n	8001978 <HAL_GPIO_Init+0x228>
 8001966:	2304      	movs	r3, #4
 8001968:	e006      	b.n	8001978 <HAL_GPIO_Init+0x228>
 800196a:	2303      	movs	r3, #3
 800196c:	e004      	b.n	8001978 <HAL_GPIO_Init+0x228>
 800196e:	2302      	movs	r3, #2
 8001970:	e002      	b.n	8001978 <HAL_GPIO_Init+0x228>
 8001972:	2301      	movs	r3, #1
 8001974:	e000      	b.n	8001978 <HAL_GPIO_Init+0x228>
 8001976:	2300      	movs	r3, #0
 8001978:	69fa      	ldr	r2, [r7, #28]
 800197a:	f002 0203 	and.w	r2, r2, #3
 800197e:	0092      	lsls	r2, r2, #2
 8001980:	4093      	lsls	r3, r2
 8001982:	69ba      	ldr	r2, [r7, #24]
 8001984:	4313      	orrs	r3, r2
 8001986:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001988:	4935      	ldr	r1, [pc, #212]	; (8001a60 <HAL_GPIO_Init+0x310>)
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	089b      	lsrs	r3, r3, #2
 800198e:	3302      	adds	r3, #2
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001996:	4b3b      	ldr	r3, [pc, #236]	; (8001a84 <HAL_GPIO_Init+0x334>)
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	43db      	mvns	r3, r3
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	4013      	ands	r3, r2
 80019a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d003      	beq.n	80019ba <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80019b2:	69ba      	ldr	r2, [r7, #24]
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019ba:	4a32      	ldr	r2, [pc, #200]	; (8001a84 <HAL_GPIO_Init+0x334>)
 80019bc:	69bb      	ldr	r3, [r7, #24]
 80019be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019c0:	4b30      	ldr	r3, [pc, #192]	; (8001a84 <HAL_GPIO_Init+0x334>)
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	43db      	mvns	r3, r3
 80019ca:	69ba      	ldr	r2, [r7, #24]
 80019cc:	4013      	ands	r3, r2
 80019ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d003      	beq.n	80019e4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019e4:	4a27      	ldr	r2, [pc, #156]	; (8001a84 <HAL_GPIO_Init+0x334>)
 80019e6:	69bb      	ldr	r3, [r7, #24]
 80019e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019ea:	4b26      	ldr	r3, [pc, #152]	; (8001a84 <HAL_GPIO_Init+0x334>)
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	43db      	mvns	r3, r3
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	4013      	ands	r3, r2
 80019f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d003      	beq.n	8001a0e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001a06:	69ba      	ldr	r2, [r7, #24]
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a0e:	4a1d      	ldr	r2, [pc, #116]	; (8001a84 <HAL_GPIO_Init+0x334>)
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a14:	4b1b      	ldr	r3, [pc, #108]	; (8001a84 <HAL_GPIO_Init+0x334>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	69ba      	ldr	r2, [r7, #24]
 8001a20:	4013      	ands	r3, r2
 8001a22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d003      	beq.n	8001a38 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a38:	4a12      	ldr	r2, [pc, #72]	; (8001a84 <HAL_GPIO_Init+0x334>)
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	3301      	adds	r3, #1
 8001a42:	61fb      	str	r3, [r7, #28]
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	2b0f      	cmp	r3, #15
 8001a48:	f67f ae90 	bls.w	800176c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a4c:	bf00      	nop
 8001a4e:	bf00      	nop
 8001a50:	3724      	adds	r7, #36	; 0x24
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	40023800 	.word	0x40023800
 8001a60:	40013800 	.word	0x40013800
 8001a64:	40020000 	.word	0x40020000
 8001a68:	40020400 	.word	0x40020400
 8001a6c:	40020800 	.word	0x40020800
 8001a70:	40020c00 	.word	0x40020c00
 8001a74:	40021000 	.word	0x40021000
 8001a78:	40021400 	.word	0x40021400
 8001a7c:	40021800 	.word	0x40021800
 8001a80:	40021c00 	.word	0x40021c00
 8001a84:	40013c00 	.word	0x40013c00

08001a88 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	460b      	mov	r3, r1
 8001a92:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	691a      	ldr	r2, [r3, #16]
 8001a98:	887b      	ldrh	r3, [r7, #2]
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d002      	beq.n	8001aa6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	73fb      	strb	r3, [r7, #15]
 8001aa4:	e001      	b.n	8001aaa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001aaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3714      	adds	r7, #20
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr

08001ab8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	807b      	strh	r3, [r7, #2]
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ac8:	787b      	ldrb	r3, [r7, #1]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d003      	beq.n	8001ad6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ace:	887a      	ldrh	r2, [r7, #2]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ad4:	e003      	b.n	8001ade <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ad6:	887b      	ldrh	r3, [r7, #2]
 8001ad8:	041a      	lsls	r2, r3, #16
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	619a      	str	r2, [r3, #24]
}
 8001ade:	bf00      	nop
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
	...

08001aec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b086      	sub	sp, #24
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d101      	bne.n	8001afe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e267      	b.n	8001fce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0301 	and.w	r3, r3, #1
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d075      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b0a:	4b88      	ldr	r3, [pc, #544]	; (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	f003 030c 	and.w	r3, r3, #12
 8001b12:	2b04      	cmp	r3, #4
 8001b14:	d00c      	beq.n	8001b30 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b16:	4b85      	ldr	r3, [pc, #532]	; (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b1e:	2b08      	cmp	r3, #8
 8001b20:	d112      	bne.n	8001b48 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b22:	4b82      	ldr	r3, [pc, #520]	; (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b2e:	d10b      	bne.n	8001b48 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b30:	4b7e      	ldr	r3, [pc, #504]	; (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d05b      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x108>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d157      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e242      	b.n	8001fce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b50:	d106      	bne.n	8001b60 <HAL_RCC_OscConfig+0x74>
 8001b52:	4b76      	ldr	r3, [pc, #472]	; (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a75      	ldr	r2, [pc, #468]	; (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001b58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b5c:	6013      	str	r3, [r2, #0]
 8001b5e:	e01d      	b.n	8001b9c <HAL_RCC_OscConfig+0xb0>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b68:	d10c      	bne.n	8001b84 <HAL_RCC_OscConfig+0x98>
 8001b6a:	4b70      	ldr	r3, [pc, #448]	; (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a6f      	ldr	r2, [pc, #444]	; (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001b70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b74:	6013      	str	r3, [r2, #0]
 8001b76:	4b6d      	ldr	r3, [pc, #436]	; (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a6c      	ldr	r2, [pc, #432]	; (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001b7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b80:	6013      	str	r3, [r2, #0]
 8001b82:	e00b      	b.n	8001b9c <HAL_RCC_OscConfig+0xb0>
 8001b84:	4b69      	ldr	r3, [pc, #420]	; (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a68      	ldr	r2, [pc, #416]	; (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001b8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b8e:	6013      	str	r3, [r2, #0]
 8001b90:	4b66      	ldr	r3, [pc, #408]	; (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a65      	ldr	r2, [pc, #404]	; (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001b96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d013      	beq.n	8001bcc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba4:	f7ff f916 	bl	8000dd4 <HAL_GetTick>
 8001ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001baa:	e008      	b.n	8001bbe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bac:	f7ff f912 	bl	8000dd4 <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	2b64      	cmp	r3, #100	; 0x64
 8001bb8:	d901      	bls.n	8001bbe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e207      	b.n	8001fce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bbe:	4b5b      	ldr	r3, [pc, #364]	; (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d0f0      	beq.n	8001bac <HAL_RCC_OscConfig+0xc0>
 8001bca:	e014      	b.n	8001bf6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bcc:	f7ff f902 	bl	8000dd4 <HAL_GetTick>
 8001bd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bd2:	e008      	b.n	8001be6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bd4:	f7ff f8fe 	bl	8000dd4 <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	2b64      	cmp	r3, #100	; 0x64
 8001be0:	d901      	bls.n	8001be6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001be2:	2303      	movs	r3, #3
 8001be4:	e1f3      	b.n	8001fce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001be6:	4b51      	ldr	r3, [pc, #324]	; (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d1f0      	bne.n	8001bd4 <HAL_RCC_OscConfig+0xe8>
 8001bf2:	e000      	b.n	8001bf6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bf4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0302 	and.w	r3, r3, #2
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d063      	beq.n	8001cca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c02:	4b4a      	ldr	r3, [pc, #296]	; (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	f003 030c 	and.w	r3, r3, #12
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d00b      	beq.n	8001c26 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c0e:	4b47      	ldr	r3, [pc, #284]	; (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c16:	2b08      	cmp	r3, #8
 8001c18:	d11c      	bne.n	8001c54 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c1a:	4b44      	ldr	r3, [pc, #272]	; (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d116      	bne.n	8001c54 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c26:	4b41      	ldr	r3, [pc, #260]	; (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0302 	and.w	r3, r3, #2
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d005      	beq.n	8001c3e <HAL_RCC_OscConfig+0x152>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	68db      	ldr	r3, [r3, #12]
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d001      	beq.n	8001c3e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e1c7      	b.n	8001fce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c3e:	4b3b      	ldr	r3, [pc, #236]	; (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	691b      	ldr	r3, [r3, #16]
 8001c4a:	00db      	lsls	r3, r3, #3
 8001c4c:	4937      	ldr	r1, [pc, #220]	; (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c52:	e03a      	b.n	8001cca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d020      	beq.n	8001c9e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c5c:	4b34      	ldr	r3, [pc, #208]	; (8001d30 <HAL_RCC_OscConfig+0x244>)
 8001c5e:	2201      	movs	r2, #1
 8001c60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c62:	f7ff f8b7 	bl	8000dd4 <HAL_GetTick>
 8001c66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c68:	e008      	b.n	8001c7c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c6a:	f7ff f8b3 	bl	8000dd4 <HAL_GetTick>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d901      	bls.n	8001c7c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	e1a8      	b.n	8001fce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c7c:	4b2b      	ldr	r3, [pc, #172]	; (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0302 	and.w	r3, r3, #2
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d0f0      	beq.n	8001c6a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c88:	4b28      	ldr	r3, [pc, #160]	; (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	691b      	ldr	r3, [r3, #16]
 8001c94:	00db      	lsls	r3, r3, #3
 8001c96:	4925      	ldr	r1, [pc, #148]	; (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	600b      	str	r3, [r1, #0]
 8001c9c:	e015      	b.n	8001cca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c9e:	4b24      	ldr	r3, [pc, #144]	; (8001d30 <HAL_RCC_OscConfig+0x244>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca4:	f7ff f896 	bl	8000dd4 <HAL_GetTick>
 8001ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001caa:	e008      	b.n	8001cbe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cac:	f7ff f892 	bl	8000dd4 <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e187      	b.n	8001fce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cbe:	4b1b      	ldr	r3, [pc, #108]	; (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0302 	and.w	r3, r3, #2
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d1f0      	bne.n	8001cac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0308 	and.w	r3, r3, #8
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d036      	beq.n	8001d44 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	695b      	ldr	r3, [r3, #20]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d016      	beq.n	8001d0c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cde:	4b15      	ldr	r3, [pc, #84]	; (8001d34 <HAL_RCC_OscConfig+0x248>)
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ce4:	f7ff f876 	bl	8000dd4 <HAL_GetTick>
 8001ce8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cea:	e008      	b.n	8001cfe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cec:	f7ff f872 	bl	8000dd4 <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e167      	b.n	8001fce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cfe:	4b0b      	ldr	r3, [pc, #44]	; (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001d00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d0f0      	beq.n	8001cec <HAL_RCC_OscConfig+0x200>
 8001d0a:	e01b      	b.n	8001d44 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d0c:	4b09      	ldr	r3, [pc, #36]	; (8001d34 <HAL_RCC_OscConfig+0x248>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d12:	f7ff f85f 	bl	8000dd4 <HAL_GetTick>
 8001d16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d18:	e00e      	b.n	8001d38 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d1a:	f7ff f85b 	bl	8000dd4 <HAL_GetTick>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d907      	bls.n	8001d38 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	e150      	b.n	8001fce <HAL_RCC_OscConfig+0x4e2>
 8001d2c:	40023800 	.word	0x40023800
 8001d30:	42470000 	.word	0x42470000
 8001d34:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d38:	4b88      	ldr	r3, [pc, #544]	; (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001d3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d3c:	f003 0302 	and.w	r3, r3, #2
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d1ea      	bne.n	8001d1a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0304 	and.w	r3, r3, #4
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	f000 8097 	beq.w	8001e80 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d52:	2300      	movs	r3, #0
 8001d54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d56:	4b81      	ldr	r3, [pc, #516]	; (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d10f      	bne.n	8001d82 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d62:	2300      	movs	r3, #0
 8001d64:	60bb      	str	r3, [r7, #8]
 8001d66:	4b7d      	ldr	r3, [pc, #500]	; (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6a:	4a7c      	ldr	r2, [pc, #496]	; (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001d6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d70:	6413      	str	r3, [r2, #64]	; 0x40
 8001d72:	4b7a      	ldr	r3, [pc, #488]	; (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d7a:	60bb      	str	r3, [r7, #8]
 8001d7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d82:	4b77      	ldr	r3, [pc, #476]	; (8001f60 <HAL_RCC_OscConfig+0x474>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d118      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d8e:	4b74      	ldr	r3, [pc, #464]	; (8001f60 <HAL_RCC_OscConfig+0x474>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a73      	ldr	r2, [pc, #460]	; (8001f60 <HAL_RCC_OscConfig+0x474>)
 8001d94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d9a:	f7ff f81b 	bl	8000dd4 <HAL_GetTick>
 8001d9e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001da0:	e008      	b.n	8001db4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001da2:	f7ff f817 	bl	8000dd4 <HAL_GetTick>
 8001da6:	4602      	mov	r2, r0
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d901      	bls.n	8001db4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001db0:	2303      	movs	r3, #3
 8001db2:	e10c      	b.n	8001fce <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001db4:	4b6a      	ldr	r3, [pc, #424]	; (8001f60 <HAL_RCC_OscConfig+0x474>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d0f0      	beq.n	8001da2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d106      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x2ea>
 8001dc8:	4b64      	ldr	r3, [pc, #400]	; (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dcc:	4a63      	ldr	r2, [pc, #396]	; (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001dce:	f043 0301 	orr.w	r3, r3, #1
 8001dd2:	6713      	str	r3, [r2, #112]	; 0x70
 8001dd4:	e01c      	b.n	8001e10 <HAL_RCC_OscConfig+0x324>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	2b05      	cmp	r3, #5
 8001ddc:	d10c      	bne.n	8001df8 <HAL_RCC_OscConfig+0x30c>
 8001dde:	4b5f      	ldr	r3, [pc, #380]	; (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001de2:	4a5e      	ldr	r2, [pc, #376]	; (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001de4:	f043 0304 	orr.w	r3, r3, #4
 8001de8:	6713      	str	r3, [r2, #112]	; 0x70
 8001dea:	4b5c      	ldr	r3, [pc, #368]	; (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dee:	4a5b      	ldr	r2, [pc, #364]	; (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001df0:	f043 0301 	orr.w	r3, r3, #1
 8001df4:	6713      	str	r3, [r2, #112]	; 0x70
 8001df6:	e00b      	b.n	8001e10 <HAL_RCC_OscConfig+0x324>
 8001df8:	4b58      	ldr	r3, [pc, #352]	; (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dfc:	4a57      	ldr	r2, [pc, #348]	; (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001dfe:	f023 0301 	bic.w	r3, r3, #1
 8001e02:	6713      	str	r3, [r2, #112]	; 0x70
 8001e04:	4b55      	ldr	r3, [pc, #340]	; (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001e06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e08:	4a54      	ldr	r2, [pc, #336]	; (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001e0a:	f023 0304 	bic.w	r3, r3, #4
 8001e0e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d015      	beq.n	8001e44 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e18:	f7fe ffdc 	bl	8000dd4 <HAL_GetTick>
 8001e1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e1e:	e00a      	b.n	8001e36 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e20:	f7fe ffd8 	bl	8000dd4 <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e0cb      	b.n	8001fce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e36:	4b49      	ldr	r3, [pc, #292]	; (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e3a:	f003 0302 	and.w	r3, r3, #2
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d0ee      	beq.n	8001e20 <HAL_RCC_OscConfig+0x334>
 8001e42:	e014      	b.n	8001e6e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e44:	f7fe ffc6 	bl	8000dd4 <HAL_GetTick>
 8001e48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e4a:	e00a      	b.n	8001e62 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e4c:	f7fe ffc2 	bl	8000dd4 <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d901      	bls.n	8001e62 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e0b5      	b.n	8001fce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e62:	4b3e      	ldr	r3, [pc, #248]	; (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001e64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e66:	f003 0302 	and.w	r3, r3, #2
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d1ee      	bne.n	8001e4c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e6e:	7dfb      	ldrb	r3, [r7, #23]
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d105      	bne.n	8001e80 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e74:	4b39      	ldr	r3, [pc, #228]	; (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e78:	4a38      	ldr	r2, [pc, #224]	; (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001e7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e7e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	699b      	ldr	r3, [r3, #24]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	f000 80a1 	beq.w	8001fcc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e8a:	4b34      	ldr	r3, [pc, #208]	; (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	f003 030c 	and.w	r3, r3, #12
 8001e92:	2b08      	cmp	r3, #8
 8001e94:	d05c      	beq.n	8001f50 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	699b      	ldr	r3, [r3, #24]
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d141      	bne.n	8001f22 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e9e:	4b31      	ldr	r3, [pc, #196]	; (8001f64 <HAL_RCC_OscConfig+0x478>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea4:	f7fe ff96 	bl	8000dd4 <HAL_GetTick>
 8001ea8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eaa:	e008      	b.n	8001ebe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eac:	f7fe ff92 	bl	8000dd4 <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d901      	bls.n	8001ebe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e087      	b.n	8001fce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ebe:	4b27      	ldr	r3, [pc, #156]	; (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d1f0      	bne.n	8001eac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	69da      	ldr	r2, [r3, #28]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6a1b      	ldr	r3, [r3, #32]
 8001ed2:	431a      	orrs	r2, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed8:	019b      	lsls	r3, r3, #6
 8001eda:	431a      	orrs	r2, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee0:	085b      	lsrs	r3, r3, #1
 8001ee2:	3b01      	subs	r3, #1
 8001ee4:	041b      	lsls	r3, r3, #16
 8001ee6:	431a      	orrs	r2, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eec:	061b      	lsls	r3, r3, #24
 8001eee:	491b      	ldr	r1, [pc, #108]	; (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ef4:	4b1b      	ldr	r3, [pc, #108]	; (8001f64 <HAL_RCC_OscConfig+0x478>)
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001efa:	f7fe ff6b 	bl	8000dd4 <HAL_GetTick>
 8001efe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f00:	e008      	b.n	8001f14 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f02:	f7fe ff67 	bl	8000dd4 <HAL_GetTick>
 8001f06:	4602      	mov	r2, r0
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	2b02      	cmp	r3, #2
 8001f0e:	d901      	bls.n	8001f14 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001f10:	2303      	movs	r3, #3
 8001f12:	e05c      	b.n	8001fce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f14:	4b11      	ldr	r3, [pc, #68]	; (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d0f0      	beq.n	8001f02 <HAL_RCC_OscConfig+0x416>
 8001f20:	e054      	b.n	8001fcc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f22:	4b10      	ldr	r3, [pc, #64]	; (8001f64 <HAL_RCC_OscConfig+0x478>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f28:	f7fe ff54 	bl	8000dd4 <HAL_GetTick>
 8001f2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f2e:	e008      	b.n	8001f42 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f30:	f7fe ff50 	bl	8000dd4 <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e045      	b.n	8001fce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f42:	4b06      	ldr	r3, [pc, #24]	; (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d1f0      	bne.n	8001f30 <HAL_RCC_OscConfig+0x444>
 8001f4e:	e03d      	b.n	8001fcc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	699b      	ldr	r3, [r3, #24]
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d107      	bne.n	8001f68 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e038      	b.n	8001fce <HAL_RCC_OscConfig+0x4e2>
 8001f5c:	40023800 	.word	0x40023800
 8001f60:	40007000 	.word	0x40007000
 8001f64:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f68:	4b1b      	ldr	r3, [pc, #108]	; (8001fd8 <HAL_RCC_OscConfig+0x4ec>)
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	699b      	ldr	r3, [r3, #24]
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d028      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d121      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d11a      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f92:	68fa      	ldr	r2, [r7, #12]
 8001f94:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f98:	4013      	ands	r3, r2
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f9e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d111      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fae:	085b      	lsrs	r3, r3, #1
 8001fb0:	3b01      	subs	r3, #1
 8001fb2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d107      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d001      	beq.n	8001fcc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e000      	b.n	8001fce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3718      	adds	r7, #24
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	40023800 	.word	0x40023800

08001fdc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d101      	bne.n	8001ff0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e0cc      	b.n	800218a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ff0:	4b68      	ldr	r3, [pc, #416]	; (8002194 <HAL_RCC_ClockConfig+0x1b8>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0307 	and.w	r3, r3, #7
 8001ff8:	683a      	ldr	r2, [r7, #0]
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d90c      	bls.n	8002018 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ffe:	4b65      	ldr	r3, [pc, #404]	; (8002194 <HAL_RCC_ClockConfig+0x1b8>)
 8002000:	683a      	ldr	r2, [r7, #0]
 8002002:	b2d2      	uxtb	r2, r2
 8002004:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002006:	4b63      	ldr	r3, [pc, #396]	; (8002194 <HAL_RCC_ClockConfig+0x1b8>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0307 	and.w	r3, r3, #7
 800200e:	683a      	ldr	r2, [r7, #0]
 8002010:	429a      	cmp	r2, r3
 8002012:	d001      	beq.n	8002018 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e0b8      	b.n	800218a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0302 	and.w	r3, r3, #2
 8002020:	2b00      	cmp	r3, #0
 8002022:	d020      	beq.n	8002066 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0304 	and.w	r3, r3, #4
 800202c:	2b00      	cmp	r3, #0
 800202e:	d005      	beq.n	800203c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002030:	4b59      	ldr	r3, [pc, #356]	; (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	4a58      	ldr	r2, [pc, #352]	; (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 8002036:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800203a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0308 	and.w	r3, r3, #8
 8002044:	2b00      	cmp	r3, #0
 8002046:	d005      	beq.n	8002054 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002048:	4b53      	ldr	r3, [pc, #332]	; (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	4a52      	ldr	r2, [pc, #328]	; (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 800204e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002052:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002054:	4b50      	ldr	r3, [pc, #320]	; (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	494d      	ldr	r1, [pc, #308]	; (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 8002062:	4313      	orrs	r3, r2
 8002064:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0301 	and.w	r3, r3, #1
 800206e:	2b00      	cmp	r3, #0
 8002070:	d044      	beq.n	80020fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	2b01      	cmp	r3, #1
 8002078:	d107      	bne.n	800208a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800207a:	4b47      	ldr	r3, [pc, #284]	; (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d119      	bne.n	80020ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e07f      	b.n	800218a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	2b02      	cmp	r3, #2
 8002090:	d003      	beq.n	800209a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002096:	2b03      	cmp	r3, #3
 8002098:	d107      	bne.n	80020aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800209a:	4b3f      	ldr	r3, [pc, #252]	; (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d109      	bne.n	80020ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e06f      	b.n	800218a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020aa:	4b3b      	ldr	r3, [pc, #236]	; (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0302 	and.w	r3, r3, #2
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d101      	bne.n	80020ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e067      	b.n	800218a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020ba:	4b37      	ldr	r3, [pc, #220]	; (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	f023 0203 	bic.w	r2, r3, #3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	4934      	ldr	r1, [pc, #208]	; (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 80020c8:	4313      	orrs	r3, r2
 80020ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020cc:	f7fe fe82 	bl	8000dd4 <HAL_GetTick>
 80020d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020d2:	e00a      	b.n	80020ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020d4:	f7fe fe7e 	bl	8000dd4 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	f241 3288 	movw	r2, #5000	; 0x1388
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e04f      	b.n	800218a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ea:	4b2b      	ldr	r3, [pc, #172]	; (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	f003 020c 	and.w	r2, r3, #12
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d1eb      	bne.n	80020d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020fc:	4b25      	ldr	r3, [pc, #148]	; (8002194 <HAL_RCC_ClockConfig+0x1b8>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0307 	and.w	r3, r3, #7
 8002104:	683a      	ldr	r2, [r7, #0]
 8002106:	429a      	cmp	r2, r3
 8002108:	d20c      	bcs.n	8002124 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800210a:	4b22      	ldr	r3, [pc, #136]	; (8002194 <HAL_RCC_ClockConfig+0x1b8>)
 800210c:	683a      	ldr	r2, [r7, #0]
 800210e:	b2d2      	uxtb	r2, r2
 8002110:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002112:	4b20      	ldr	r3, [pc, #128]	; (8002194 <HAL_RCC_ClockConfig+0x1b8>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0307 	and.w	r3, r3, #7
 800211a:	683a      	ldr	r2, [r7, #0]
 800211c:	429a      	cmp	r2, r3
 800211e:	d001      	beq.n	8002124 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e032      	b.n	800218a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0304 	and.w	r3, r3, #4
 800212c:	2b00      	cmp	r3, #0
 800212e:	d008      	beq.n	8002142 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002130:	4b19      	ldr	r3, [pc, #100]	; (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	4916      	ldr	r1, [pc, #88]	; (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 800213e:	4313      	orrs	r3, r2
 8002140:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0308 	and.w	r3, r3, #8
 800214a:	2b00      	cmp	r3, #0
 800214c:	d009      	beq.n	8002162 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800214e:	4b12      	ldr	r3, [pc, #72]	; (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	691b      	ldr	r3, [r3, #16]
 800215a:	00db      	lsls	r3, r3, #3
 800215c:	490e      	ldr	r1, [pc, #56]	; (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 800215e:	4313      	orrs	r3, r2
 8002160:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002162:	f000 f821 	bl	80021a8 <HAL_RCC_GetSysClockFreq>
 8002166:	4602      	mov	r2, r0
 8002168:	4b0b      	ldr	r3, [pc, #44]	; (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	091b      	lsrs	r3, r3, #4
 800216e:	f003 030f 	and.w	r3, r3, #15
 8002172:	490a      	ldr	r1, [pc, #40]	; (800219c <HAL_RCC_ClockConfig+0x1c0>)
 8002174:	5ccb      	ldrb	r3, [r1, r3]
 8002176:	fa22 f303 	lsr.w	r3, r2, r3
 800217a:	4a09      	ldr	r2, [pc, #36]	; (80021a0 <HAL_RCC_ClockConfig+0x1c4>)
 800217c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800217e:	4b09      	ldr	r3, [pc, #36]	; (80021a4 <HAL_RCC_ClockConfig+0x1c8>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4618      	mov	r0, r3
 8002184:	f7fe fde2 	bl	8000d4c <HAL_InitTick>

  return HAL_OK;
 8002188:	2300      	movs	r3, #0
}
 800218a:	4618      	mov	r0, r3
 800218c:	3710      	adds	r7, #16
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	40023c00 	.word	0x40023c00
 8002198:	40023800 	.word	0x40023800
 800219c:	0800433c 	.word	0x0800433c
 80021a0:	20000010 	.word	0x20000010
 80021a4:	20000014 	.word	0x20000014

080021a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021ac:	b090      	sub	sp, #64	; 0x40
 80021ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80021b0:	2300      	movs	r3, #0
 80021b2:	637b      	str	r3, [r7, #52]	; 0x34
 80021b4:	2300      	movs	r3, #0
 80021b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021b8:	2300      	movs	r3, #0
 80021ba:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80021bc:	2300      	movs	r3, #0
 80021be:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021c0:	4b59      	ldr	r3, [pc, #356]	; (8002328 <HAL_RCC_GetSysClockFreq+0x180>)
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	f003 030c 	and.w	r3, r3, #12
 80021c8:	2b08      	cmp	r3, #8
 80021ca:	d00d      	beq.n	80021e8 <HAL_RCC_GetSysClockFreq+0x40>
 80021cc:	2b08      	cmp	r3, #8
 80021ce:	f200 80a1 	bhi.w	8002314 <HAL_RCC_GetSysClockFreq+0x16c>
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d002      	beq.n	80021dc <HAL_RCC_GetSysClockFreq+0x34>
 80021d6:	2b04      	cmp	r3, #4
 80021d8:	d003      	beq.n	80021e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80021da:	e09b      	b.n	8002314 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80021dc:	4b53      	ldr	r3, [pc, #332]	; (800232c <HAL_RCC_GetSysClockFreq+0x184>)
 80021de:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80021e0:	e09b      	b.n	800231a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80021e2:	4b53      	ldr	r3, [pc, #332]	; (8002330 <HAL_RCC_GetSysClockFreq+0x188>)
 80021e4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80021e6:	e098      	b.n	800231a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021e8:	4b4f      	ldr	r3, [pc, #316]	; (8002328 <HAL_RCC_GetSysClockFreq+0x180>)
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021f0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021f2:	4b4d      	ldr	r3, [pc, #308]	; (8002328 <HAL_RCC_GetSysClockFreq+0x180>)
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d028      	beq.n	8002250 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021fe:	4b4a      	ldr	r3, [pc, #296]	; (8002328 <HAL_RCC_GetSysClockFreq+0x180>)
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	099b      	lsrs	r3, r3, #6
 8002204:	2200      	movs	r2, #0
 8002206:	623b      	str	r3, [r7, #32]
 8002208:	627a      	str	r2, [r7, #36]	; 0x24
 800220a:	6a3b      	ldr	r3, [r7, #32]
 800220c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002210:	2100      	movs	r1, #0
 8002212:	4b47      	ldr	r3, [pc, #284]	; (8002330 <HAL_RCC_GetSysClockFreq+0x188>)
 8002214:	fb03 f201 	mul.w	r2, r3, r1
 8002218:	2300      	movs	r3, #0
 800221a:	fb00 f303 	mul.w	r3, r0, r3
 800221e:	4413      	add	r3, r2
 8002220:	4a43      	ldr	r2, [pc, #268]	; (8002330 <HAL_RCC_GetSysClockFreq+0x188>)
 8002222:	fba0 1202 	umull	r1, r2, r0, r2
 8002226:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002228:	460a      	mov	r2, r1
 800222a:	62ba      	str	r2, [r7, #40]	; 0x28
 800222c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800222e:	4413      	add	r3, r2
 8002230:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002232:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002234:	2200      	movs	r2, #0
 8002236:	61bb      	str	r3, [r7, #24]
 8002238:	61fa      	str	r2, [r7, #28]
 800223a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800223e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002242:	f7fe f815 	bl	8000270 <__aeabi_uldivmod>
 8002246:	4602      	mov	r2, r0
 8002248:	460b      	mov	r3, r1
 800224a:	4613      	mov	r3, r2
 800224c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800224e:	e053      	b.n	80022f8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002250:	4b35      	ldr	r3, [pc, #212]	; (8002328 <HAL_RCC_GetSysClockFreq+0x180>)
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	099b      	lsrs	r3, r3, #6
 8002256:	2200      	movs	r2, #0
 8002258:	613b      	str	r3, [r7, #16]
 800225a:	617a      	str	r2, [r7, #20]
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002262:	f04f 0b00 	mov.w	fp, #0
 8002266:	4652      	mov	r2, sl
 8002268:	465b      	mov	r3, fp
 800226a:	f04f 0000 	mov.w	r0, #0
 800226e:	f04f 0100 	mov.w	r1, #0
 8002272:	0159      	lsls	r1, r3, #5
 8002274:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002278:	0150      	lsls	r0, r2, #5
 800227a:	4602      	mov	r2, r0
 800227c:	460b      	mov	r3, r1
 800227e:	ebb2 080a 	subs.w	r8, r2, sl
 8002282:	eb63 090b 	sbc.w	r9, r3, fp
 8002286:	f04f 0200 	mov.w	r2, #0
 800228a:	f04f 0300 	mov.w	r3, #0
 800228e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002292:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002296:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800229a:	ebb2 0408 	subs.w	r4, r2, r8
 800229e:	eb63 0509 	sbc.w	r5, r3, r9
 80022a2:	f04f 0200 	mov.w	r2, #0
 80022a6:	f04f 0300 	mov.w	r3, #0
 80022aa:	00eb      	lsls	r3, r5, #3
 80022ac:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80022b0:	00e2      	lsls	r2, r4, #3
 80022b2:	4614      	mov	r4, r2
 80022b4:	461d      	mov	r5, r3
 80022b6:	eb14 030a 	adds.w	r3, r4, sl
 80022ba:	603b      	str	r3, [r7, #0]
 80022bc:	eb45 030b 	adc.w	r3, r5, fp
 80022c0:	607b      	str	r3, [r7, #4]
 80022c2:	f04f 0200 	mov.w	r2, #0
 80022c6:	f04f 0300 	mov.w	r3, #0
 80022ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80022ce:	4629      	mov	r1, r5
 80022d0:	028b      	lsls	r3, r1, #10
 80022d2:	4621      	mov	r1, r4
 80022d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80022d8:	4621      	mov	r1, r4
 80022da:	028a      	lsls	r2, r1, #10
 80022dc:	4610      	mov	r0, r2
 80022de:	4619      	mov	r1, r3
 80022e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022e2:	2200      	movs	r2, #0
 80022e4:	60bb      	str	r3, [r7, #8]
 80022e6:	60fa      	str	r2, [r7, #12]
 80022e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80022ec:	f7fd ffc0 	bl	8000270 <__aeabi_uldivmod>
 80022f0:	4602      	mov	r2, r0
 80022f2:	460b      	mov	r3, r1
 80022f4:	4613      	mov	r3, r2
 80022f6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80022f8:	4b0b      	ldr	r3, [pc, #44]	; (8002328 <HAL_RCC_GetSysClockFreq+0x180>)
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	0c1b      	lsrs	r3, r3, #16
 80022fe:	f003 0303 	and.w	r3, r3, #3
 8002302:	3301      	adds	r3, #1
 8002304:	005b      	lsls	r3, r3, #1
 8002306:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002308:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800230a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800230c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002310:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002312:	e002      	b.n	800231a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002314:	4b05      	ldr	r3, [pc, #20]	; (800232c <HAL_RCC_GetSysClockFreq+0x184>)
 8002316:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002318:	bf00      	nop
    }
  }
  return sysclockfreq;
 800231a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800231c:	4618      	mov	r0, r3
 800231e:	3740      	adds	r7, #64	; 0x40
 8002320:	46bd      	mov	sp, r7
 8002322:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002326:	bf00      	nop
 8002328:	40023800 	.word	0x40023800
 800232c:	00f42400 	.word	0x00f42400
 8002330:	017d7840 	.word	0x017d7840

08002334 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002338:	4b03      	ldr	r3, [pc, #12]	; (8002348 <HAL_RCC_GetHCLKFreq+0x14>)
 800233a:	681b      	ldr	r3, [r3, #0]
}
 800233c:	4618      	mov	r0, r3
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	20000010 	.word	0x20000010

0800234c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002350:	f7ff fff0 	bl	8002334 <HAL_RCC_GetHCLKFreq>
 8002354:	4602      	mov	r2, r0
 8002356:	4b05      	ldr	r3, [pc, #20]	; (800236c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	0a9b      	lsrs	r3, r3, #10
 800235c:	f003 0307 	and.w	r3, r3, #7
 8002360:	4903      	ldr	r1, [pc, #12]	; (8002370 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002362:	5ccb      	ldrb	r3, [r1, r3]
 8002364:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002368:	4618      	mov	r0, r3
 800236a:	bd80      	pop	{r7, pc}
 800236c:	40023800 	.word	0x40023800
 8002370:	0800434c 	.word	0x0800434c

08002374 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002378:	f7ff ffdc 	bl	8002334 <HAL_RCC_GetHCLKFreq>
 800237c:	4602      	mov	r2, r0
 800237e:	4b05      	ldr	r3, [pc, #20]	; (8002394 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	0b5b      	lsrs	r3, r3, #13
 8002384:	f003 0307 	and.w	r3, r3, #7
 8002388:	4903      	ldr	r1, [pc, #12]	; (8002398 <HAL_RCC_GetPCLK2Freq+0x24>)
 800238a:	5ccb      	ldrb	r3, [r1, r3]
 800238c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002390:	4618      	mov	r0, r3
 8002392:	bd80      	pop	{r7, pc}
 8002394:	40023800 	.word	0x40023800
 8002398:	0800434c 	.word	0x0800434c

0800239c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d101      	bne.n	80023ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e041      	b.n	8002432 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d106      	bne.n	80023c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2200      	movs	r2, #0
 80023be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f7fe fab6 	bl	8000934 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2202      	movs	r2, #2
 80023cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	3304      	adds	r3, #4
 80023d8:	4619      	mov	r1, r3
 80023da:	4610      	mov	r0, r2
 80023dc:	f000 f896 	bl	800250c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2201      	movs	r2, #1
 80023e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2201      	movs	r2, #1
 80023ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2201      	movs	r2, #1
 80023f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2201      	movs	r2, #1
 80023fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2201      	movs	r2, #1
 800240c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2201      	movs	r2, #1
 8002414:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2201      	movs	r2, #1
 800241c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2201      	movs	r2, #1
 8002424:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2201      	movs	r2, #1
 800242c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002430:	2300      	movs	r3, #0
}
 8002432:	4618      	mov	r0, r3
 8002434:	3708      	adds	r7, #8
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
	...

0800243c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800243c:	b480      	push	{r7}
 800243e:	b085      	sub	sp, #20
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800244a:	b2db      	uxtb	r3, r3
 800244c:	2b01      	cmp	r3, #1
 800244e:	d001      	beq.n	8002454 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e046      	b.n	80024e2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2202      	movs	r2, #2
 8002458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a23      	ldr	r2, [pc, #140]	; (80024f0 <HAL_TIM_Base_Start+0xb4>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d022      	beq.n	80024ac <HAL_TIM_Base_Start+0x70>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800246e:	d01d      	beq.n	80024ac <HAL_TIM_Base_Start+0x70>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a1f      	ldr	r2, [pc, #124]	; (80024f4 <HAL_TIM_Base_Start+0xb8>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d018      	beq.n	80024ac <HAL_TIM_Base_Start+0x70>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a1e      	ldr	r2, [pc, #120]	; (80024f8 <HAL_TIM_Base_Start+0xbc>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d013      	beq.n	80024ac <HAL_TIM_Base_Start+0x70>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a1c      	ldr	r2, [pc, #112]	; (80024fc <HAL_TIM_Base_Start+0xc0>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d00e      	beq.n	80024ac <HAL_TIM_Base_Start+0x70>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a1b      	ldr	r2, [pc, #108]	; (8002500 <HAL_TIM_Base_Start+0xc4>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d009      	beq.n	80024ac <HAL_TIM_Base_Start+0x70>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a19      	ldr	r2, [pc, #100]	; (8002504 <HAL_TIM_Base_Start+0xc8>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d004      	beq.n	80024ac <HAL_TIM_Base_Start+0x70>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a18      	ldr	r2, [pc, #96]	; (8002508 <HAL_TIM_Base_Start+0xcc>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d111      	bne.n	80024d0 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f003 0307 	and.w	r3, r3, #7
 80024b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2b06      	cmp	r3, #6
 80024bc:	d010      	beq.n	80024e0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f042 0201 	orr.w	r2, r2, #1
 80024cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024ce:	e007      	b.n	80024e0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f042 0201 	orr.w	r2, r2, #1
 80024de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80024e0:	2300      	movs	r3, #0
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3714      	adds	r7, #20
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	40010000 	.word	0x40010000
 80024f4:	40000400 	.word	0x40000400
 80024f8:	40000800 	.word	0x40000800
 80024fc:	40000c00 	.word	0x40000c00
 8002500:	40010400 	.word	0x40010400
 8002504:	40014000 	.word	0x40014000
 8002508:	40001800 	.word	0x40001800

0800250c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800250c:	b480      	push	{r7}
 800250e:	b085      	sub	sp, #20
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	4a46      	ldr	r2, [pc, #280]	; (8002638 <TIM_Base_SetConfig+0x12c>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d013      	beq.n	800254c <TIM_Base_SetConfig+0x40>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800252a:	d00f      	beq.n	800254c <TIM_Base_SetConfig+0x40>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	4a43      	ldr	r2, [pc, #268]	; (800263c <TIM_Base_SetConfig+0x130>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d00b      	beq.n	800254c <TIM_Base_SetConfig+0x40>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	4a42      	ldr	r2, [pc, #264]	; (8002640 <TIM_Base_SetConfig+0x134>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d007      	beq.n	800254c <TIM_Base_SetConfig+0x40>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	4a41      	ldr	r2, [pc, #260]	; (8002644 <TIM_Base_SetConfig+0x138>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d003      	beq.n	800254c <TIM_Base_SetConfig+0x40>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	4a40      	ldr	r2, [pc, #256]	; (8002648 <TIM_Base_SetConfig+0x13c>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d108      	bne.n	800255e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002552:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	68fa      	ldr	r2, [r7, #12]
 800255a:	4313      	orrs	r3, r2
 800255c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4a35      	ldr	r2, [pc, #212]	; (8002638 <TIM_Base_SetConfig+0x12c>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d02b      	beq.n	80025be <TIM_Base_SetConfig+0xb2>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800256c:	d027      	beq.n	80025be <TIM_Base_SetConfig+0xb2>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4a32      	ldr	r2, [pc, #200]	; (800263c <TIM_Base_SetConfig+0x130>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d023      	beq.n	80025be <TIM_Base_SetConfig+0xb2>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4a31      	ldr	r2, [pc, #196]	; (8002640 <TIM_Base_SetConfig+0x134>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d01f      	beq.n	80025be <TIM_Base_SetConfig+0xb2>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4a30      	ldr	r2, [pc, #192]	; (8002644 <TIM_Base_SetConfig+0x138>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d01b      	beq.n	80025be <TIM_Base_SetConfig+0xb2>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4a2f      	ldr	r2, [pc, #188]	; (8002648 <TIM_Base_SetConfig+0x13c>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d017      	beq.n	80025be <TIM_Base_SetConfig+0xb2>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4a2e      	ldr	r2, [pc, #184]	; (800264c <TIM_Base_SetConfig+0x140>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d013      	beq.n	80025be <TIM_Base_SetConfig+0xb2>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4a2d      	ldr	r2, [pc, #180]	; (8002650 <TIM_Base_SetConfig+0x144>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d00f      	beq.n	80025be <TIM_Base_SetConfig+0xb2>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a2c      	ldr	r2, [pc, #176]	; (8002654 <TIM_Base_SetConfig+0x148>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d00b      	beq.n	80025be <TIM_Base_SetConfig+0xb2>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4a2b      	ldr	r2, [pc, #172]	; (8002658 <TIM_Base_SetConfig+0x14c>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d007      	beq.n	80025be <TIM_Base_SetConfig+0xb2>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4a2a      	ldr	r2, [pc, #168]	; (800265c <TIM_Base_SetConfig+0x150>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d003      	beq.n	80025be <TIM_Base_SetConfig+0xb2>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4a29      	ldr	r2, [pc, #164]	; (8002660 <TIM_Base_SetConfig+0x154>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d108      	bne.n	80025d0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	68fa      	ldr	r2, [r7, #12]
 80025cc:	4313      	orrs	r3, r2
 80025ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	695b      	ldr	r3, [r3, #20]
 80025da:	4313      	orrs	r3, r2
 80025dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	68fa      	ldr	r2, [r7, #12]
 80025e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	689a      	ldr	r2, [r3, #8]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	4a10      	ldr	r2, [pc, #64]	; (8002638 <TIM_Base_SetConfig+0x12c>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d003      	beq.n	8002604 <TIM_Base_SetConfig+0xf8>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	4a12      	ldr	r2, [pc, #72]	; (8002648 <TIM_Base_SetConfig+0x13c>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d103      	bne.n	800260c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	691a      	ldr	r2, [r3, #16]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2201      	movs	r2, #1
 8002610:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	691b      	ldr	r3, [r3, #16]
 8002616:	f003 0301 	and.w	r3, r3, #1
 800261a:	2b01      	cmp	r3, #1
 800261c:	d105      	bne.n	800262a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	691b      	ldr	r3, [r3, #16]
 8002622:	f023 0201 	bic.w	r2, r3, #1
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	611a      	str	r2, [r3, #16]
  }
}
 800262a:	bf00      	nop
 800262c:	3714      	adds	r7, #20
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop
 8002638:	40010000 	.word	0x40010000
 800263c:	40000400 	.word	0x40000400
 8002640:	40000800 	.word	0x40000800
 8002644:	40000c00 	.word	0x40000c00
 8002648:	40010400 	.word	0x40010400
 800264c:	40014000 	.word	0x40014000
 8002650:	40014400 	.word	0x40014400
 8002654:	40014800 	.word	0x40014800
 8002658:	40001800 	.word	0x40001800
 800265c:	40001c00 	.word	0x40001c00
 8002660:	40002000 	.word	0x40002000

08002664 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d101      	bne.n	8002676 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e042      	b.n	80026fc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800267c:	b2db      	uxtb	r3, r3
 800267e:	2b00      	cmp	r3, #0
 8002680:	d106      	bne.n	8002690 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f7fe f974 	bl	8000978 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2224      	movs	r2, #36	; 0x24
 8002694:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	68da      	ldr	r2, [r3, #12]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80026a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	f000 fc85 	bl	8002fb8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	691a      	ldr	r2, [r3, #16]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80026bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	695a      	ldr	r2, [r3, #20]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80026cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	68da      	ldr	r2, [r3, #12]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80026dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2220      	movs	r2, #32
 80026e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2220      	movs	r2, #32
 80026f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80026fa:	2300      	movs	r3, #0
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3708      	adds	r7, #8
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}

08002704 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b0ba      	sub	sp, #232	; 0xe8
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	695b      	ldr	r3, [r3, #20]
 8002726:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800272a:	2300      	movs	r3, #0
 800272c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002730:	2300      	movs	r3, #0
 8002732:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002736:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800273a:	f003 030f 	and.w	r3, r3, #15
 800273e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002742:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002746:	2b00      	cmp	r3, #0
 8002748:	d10f      	bne.n	800276a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800274a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800274e:	f003 0320 	and.w	r3, r3, #32
 8002752:	2b00      	cmp	r3, #0
 8002754:	d009      	beq.n	800276a <HAL_UART_IRQHandler+0x66>
 8002756:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800275a:	f003 0320 	and.w	r3, r3, #32
 800275e:	2b00      	cmp	r3, #0
 8002760:	d003      	beq.n	800276a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f000 fb69 	bl	8002e3a <UART_Receive_IT>
      return;
 8002768:	e25b      	b.n	8002c22 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800276a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800276e:	2b00      	cmp	r3, #0
 8002770:	f000 80de 	beq.w	8002930 <HAL_UART_IRQHandler+0x22c>
 8002774:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002778:	f003 0301 	and.w	r3, r3, #1
 800277c:	2b00      	cmp	r3, #0
 800277e:	d106      	bne.n	800278e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002780:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002784:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002788:	2b00      	cmp	r3, #0
 800278a:	f000 80d1 	beq.w	8002930 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800278e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002792:	f003 0301 	and.w	r3, r3, #1
 8002796:	2b00      	cmp	r3, #0
 8002798:	d00b      	beq.n	80027b2 <HAL_UART_IRQHandler+0xae>
 800279a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800279e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d005      	beq.n	80027b2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027aa:	f043 0201 	orr.w	r2, r3, #1
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80027b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027b6:	f003 0304 	and.w	r3, r3, #4
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d00b      	beq.n	80027d6 <HAL_UART_IRQHandler+0xd2>
 80027be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80027c2:	f003 0301 	and.w	r3, r3, #1
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d005      	beq.n	80027d6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ce:	f043 0202 	orr.w	r2, r3, #2
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80027d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027da:	f003 0302 	and.w	r3, r3, #2
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d00b      	beq.n	80027fa <HAL_UART_IRQHandler+0xf6>
 80027e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80027e6:	f003 0301 	and.w	r3, r3, #1
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d005      	beq.n	80027fa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f2:	f043 0204 	orr.w	r2, r3, #4
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80027fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027fe:	f003 0308 	and.w	r3, r3, #8
 8002802:	2b00      	cmp	r3, #0
 8002804:	d011      	beq.n	800282a <HAL_UART_IRQHandler+0x126>
 8002806:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800280a:	f003 0320 	and.w	r3, r3, #32
 800280e:	2b00      	cmp	r3, #0
 8002810:	d105      	bne.n	800281e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002812:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	2b00      	cmp	r3, #0
 800281c:	d005      	beq.n	800282a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002822:	f043 0208 	orr.w	r2, r3, #8
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800282e:	2b00      	cmp	r3, #0
 8002830:	f000 81f2 	beq.w	8002c18 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002834:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002838:	f003 0320 	and.w	r3, r3, #32
 800283c:	2b00      	cmp	r3, #0
 800283e:	d008      	beq.n	8002852 <HAL_UART_IRQHandler+0x14e>
 8002840:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002844:	f003 0320 	and.w	r3, r3, #32
 8002848:	2b00      	cmp	r3, #0
 800284a:	d002      	beq.n	8002852 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f000 faf4 	bl	8002e3a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	695b      	ldr	r3, [r3, #20]
 8002858:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800285c:	2b40      	cmp	r3, #64	; 0x40
 800285e:	bf0c      	ite	eq
 8002860:	2301      	moveq	r3, #1
 8002862:	2300      	movne	r3, #0
 8002864:	b2db      	uxtb	r3, r3
 8002866:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800286e:	f003 0308 	and.w	r3, r3, #8
 8002872:	2b00      	cmp	r3, #0
 8002874:	d103      	bne.n	800287e <HAL_UART_IRQHandler+0x17a>
 8002876:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800287a:	2b00      	cmp	r3, #0
 800287c:	d04f      	beq.n	800291e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f000 f9fc 	bl	8002c7c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	695b      	ldr	r3, [r3, #20]
 800288a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800288e:	2b40      	cmp	r3, #64	; 0x40
 8002890:	d141      	bne.n	8002916 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	3314      	adds	r3, #20
 8002898:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800289c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80028a0:	e853 3f00 	ldrex	r3, [r3]
 80028a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80028a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80028ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	3314      	adds	r3, #20
 80028ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80028be:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80028c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80028ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80028ce:	e841 2300 	strex	r3, r2, [r1]
 80028d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80028d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d1d9      	bne.n	8002892 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d013      	beq.n	800290e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ea:	4a7e      	ldr	r2, [pc, #504]	; (8002ae4 <HAL_UART_IRQHandler+0x3e0>)
 80028ec:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028f2:	4618      	mov	r0, r3
 80028f4:	f7fe fcce 	bl	8001294 <HAL_DMA_Abort_IT>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d016      	beq.n	800292c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002902:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002908:	4610      	mov	r0, r2
 800290a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800290c:	e00e      	b.n	800292c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f000 f99e 	bl	8002c50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002914:	e00a      	b.n	800292c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f000 f99a 	bl	8002c50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800291c:	e006      	b.n	800292c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f000 f996 	bl	8002c50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800292a:	e175      	b.n	8002c18 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800292c:	bf00      	nop
    return;
 800292e:	e173      	b.n	8002c18 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002934:	2b01      	cmp	r3, #1
 8002936:	f040 814f 	bne.w	8002bd8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800293a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800293e:	f003 0310 	and.w	r3, r3, #16
 8002942:	2b00      	cmp	r3, #0
 8002944:	f000 8148 	beq.w	8002bd8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002948:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800294c:	f003 0310 	and.w	r3, r3, #16
 8002950:	2b00      	cmp	r3, #0
 8002952:	f000 8141 	beq.w	8002bd8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002956:	2300      	movs	r3, #0
 8002958:	60bb      	str	r3, [r7, #8]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	60bb      	str	r3, [r7, #8]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	60bb      	str	r3, [r7, #8]
 800296a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	695b      	ldr	r3, [r3, #20]
 8002972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002976:	2b40      	cmp	r3, #64	; 0x40
 8002978:	f040 80b6 	bne.w	8002ae8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002988:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800298c:	2b00      	cmp	r3, #0
 800298e:	f000 8145 	beq.w	8002c1c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002996:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800299a:	429a      	cmp	r2, r3
 800299c:	f080 813e 	bcs.w	8002c1c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80029a6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ac:	69db      	ldr	r3, [r3, #28]
 80029ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029b2:	f000 8088 	beq.w	8002ac6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	330c      	adds	r3, #12
 80029bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80029c4:	e853 3f00 	ldrex	r3, [r3]
 80029c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80029cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80029d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	330c      	adds	r3, #12
 80029de:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80029e2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80029e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80029ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80029f2:	e841 2300 	strex	r3, r2, [r1]
 80029f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80029fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d1d9      	bne.n	80029b6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	3314      	adds	r3, #20
 8002a08:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a0c:	e853 3f00 	ldrex	r3, [r3]
 8002a10:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002a12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a14:	f023 0301 	bic.w	r3, r3, #1
 8002a18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	3314      	adds	r3, #20
 8002a22:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002a26:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002a2a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a2c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002a2e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002a32:	e841 2300 	strex	r3, r2, [r1]
 8002a36:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002a38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d1e1      	bne.n	8002a02 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	3314      	adds	r3, #20
 8002a44:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a48:	e853 3f00 	ldrex	r3, [r3]
 8002a4c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002a4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a54:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	3314      	adds	r3, #20
 8002a5e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002a62:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002a64:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a66:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002a68:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002a6a:	e841 2300 	strex	r3, r2, [r1]
 8002a6e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002a70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d1e3      	bne.n	8002a3e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2220      	movs	r2, #32
 8002a7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	330c      	adds	r3, #12
 8002a8a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a8e:	e853 3f00 	ldrex	r3, [r3]
 8002a92:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002a94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a96:	f023 0310 	bic.w	r3, r3, #16
 8002a9a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	330c      	adds	r3, #12
 8002aa4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002aa8:	65ba      	str	r2, [r7, #88]	; 0x58
 8002aaa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002aae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002ab0:	e841 2300 	strex	r3, r2, [r1]
 8002ab4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002ab6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d1e3      	bne.n	8002a84 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f7fe fb77 	bl	80011b4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2202      	movs	r2, #2
 8002aca:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	4619      	mov	r1, r3
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f000 f8c1 	bl	8002c64 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002ae2:	e09b      	b.n	8002c1c <HAL_UART_IRQHandler+0x518>
 8002ae4:	08002d43 	.word	0x08002d43
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	f000 808e 	beq.w	8002c20 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002b04:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	f000 8089 	beq.w	8002c20 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	330c      	adds	r3, #12
 8002b14:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b18:	e853 3f00 	ldrex	r3, [r3]
 8002b1c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002b1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b20:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002b24:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	330c      	adds	r3, #12
 8002b2e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002b32:	647a      	str	r2, [r7, #68]	; 0x44
 8002b34:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b36:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002b38:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002b3a:	e841 2300 	strex	r3, r2, [r1]
 8002b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002b40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d1e3      	bne.n	8002b0e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	3314      	adds	r3, #20
 8002b4c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b50:	e853 3f00 	ldrex	r3, [r3]
 8002b54:	623b      	str	r3, [r7, #32]
   return(result);
 8002b56:	6a3b      	ldr	r3, [r7, #32]
 8002b58:	f023 0301 	bic.w	r3, r3, #1
 8002b5c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	3314      	adds	r3, #20
 8002b66:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002b6a:	633a      	str	r2, [r7, #48]	; 0x30
 8002b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b6e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002b70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b72:	e841 2300 	strex	r3, r2, [r1]
 8002b76:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d1e3      	bne.n	8002b46 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2220      	movs	r2, #32
 8002b82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	330c      	adds	r3, #12
 8002b92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	e853 3f00 	ldrex	r3, [r3]
 8002b9a:	60fb      	str	r3, [r7, #12]
   return(result);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f023 0310 	bic.w	r3, r3, #16
 8002ba2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	330c      	adds	r3, #12
 8002bac:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002bb0:	61fa      	str	r2, [r7, #28]
 8002bb2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bb4:	69b9      	ldr	r1, [r7, #24]
 8002bb6:	69fa      	ldr	r2, [r7, #28]
 8002bb8:	e841 2300 	strex	r3, r2, [r1]
 8002bbc:	617b      	str	r3, [r7, #20]
   return(result);
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d1e3      	bne.n	8002b8c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2202      	movs	r2, #2
 8002bc8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002bca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002bce:	4619      	mov	r1, r3
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f000 f847 	bl	8002c64 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002bd6:	e023      	b.n	8002c20 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002bd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d009      	beq.n	8002bf8 <HAL_UART_IRQHandler+0x4f4>
 8002be4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002be8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d003      	beq.n	8002bf8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f000 f8ba 	bl	8002d6a <UART_Transmit_IT>
    return;
 8002bf6:	e014      	b.n	8002c22 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002bf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d00e      	beq.n	8002c22 <HAL_UART_IRQHandler+0x51e>
 8002c04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d008      	beq.n	8002c22 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f000 f8fa 	bl	8002e0a <UART_EndTransmit_IT>
    return;
 8002c16:	e004      	b.n	8002c22 <HAL_UART_IRQHandler+0x51e>
    return;
 8002c18:	bf00      	nop
 8002c1a:	e002      	b.n	8002c22 <HAL_UART_IRQHandler+0x51e>
      return;
 8002c1c:	bf00      	nop
 8002c1e:	e000      	b.n	8002c22 <HAL_UART_IRQHandler+0x51e>
      return;
 8002c20:	bf00      	nop
  }
}
 8002c22:	37e8      	adds	r7, #232	; 0xe8
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002c30:	bf00      	nop
 8002c32:	370c      	adds	r7, #12
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002c44:	bf00      	nop
 8002c46:	370c      	adds	r7, #12
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr

08002c50 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002c58:	bf00      	nop
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr

08002c64 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	460b      	mov	r3, r1
 8002c6e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002c70:	bf00      	nop
 8002c72:	370c      	adds	r7, #12
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr

08002c7c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b095      	sub	sp, #84	; 0x54
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	330c      	adds	r3, #12
 8002c8a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c8e:	e853 3f00 	ldrex	r3, [r3]
 8002c92:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c96:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002c9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	330c      	adds	r3, #12
 8002ca2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ca4:	643a      	str	r2, [r7, #64]	; 0x40
 8002ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ca8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002caa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002cac:	e841 2300 	strex	r3, r2, [r1]
 8002cb0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d1e5      	bne.n	8002c84 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	3314      	adds	r3, #20
 8002cbe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cc0:	6a3b      	ldr	r3, [r7, #32]
 8002cc2:	e853 3f00 	ldrex	r3, [r3]
 8002cc6:	61fb      	str	r3, [r7, #28]
   return(result);
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	f023 0301 	bic.w	r3, r3, #1
 8002cce:	64bb      	str	r3, [r7, #72]	; 0x48
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	3314      	adds	r3, #20
 8002cd6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002cd8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002cda:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cdc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002cde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ce0:	e841 2300 	strex	r3, r2, [r1]
 8002ce4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d1e5      	bne.n	8002cb8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d119      	bne.n	8002d28 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	330c      	adds	r3, #12
 8002cfa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	e853 3f00 	ldrex	r3, [r3]
 8002d02:	60bb      	str	r3, [r7, #8]
   return(result);
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	f023 0310 	bic.w	r3, r3, #16
 8002d0a:	647b      	str	r3, [r7, #68]	; 0x44
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	330c      	adds	r3, #12
 8002d12:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002d14:	61ba      	str	r2, [r7, #24]
 8002d16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d18:	6979      	ldr	r1, [r7, #20]
 8002d1a:	69ba      	ldr	r2, [r7, #24]
 8002d1c:	e841 2300 	strex	r3, r2, [r1]
 8002d20:	613b      	str	r3, [r7, #16]
   return(result);
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d1e5      	bne.n	8002cf4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2220      	movs	r2, #32
 8002d2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002d36:	bf00      	nop
 8002d38:	3754      	adds	r7, #84	; 0x54
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr

08002d42 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002d42:	b580      	push	{r7, lr}
 8002d44:	b084      	sub	sp, #16
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d4e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2200      	movs	r2, #0
 8002d54:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002d5c:	68f8      	ldr	r0, [r7, #12]
 8002d5e:	f7ff ff77 	bl	8002c50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002d62:	bf00      	nop
 8002d64:	3710      	adds	r7, #16
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}

08002d6a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002d6a:	b480      	push	{r7}
 8002d6c:	b085      	sub	sp, #20
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	2b21      	cmp	r3, #33	; 0x21
 8002d7c:	d13e      	bne.n	8002dfc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d86:	d114      	bne.n	8002db2 <UART_Transmit_IT+0x48>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	691b      	ldr	r3, [r3, #16]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d110      	bne.n	8002db2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6a1b      	ldr	r3, [r3, #32]
 8002d94:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	881b      	ldrh	r3, [r3, #0]
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002da4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a1b      	ldr	r3, [r3, #32]
 8002daa:	1c9a      	adds	r2, r3, #2
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	621a      	str	r2, [r3, #32]
 8002db0:	e008      	b.n	8002dc4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6a1b      	ldr	r3, [r3, #32]
 8002db6:	1c59      	adds	r1, r3, #1
 8002db8:	687a      	ldr	r2, [r7, #4]
 8002dba:	6211      	str	r1, [r2, #32]
 8002dbc:	781a      	ldrb	r2, [r3, #0]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	3b01      	subs	r3, #1
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d10f      	bne.n	8002df8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	68da      	ldr	r2, [r3, #12]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002de6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	68da      	ldr	r2, [r3, #12]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002df6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	e000      	b.n	8002dfe <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002dfc:	2302      	movs	r3, #2
  }
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3714      	adds	r7, #20
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr

08002e0a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002e0a:	b580      	push	{r7, lr}
 8002e0c:	b082      	sub	sp, #8
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	68da      	ldr	r2, [r3, #12]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e20:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2220      	movs	r2, #32
 8002e26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f7ff fefc 	bl	8002c28 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002e30:	2300      	movs	r3, #0
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3708      	adds	r7, #8
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}

08002e3a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002e3a:	b580      	push	{r7, lr}
 8002e3c:	b08c      	sub	sp, #48	; 0x30
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	2b22      	cmp	r3, #34	; 0x22
 8002e4c:	f040 80ae 	bne.w	8002fac <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e58:	d117      	bne.n	8002e8a <UART_Receive_IT+0x50>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	691b      	ldr	r3, [r3, #16]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d113      	bne.n	8002e8a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002e62:	2300      	movs	r3, #0
 8002e64:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e6a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e78:	b29a      	uxth	r2, r3
 8002e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e7c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e82:	1c9a      	adds	r2, r3, #2
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	629a      	str	r2, [r3, #40]	; 0x28
 8002e88:	e026      	b.n	8002ed8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002e90:	2300      	movs	r3, #0
 8002e92:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e9c:	d007      	beq.n	8002eae <UART_Receive_IT+0x74>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d10a      	bne.n	8002ebc <UART_Receive_IT+0x82>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	691b      	ldr	r3, [r3, #16]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d106      	bne.n	8002ebc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	b2da      	uxtb	r2, r3
 8002eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eb8:	701a      	strb	r2, [r3, #0]
 8002eba:	e008      	b.n	8002ece <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ec8:	b2da      	uxtb	r2, r3
 8002eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ecc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed2:	1c5a      	adds	r2, r3, #1
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	3b01      	subs	r3, #1
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d15d      	bne.n	8002fa8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	68da      	ldr	r2, [r3, #12]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f022 0220 	bic.w	r2, r2, #32
 8002efa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	68da      	ldr	r2, [r3, #12]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f0a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	695a      	ldr	r2, [r3, #20]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f022 0201 	bic.w	r2, r2, #1
 8002f1a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2220      	movs	r2, #32
 8002f20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d135      	bne.n	8002f9e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	330c      	adds	r3, #12
 8002f3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	e853 3f00 	ldrex	r3, [r3]
 8002f46:	613b      	str	r3, [r7, #16]
   return(result);
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	f023 0310 	bic.w	r3, r3, #16
 8002f4e:	627b      	str	r3, [r7, #36]	; 0x24
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	330c      	adds	r3, #12
 8002f56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f58:	623a      	str	r2, [r7, #32]
 8002f5a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f5c:	69f9      	ldr	r1, [r7, #28]
 8002f5e:	6a3a      	ldr	r2, [r7, #32]
 8002f60:	e841 2300 	strex	r3, r2, [r1]
 8002f64:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f66:	69bb      	ldr	r3, [r7, #24]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d1e5      	bne.n	8002f38 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0310 	and.w	r3, r3, #16
 8002f76:	2b10      	cmp	r3, #16
 8002f78:	d10a      	bne.n	8002f90 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	60fb      	str	r3, [r7, #12]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	60fb      	str	r3, [r7, #12]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	60fb      	str	r3, [r7, #12]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002f94:	4619      	mov	r1, r3
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f7ff fe64 	bl	8002c64 <HAL_UARTEx_RxEventCallback>
 8002f9c:	e002      	b.n	8002fa4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f7ff fe4c 	bl	8002c3c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	e002      	b.n	8002fae <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	e000      	b.n	8002fae <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002fac:	2302      	movs	r3, #2
  }
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3730      	adds	r7, #48	; 0x30
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
	...

08002fb8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fbc:	b0c0      	sub	sp, #256	; 0x100
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	691b      	ldr	r3, [r3, #16]
 8002fcc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fd4:	68d9      	ldr	r1, [r3, #12]
 8002fd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	ea40 0301 	orr.w	r3, r0, r1
 8002fe0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002fe2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fe6:	689a      	ldr	r2, [r3, #8]
 8002fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fec:	691b      	ldr	r3, [r3, #16]
 8002fee:	431a      	orrs	r2, r3
 8002ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ff4:	695b      	ldr	r3, [r3, #20]
 8002ff6:	431a      	orrs	r2, r3
 8002ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ffc:	69db      	ldr	r3, [r3, #28]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003010:	f021 010c 	bic.w	r1, r1, #12
 8003014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800301e:	430b      	orrs	r3, r1
 8003020:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003022:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	695b      	ldr	r3, [r3, #20]
 800302a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800302e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003032:	6999      	ldr	r1, [r3, #24]
 8003034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	ea40 0301 	orr.w	r3, r0, r1
 800303e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	4b8f      	ldr	r3, [pc, #572]	; (8003284 <UART_SetConfig+0x2cc>)
 8003048:	429a      	cmp	r2, r3
 800304a:	d005      	beq.n	8003058 <UART_SetConfig+0xa0>
 800304c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	4b8d      	ldr	r3, [pc, #564]	; (8003288 <UART_SetConfig+0x2d0>)
 8003054:	429a      	cmp	r2, r3
 8003056:	d104      	bne.n	8003062 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003058:	f7ff f98c 	bl	8002374 <HAL_RCC_GetPCLK2Freq>
 800305c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003060:	e003      	b.n	800306a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003062:	f7ff f973 	bl	800234c <HAL_RCC_GetPCLK1Freq>
 8003066:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800306a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800306e:	69db      	ldr	r3, [r3, #28]
 8003070:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003074:	f040 810c 	bne.w	8003290 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003078:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800307c:	2200      	movs	r2, #0
 800307e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003082:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003086:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800308a:	4622      	mov	r2, r4
 800308c:	462b      	mov	r3, r5
 800308e:	1891      	adds	r1, r2, r2
 8003090:	65b9      	str	r1, [r7, #88]	; 0x58
 8003092:	415b      	adcs	r3, r3
 8003094:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003096:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800309a:	4621      	mov	r1, r4
 800309c:	eb12 0801 	adds.w	r8, r2, r1
 80030a0:	4629      	mov	r1, r5
 80030a2:	eb43 0901 	adc.w	r9, r3, r1
 80030a6:	f04f 0200 	mov.w	r2, #0
 80030aa:	f04f 0300 	mov.w	r3, #0
 80030ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80030b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80030b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80030ba:	4690      	mov	r8, r2
 80030bc:	4699      	mov	r9, r3
 80030be:	4623      	mov	r3, r4
 80030c0:	eb18 0303 	adds.w	r3, r8, r3
 80030c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80030c8:	462b      	mov	r3, r5
 80030ca:	eb49 0303 	adc.w	r3, r9, r3
 80030ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80030d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80030de:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80030e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80030e6:	460b      	mov	r3, r1
 80030e8:	18db      	adds	r3, r3, r3
 80030ea:	653b      	str	r3, [r7, #80]	; 0x50
 80030ec:	4613      	mov	r3, r2
 80030ee:	eb42 0303 	adc.w	r3, r2, r3
 80030f2:	657b      	str	r3, [r7, #84]	; 0x54
 80030f4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80030f8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80030fc:	f7fd f8b8 	bl	8000270 <__aeabi_uldivmod>
 8003100:	4602      	mov	r2, r0
 8003102:	460b      	mov	r3, r1
 8003104:	4b61      	ldr	r3, [pc, #388]	; (800328c <UART_SetConfig+0x2d4>)
 8003106:	fba3 2302 	umull	r2, r3, r3, r2
 800310a:	095b      	lsrs	r3, r3, #5
 800310c:	011c      	lsls	r4, r3, #4
 800310e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003112:	2200      	movs	r2, #0
 8003114:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003118:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800311c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003120:	4642      	mov	r2, r8
 8003122:	464b      	mov	r3, r9
 8003124:	1891      	adds	r1, r2, r2
 8003126:	64b9      	str	r1, [r7, #72]	; 0x48
 8003128:	415b      	adcs	r3, r3
 800312a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800312c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003130:	4641      	mov	r1, r8
 8003132:	eb12 0a01 	adds.w	sl, r2, r1
 8003136:	4649      	mov	r1, r9
 8003138:	eb43 0b01 	adc.w	fp, r3, r1
 800313c:	f04f 0200 	mov.w	r2, #0
 8003140:	f04f 0300 	mov.w	r3, #0
 8003144:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003148:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800314c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003150:	4692      	mov	sl, r2
 8003152:	469b      	mov	fp, r3
 8003154:	4643      	mov	r3, r8
 8003156:	eb1a 0303 	adds.w	r3, sl, r3
 800315a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800315e:	464b      	mov	r3, r9
 8003160:	eb4b 0303 	adc.w	r3, fp, r3
 8003164:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003174:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003178:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800317c:	460b      	mov	r3, r1
 800317e:	18db      	adds	r3, r3, r3
 8003180:	643b      	str	r3, [r7, #64]	; 0x40
 8003182:	4613      	mov	r3, r2
 8003184:	eb42 0303 	adc.w	r3, r2, r3
 8003188:	647b      	str	r3, [r7, #68]	; 0x44
 800318a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800318e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003192:	f7fd f86d 	bl	8000270 <__aeabi_uldivmod>
 8003196:	4602      	mov	r2, r0
 8003198:	460b      	mov	r3, r1
 800319a:	4611      	mov	r1, r2
 800319c:	4b3b      	ldr	r3, [pc, #236]	; (800328c <UART_SetConfig+0x2d4>)
 800319e:	fba3 2301 	umull	r2, r3, r3, r1
 80031a2:	095b      	lsrs	r3, r3, #5
 80031a4:	2264      	movs	r2, #100	; 0x64
 80031a6:	fb02 f303 	mul.w	r3, r2, r3
 80031aa:	1acb      	subs	r3, r1, r3
 80031ac:	00db      	lsls	r3, r3, #3
 80031ae:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80031b2:	4b36      	ldr	r3, [pc, #216]	; (800328c <UART_SetConfig+0x2d4>)
 80031b4:	fba3 2302 	umull	r2, r3, r3, r2
 80031b8:	095b      	lsrs	r3, r3, #5
 80031ba:	005b      	lsls	r3, r3, #1
 80031bc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80031c0:	441c      	add	r4, r3
 80031c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031c6:	2200      	movs	r2, #0
 80031c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80031cc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80031d0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80031d4:	4642      	mov	r2, r8
 80031d6:	464b      	mov	r3, r9
 80031d8:	1891      	adds	r1, r2, r2
 80031da:	63b9      	str	r1, [r7, #56]	; 0x38
 80031dc:	415b      	adcs	r3, r3
 80031de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80031e4:	4641      	mov	r1, r8
 80031e6:	1851      	adds	r1, r2, r1
 80031e8:	6339      	str	r1, [r7, #48]	; 0x30
 80031ea:	4649      	mov	r1, r9
 80031ec:	414b      	adcs	r3, r1
 80031ee:	637b      	str	r3, [r7, #52]	; 0x34
 80031f0:	f04f 0200 	mov.w	r2, #0
 80031f4:	f04f 0300 	mov.w	r3, #0
 80031f8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80031fc:	4659      	mov	r1, fp
 80031fe:	00cb      	lsls	r3, r1, #3
 8003200:	4651      	mov	r1, sl
 8003202:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003206:	4651      	mov	r1, sl
 8003208:	00ca      	lsls	r2, r1, #3
 800320a:	4610      	mov	r0, r2
 800320c:	4619      	mov	r1, r3
 800320e:	4603      	mov	r3, r0
 8003210:	4642      	mov	r2, r8
 8003212:	189b      	adds	r3, r3, r2
 8003214:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003218:	464b      	mov	r3, r9
 800321a:	460a      	mov	r2, r1
 800321c:	eb42 0303 	adc.w	r3, r2, r3
 8003220:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003230:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003234:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003238:	460b      	mov	r3, r1
 800323a:	18db      	adds	r3, r3, r3
 800323c:	62bb      	str	r3, [r7, #40]	; 0x28
 800323e:	4613      	mov	r3, r2
 8003240:	eb42 0303 	adc.w	r3, r2, r3
 8003244:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003246:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800324a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800324e:	f7fd f80f 	bl	8000270 <__aeabi_uldivmod>
 8003252:	4602      	mov	r2, r0
 8003254:	460b      	mov	r3, r1
 8003256:	4b0d      	ldr	r3, [pc, #52]	; (800328c <UART_SetConfig+0x2d4>)
 8003258:	fba3 1302 	umull	r1, r3, r3, r2
 800325c:	095b      	lsrs	r3, r3, #5
 800325e:	2164      	movs	r1, #100	; 0x64
 8003260:	fb01 f303 	mul.w	r3, r1, r3
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	00db      	lsls	r3, r3, #3
 8003268:	3332      	adds	r3, #50	; 0x32
 800326a:	4a08      	ldr	r2, [pc, #32]	; (800328c <UART_SetConfig+0x2d4>)
 800326c:	fba2 2303 	umull	r2, r3, r2, r3
 8003270:	095b      	lsrs	r3, r3, #5
 8003272:	f003 0207 	and.w	r2, r3, #7
 8003276:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4422      	add	r2, r4
 800327e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003280:	e106      	b.n	8003490 <UART_SetConfig+0x4d8>
 8003282:	bf00      	nop
 8003284:	40011000 	.word	0x40011000
 8003288:	40011400 	.word	0x40011400
 800328c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003290:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003294:	2200      	movs	r2, #0
 8003296:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800329a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800329e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80032a2:	4642      	mov	r2, r8
 80032a4:	464b      	mov	r3, r9
 80032a6:	1891      	adds	r1, r2, r2
 80032a8:	6239      	str	r1, [r7, #32]
 80032aa:	415b      	adcs	r3, r3
 80032ac:	627b      	str	r3, [r7, #36]	; 0x24
 80032ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80032b2:	4641      	mov	r1, r8
 80032b4:	1854      	adds	r4, r2, r1
 80032b6:	4649      	mov	r1, r9
 80032b8:	eb43 0501 	adc.w	r5, r3, r1
 80032bc:	f04f 0200 	mov.w	r2, #0
 80032c0:	f04f 0300 	mov.w	r3, #0
 80032c4:	00eb      	lsls	r3, r5, #3
 80032c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80032ca:	00e2      	lsls	r2, r4, #3
 80032cc:	4614      	mov	r4, r2
 80032ce:	461d      	mov	r5, r3
 80032d0:	4643      	mov	r3, r8
 80032d2:	18e3      	adds	r3, r4, r3
 80032d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80032d8:	464b      	mov	r3, r9
 80032da:	eb45 0303 	adc.w	r3, r5, r3
 80032de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80032e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80032ee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80032f2:	f04f 0200 	mov.w	r2, #0
 80032f6:	f04f 0300 	mov.w	r3, #0
 80032fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80032fe:	4629      	mov	r1, r5
 8003300:	008b      	lsls	r3, r1, #2
 8003302:	4621      	mov	r1, r4
 8003304:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003308:	4621      	mov	r1, r4
 800330a:	008a      	lsls	r2, r1, #2
 800330c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003310:	f7fc ffae 	bl	8000270 <__aeabi_uldivmod>
 8003314:	4602      	mov	r2, r0
 8003316:	460b      	mov	r3, r1
 8003318:	4b60      	ldr	r3, [pc, #384]	; (800349c <UART_SetConfig+0x4e4>)
 800331a:	fba3 2302 	umull	r2, r3, r3, r2
 800331e:	095b      	lsrs	r3, r3, #5
 8003320:	011c      	lsls	r4, r3, #4
 8003322:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003326:	2200      	movs	r2, #0
 8003328:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800332c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003330:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003334:	4642      	mov	r2, r8
 8003336:	464b      	mov	r3, r9
 8003338:	1891      	adds	r1, r2, r2
 800333a:	61b9      	str	r1, [r7, #24]
 800333c:	415b      	adcs	r3, r3
 800333e:	61fb      	str	r3, [r7, #28]
 8003340:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003344:	4641      	mov	r1, r8
 8003346:	1851      	adds	r1, r2, r1
 8003348:	6139      	str	r1, [r7, #16]
 800334a:	4649      	mov	r1, r9
 800334c:	414b      	adcs	r3, r1
 800334e:	617b      	str	r3, [r7, #20]
 8003350:	f04f 0200 	mov.w	r2, #0
 8003354:	f04f 0300 	mov.w	r3, #0
 8003358:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800335c:	4659      	mov	r1, fp
 800335e:	00cb      	lsls	r3, r1, #3
 8003360:	4651      	mov	r1, sl
 8003362:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003366:	4651      	mov	r1, sl
 8003368:	00ca      	lsls	r2, r1, #3
 800336a:	4610      	mov	r0, r2
 800336c:	4619      	mov	r1, r3
 800336e:	4603      	mov	r3, r0
 8003370:	4642      	mov	r2, r8
 8003372:	189b      	adds	r3, r3, r2
 8003374:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003378:	464b      	mov	r3, r9
 800337a:	460a      	mov	r2, r1
 800337c:	eb42 0303 	adc.w	r3, r2, r3
 8003380:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	67bb      	str	r3, [r7, #120]	; 0x78
 800338e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003390:	f04f 0200 	mov.w	r2, #0
 8003394:	f04f 0300 	mov.w	r3, #0
 8003398:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800339c:	4649      	mov	r1, r9
 800339e:	008b      	lsls	r3, r1, #2
 80033a0:	4641      	mov	r1, r8
 80033a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80033a6:	4641      	mov	r1, r8
 80033a8:	008a      	lsls	r2, r1, #2
 80033aa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80033ae:	f7fc ff5f 	bl	8000270 <__aeabi_uldivmod>
 80033b2:	4602      	mov	r2, r0
 80033b4:	460b      	mov	r3, r1
 80033b6:	4611      	mov	r1, r2
 80033b8:	4b38      	ldr	r3, [pc, #224]	; (800349c <UART_SetConfig+0x4e4>)
 80033ba:	fba3 2301 	umull	r2, r3, r3, r1
 80033be:	095b      	lsrs	r3, r3, #5
 80033c0:	2264      	movs	r2, #100	; 0x64
 80033c2:	fb02 f303 	mul.w	r3, r2, r3
 80033c6:	1acb      	subs	r3, r1, r3
 80033c8:	011b      	lsls	r3, r3, #4
 80033ca:	3332      	adds	r3, #50	; 0x32
 80033cc:	4a33      	ldr	r2, [pc, #204]	; (800349c <UART_SetConfig+0x4e4>)
 80033ce:	fba2 2303 	umull	r2, r3, r2, r3
 80033d2:	095b      	lsrs	r3, r3, #5
 80033d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033d8:	441c      	add	r4, r3
 80033da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033de:	2200      	movs	r2, #0
 80033e0:	673b      	str	r3, [r7, #112]	; 0x70
 80033e2:	677a      	str	r2, [r7, #116]	; 0x74
 80033e4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80033e8:	4642      	mov	r2, r8
 80033ea:	464b      	mov	r3, r9
 80033ec:	1891      	adds	r1, r2, r2
 80033ee:	60b9      	str	r1, [r7, #8]
 80033f0:	415b      	adcs	r3, r3
 80033f2:	60fb      	str	r3, [r7, #12]
 80033f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80033f8:	4641      	mov	r1, r8
 80033fa:	1851      	adds	r1, r2, r1
 80033fc:	6039      	str	r1, [r7, #0]
 80033fe:	4649      	mov	r1, r9
 8003400:	414b      	adcs	r3, r1
 8003402:	607b      	str	r3, [r7, #4]
 8003404:	f04f 0200 	mov.w	r2, #0
 8003408:	f04f 0300 	mov.w	r3, #0
 800340c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003410:	4659      	mov	r1, fp
 8003412:	00cb      	lsls	r3, r1, #3
 8003414:	4651      	mov	r1, sl
 8003416:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800341a:	4651      	mov	r1, sl
 800341c:	00ca      	lsls	r2, r1, #3
 800341e:	4610      	mov	r0, r2
 8003420:	4619      	mov	r1, r3
 8003422:	4603      	mov	r3, r0
 8003424:	4642      	mov	r2, r8
 8003426:	189b      	adds	r3, r3, r2
 8003428:	66bb      	str	r3, [r7, #104]	; 0x68
 800342a:	464b      	mov	r3, r9
 800342c:	460a      	mov	r2, r1
 800342e:	eb42 0303 	adc.w	r3, r2, r3
 8003432:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	663b      	str	r3, [r7, #96]	; 0x60
 800343e:	667a      	str	r2, [r7, #100]	; 0x64
 8003440:	f04f 0200 	mov.w	r2, #0
 8003444:	f04f 0300 	mov.w	r3, #0
 8003448:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800344c:	4649      	mov	r1, r9
 800344e:	008b      	lsls	r3, r1, #2
 8003450:	4641      	mov	r1, r8
 8003452:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003456:	4641      	mov	r1, r8
 8003458:	008a      	lsls	r2, r1, #2
 800345a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800345e:	f7fc ff07 	bl	8000270 <__aeabi_uldivmod>
 8003462:	4602      	mov	r2, r0
 8003464:	460b      	mov	r3, r1
 8003466:	4b0d      	ldr	r3, [pc, #52]	; (800349c <UART_SetConfig+0x4e4>)
 8003468:	fba3 1302 	umull	r1, r3, r3, r2
 800346c:	095b      	lsrs	r3, r3, #5
 800346e:	2164      	movs	r1, #100	; 0x64
 8003470:	fb01 f303 	mul.w	r3, r1, r3
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	011b      	lsls	r3, r3, #4
 8003478:	3332      	adds	r3, #50	; 0x32
 800347a:	4a08      	ldr	r2, [pc, #32]	; (800349c <UART_SetConfig+0x4e4>)
 800347c:	fba2 2303 	umull	r2, r3, r2, r3
 8003480:	095b      	lsrs	r3, r3, #5
 8003482:	f003 020f 	and.w	r2, r3, #15
 8003486:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4422      	add	r2, r4
 800348e:	609a      	str	r2, [r3, #8]
}
 8003490:	bf00      	nop
 8003492:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003496:	46bd      	mov	sp, r7
 8003498:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800349c:	51eb851f 	.word	0x51eb851f

080034a0 <std>:
 80034a0:	2300      	movs	r3, #0
 80034a2:	b510      	push	{r4, lr}
 80034a4:	4604      	mov	r4, r0
 80034a6:	e9c0 3300 	strd	r3, r3, [r0]
 80034aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80034ae:	6083      	str	r3, [r0, #8]
 80034b0:	8181      	strh	r1, [r0, #12]
 80034b2:	6643      	str	r3, [r0, #100]	; 0x64
 80034b4:	81c2      	strh	r2, [r0, #14]
 80034b6:	6183      	str	r3, [r0, #24]
 80034b8:	4619      	mov	r1, r3
 80034ba:	2208      	movs	r2, #8
 80034bc:	305c      	adds	r0, #92	; 0x5c
 80034be:	f000 f906 	bl	80036ce <memset>
 80034c2:	4b0d      	ldr	r3, [pc, #52]	; (80034f8 <std+0x58>)
 80034c4:	6263      	str	r3, [r4, #36]	; 0x24
 80034c6:	4b0d      	ldr	r3, [pc, #52]	; (80034fc <std+0x5c>)
 80034c8:	62a3      	str	r3, [r4, #40]	; 0x28
 80034ca:	4b0d      	ldr	r3, [pc, #52]	; (8003500 <std+0x60>)
 80034cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80034ce:	4b0d      	ldr	r3, [pc, #52]	; (8003504 <std+0x64>)
 80034d0:	6323      	str	r3, [r4, #48]	; 0x30
 80034d2:	4b0d      	ldr	r3, [pc, #52]	; (8003508 <std+0x68>)
 80034d4:	6224      	str	r4, [r4, #32]
 80034d6:	429c      	cmp	r4, r3
 80034d8:	d006      	beq.n	80034e8 <std+0x48>
 80034da:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80034de:	4294      	cmp	r4, r2
 80034e0:	d002      	beq.n	80034e8 <std+0x48>
 80034e2:	33d0      	adds	r3, #208	; 0xd0
 80034e4:	429c      	cmp	r4, r3
 80034e6:	d105      	bne.n	80034f4 <std+0x54>
 80034e8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80034ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80034f0:	f000 b966 	b.w	80037c0 <__retarget_lock_init_recursive>
 80034f4:	bd10      	pop	{r4, pc}
 80034f6:	bf00      	nop
 80034f8:	08003649 	.word	0x08003649
 80034fc:	0800366b 	.word	0x0800366b
 8003500:	080036a3 	.word	0x080036a3
 8003504:	080036c7 	.word	0x080036c7
 8003508:	2000018c 	.word	0x2000018c

0800350c <stdio_exit_handler>:
 800350c:	4a02      	ldr	r2, [pc, #8]	; (8003518 <stdio_exit_handler+0xc>)
 800350e:	4903      	ldr	r1, [pc, #12]	; (800351c <stdio_exit_handler+0x10>)
 8003510:	4803      	ldr	r0, [pc, #12]	; (8003520 <stdio_exit_handler+0x14>)
 8003512:	f000 b869 	b.w	80035e8 <_fwalk_sglue>
 8003516:	bf00      	nop
 8003518:	2000001c 	.word	0x2000001c
 800351c:	0800406d 	.word	0x0800406d
 8003520:	20000028 	.word	0x20000028

08003524 <cleanup_stdio>:
 8003524:	6841      	ldr	r1, [r0, #4]
 8003526:	4b0c      	ldr	r3, [pc, #48]	; (8003558 <cleanup_stdio+0x34>)
 8003528:	4299      	cmp	r1, r3
 800352a:	b510      	push	{r4, lr}
 800352c:	4604      	mov	r4, r0
 800352e:	d001      	beq.n	8003534 <cleanup_stdio+0x10>
 8003530:	f000 fd9c 	bl	800406c <_fflush_r>
 8003534:	68a1      	ldr	r1, [r4, #8]
 8003536:	4b09      	ldr	r3, [pc, #36]	; (800355c <cleanup_stdio+0x38>)
 8003538:	4299      	cmp	r1, r3
 800353a:	d002      	beq.n	8003542 <cleanup_stdio+0x1e>
 800353c:	4620      	mov	r0, r4
 800353e:	f000 fd95 	bl	800406c <_fflush_r>
 8003542:	68e1      	ldr	r1, [r4, #12]
 8003544:	4b06      	ldr	r3, [pc, #24]	; (8003560 <cleanup_stdio+0x3c>)
 8003546:	4299      	cmp	r1, r3
 8003548:	d004      	beq.n	8003554 <cleanup_stdio+0x30>
 800354a:	4620      	mov	r0, r4
 800354c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003550:	f000 bd8c 	b.w	800406c <_fflush_r>
 8003554:	bd10      	pop	{r4, pc}
 8003556:	bf00      	nop
 8003558:	2000018c 	.word	0x2000018c
 800355c:	200001f4 	.word	0x200001f4
 8003560:	2000025c 	.word	0x2000025c

08003564 <global_stdio_init.part.0>:
 8003564:	b510      	push	{r4, lr}
 8003566:	4b0b      	ldr	r3, [pc, #44]	; (8003594 <global_stdio_init.part.0+0x30>)
 8003568:	4c0b      	ldr	r4, [pc, #44]	; (8003598 <global_stdio_init.part.0+0x34>)
 800356a:	4a0c      	ldr	r2, [pc, #48]	; (800359c <global_stdio_init.part.0+0x38>)
 800356c:	601a      	str	r2, [r3, #0]
 800356e:	4620      	mov	r0, r4
 8003570:	2200      	movs	r2, #0
 8003572:	2104      	movs	r1, #4
 8003574:	f7ff ff94 	bl	80034a0 <std>
 8003578:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800357c:	2201      	movs	r2, #1
 800357e:	2109      	movs	r1, #9
 8003580:	f7ff ff8e 	bl	80034a0 <std>
 8003584:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003588:	2202      	movs	r2, #2
 800358a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800358e:	2112      	movs	r1, #18
 8003590:	f7ff bf86 	b.w	80034a0 <std>
 8003594:	200002c4 	.word	0x200002c4
 8003598:	2000018c 	.word	0x2000018c
 800359c:	0800350d 	.word	0x0800350d

080035a0 <__sfp_lock_acquire>:
 80035a0:	4801      	ldr	r0, [pc, #4]	; (80035a8 <__sfp_lock_acquire+0x8>)
 80035a2:	f000 b90e 	b.w	80037c2 <__retarget_lock_acquire_recursive>
 80035a6:	bf00      	nop
 80035a8:	200002cd 	.word	0x200002cd

080035ac <__sfp_lock_release>:
 80035ac:	4801      	ldr	r0, [pc, #4]	; (80035b4 <__sfp_lock_release+0x8>)
 80035ae:	f000 b909 	b.w	80037c4 <__retarget_lock_release_recursive>
 80035b2:	bf00      	nop
 80035b4:	200002cd 	.word	0x200002cd

080035b8 <__sinit>:
 80035b8:	b510      	push	{r4, lr}
 80035ba:	4604      	mov	r4, r0
 80035bc:	f7ff fff0 	bl	80035a0 <__sfp_lock_acquire>
 80035c0:	6a23      	ldr	r3, [r4, #32]
 80035c2:	b11b      	cbz	r3, 80035cc <__sinit+0x14>
 80035c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80035c8:	f7ff bff0 	b.w	80035ac <__sfp_lock_release>
 80035cc:	4b04      	ldr	r3, [pc, #16]	; (80035e0 <__sinit+0x28>)
 80035ce:	6223      	str	r3, [r4, #32]
 80035d0:	4b04      	ldr	r3, [pc, #16]	; (80035e4 <__sinit+0x2c>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d1f5      	bne.n	80035c4 <__sinit+0xc>
 80035d8:	f7ff ffc4 	bl	8003564 <global_stdio_init.part.0>
 80035dc:	e7f2      	b.n	80035c4 <__sinit+0xc>
 80035de:	bf00      	nop
 80035e0:	08003525 	.word	0x08003525
 80035e4:	200002c4 	.word	0x200002c4

080035e8 <_fwalk_sglue>:
 80035e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80035ec:	4607      	mov	r7, r0
 80035ee:	4688      	mov	r8, r1
 80035f0:	4614      	mov	r4, r2
 80035f2:	2600      	movs	r6, #0
 80035f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80035f8:	f1b9 0901 	subs.w	r9, r9, #1
 80035fc:	d505      	bpl.n	800360a <_fwalk_sglue+0x22>
 80035fe:	6824      	ldr	r4, [r4, #0]
 8003600:	2c00      	cmp	r4, #0
 8003602:	d1f7      	bne.n	80035f4 <_fwalk_sglue+0xc>
 8003604:	4630      	mov	r0, r6
 8003606:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800360a:	89ab      	ldrh	r3, [r5, #12]
 800360c:	2b01      	cmp	r3, #1
 800360e:	d907      	bls.n	8003620 <_fwalk_sglue+0x38>
 8003610:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003614:	3301      	adds	r3, #1
 8003616:	d003      	beq.n	8003620 <_fwalk_sglue+0x38>
 8003618:	4629      	mov	r1, r5
 800361a:	4638      	mov	r0, r7
 800361c:	47c0      	blx	r8
 800361e:	4306      	orrs	r6, r0
 8003620:	3568      	adds	r5, #104	; 0x68
 8003622:	e7e9      	b.n	80035f8 <_fwalk_sglue+0x10>

08003624 <iprintf>:
 8003624:	b40f      	push	{r0, r1, r2, r3}
 8003626:	b507      	push	{r0, r1, r2, lr}
 8003628:	4906      	ldr	r1, [pc, #24]	; (8003644 <iprintf+0x20>)
 800362a:	ab04      	add	r3, sp, #16
 800362c:	6808      	ldr	r0, [r1, #0]
 800362e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003632:	6881      	ldr	r1, [r0, #8]
 8003634:	9301      	str	r3, [sp, #4]
 8003636:	f000 f9e9 	bl	8003a0c <_vfiprintf_r>
 800363a:	b003      	add	sp, #12
 800363c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003640:	b004      	add	sp, #16
 8003642:	4770      	bx	lr
 8003644:	20000074 	.word	0x20000074

08003648 <__sread>:
 8003648:	b510      	push	{r4, lr}
 800364a:	460c      	mov	r4, r1
 800364c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003650:	f000 f868 	bl	8003724 <_read_r>
 8003654:	2800      	cmp	r0, #0
 8003656:	bfab      	itete	ge
 8003658:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800365a:	89a3      	ldrhlt	r3, [r4, #12]
 800365c:	181b      	addge	r3, r3, r0
 800365e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003662:	bfac      	ite	ge
 8003664:	6563      	strge	r3, [r4, #84]	; 0x54
 8003666:	81a3      	strhlt	r3, [r4, #12]
 8003668:	bd10      	pop	{r4, pc}

0800366a <__swrite>:
 800366a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800366e:	461f      	mov	r7, r3
 8003670:	898b      	ldrh	r3, [r1, #12]
 8003672:	05db      	lsls	r3, r3, #23
 8003674:	4605      	mov	r5, r0
 8003676:	460c      	mov	r4, r1
 8003678:	4616      	mov	r6, r2
 800367a:	d505      	bpl.n	8003688 <__swrite+0x1e>
 800367c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003680:	2302      	movs	r3, #2
 8003682:	2200      	movs	r2, #0
 8003684:	f000 f83c 	bl	8003700 <_lseek_r>
 8003688:	89a3      	ldrh	r3, [r4, #12]
 800368a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800368e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003692:	81a3      	strh	r3, [r4, #12]
 8003694:	4632      	mov	r2, r6
 8003696:	463b      	mov	r3, r7
 8003698:	4628      	mov	r0, r5
 800369a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800369e:	f000 b853 	b.w	8003748 <_write_r>

080036a2 <__sseek>:
 80036a2:	b510      	push	{r4, lr}
 80036a4:	460c      	mov	r4, r1
 80036a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036aa:	f000 f829 	bl	8003700 <_lseek_r>
 80036ae:	1c43      	adds	r3, r0, #1
 80036b0:	89a3      	ldrh	r3, [r4, #12]
 80036b2:	bf15      	itete	ne
 80036b4:	6560      	strne	r0, [r4, #84]	; 0x54
 80036b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80036ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80036be:	81a3      	strheq	r3, [r4, #12]
 80036c0:	bf18      	it	ne
 80036c2:	81a3      	strhne	r3, [r4, #12]
 80036c4:	bd10      	pop	{r4, pc}

080036c6 <__sclose>:
 80036c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036ca:	f000 b809 	b.w	80036e0 <_close_r>

080036ce <memset>:
 80036ce:	4402      	add	r2, r0
 80036d0:	4603      	mov	r3, r0
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d100      	bne.n	80036d8 <memset+0xa>
 80036d6:	4770      	bx	lr
 80036d8:	f803 1b01 	strb.w	r1, [r3], #1
 80036dc:	e7f9      	b.n	80036d2 <memset+0x4>
	...

080036e0 <_close_r>:
 80036e0:	b538      	push	{r3, r4, r5, lr}
 80036e2:	4d06      	ldr	r5, [pc, #24]	; (80036fc <_close_r+0x1c>)
 80036e4:	2300      	movs	r3, #0
 80036e6:	4604      	mov	r4, r0
 80036e8:	4608      	mov	r0, r1
 80036ea:	602b      	str	r3, [r5, #0]
 80036ec:	f7fd fa65 	bl	8000bba <_close>
 80036f0:	1c43      	adds	r3, r0, #1
 80036f2:	d102      	bne.n	80036fa <_close_r+0x1a>
 80036f4:	682b      	ldr	r3, [r5, #0]
 80036f6:	b103      	cbz	r3, 80036fa <_close_r+0x1a>
 80036f8:	6023      	str	r3, [r4, #0]
 80036fa:	bd38      	pop	{r3, r4, r5, pc}
 80036fc:	200002c8 	.word	0x200002c8

08003700 <_lseek_r>:
 8003700:	b538      	push	{r3, r4, r5, lr}
 8003702:	4d07      	ldr	r5, [pc, #28]	; (8003720 <_lseek_r+0x20>)
 8003704:	4604      	mov	r4, r0
 8003706:	4608      	mov	r0, r1
 8003708:	4611      	mov	r1, r2
 800370a:	2200      	movs	r2, #0
 800370c:	602a      	str	r2, [r5, #0]
 800370e:	461a      	mov	r2, r3
 8003710:	f7fd fa7a 	bl	8000c08 <_lseek>
 8003714:	1c43      	adds	r3, r0, #1
 8003716:	d102      	bne.n	800371e <_lseek_r+0x1e>
 8003718:	682b      	ldr	r3, [r5, #0]
 800371a:	b103      	cbz	r3, 800371e <_lseek_r+0x1e>
 800371c:	6023      	str	r3, [r4, #0]
 800371e:	bd38      	pop	{r3, r4, r5, pc}
 8003720:	200002c8 	.word	0x200002c8

08003724 <_read_r>:
 8003724:	b538      	push	{r3, r4, r5, lr}
 8003726:	4d07      	ldr	r5, [pc, #28]	; (8003744 <_read_r+0x20>)
 8003728:	4604      	mov	r4, r0
 800372a:	4608      	mov	r0, r1
 800372c:	4611      	mov	r1, r2
 800372e:	2200      	movs	r2, #0
 8003730:	602a      	str	r2, [r5, #0]
 8003732:	461a      	mov	r2, r3
 8003734:	f7fd fa08 	bl	8000b48 <_read>
 8003738:	1c43      	adds	r3, r0, #1
 800373a:	d102      	bne.n	8003742 <_read_r+0x1e>
 800373c:	682b      	ldr	r3, [r5, #0]
 800373e:	b103      	cbz	r3, 8003742 <_read_r+0x1e>
 8003740:	6023      	str	r3, [r4, #0]
 8003742:	bd38      	pop	{r3, r4, r5, pc}
 8003744:	200002c8 	.word	0x200002c8

08003748 <_write_r>:
 8003748:	b538      	push	{r3, r4, r5, lr}
 800374a:	4d07      	ldr	r5, [pc, #28]	; (8003768 <_write_r+0x20>)
 800374c:	4604      	mov	r4, r0
 800374e:	4608      	mov	r0, r1
 8003750:	4611      	mov	r1, r2
 8003752:	2200      	movs	r2, #0
 8003754:	602a      	str	r2, [r5, #0]
 8003756:	461a      	mov	r2, r3
 8003758:	f7fd fa13 	bl	8000b82 <_write>
 800375c:	1c43      	adds	r3, r0, #1
 800375e:	d102      	bne.n	8003766 <_write_r+0x1e>
 8003760:	682b      	ldr	r3, [r5, #0]
 8003762:	b103      	cbz	r3, 8003766 <_write_r+0x1e>
 8003764:	6023      	str	r3, [r4, #0]
 8003766:	bd38      	pop	{r3, r4, r5, pc}
 8003768:	200002c8 	.word	0x200002c8

0800376c <__errno>:
 800376c:	4b01      	ldr	r3, [pc, #4]	; (8003774 <__errno+0x8>)
 800376e:	6818      	ldr	r0, [r3, #0]
 8003770:	4770      	bx	lr
 8003772:	bf00      	nop
 8003774:	20000074 	.word	0x20000074

08003778 <__libc_init_array>:
 8003778:	b570      	push	{r4, r5, r6, lr}
 800377a:	4d0d      	ldr	r5, [pc, #52]	; (80037b0 <__libc_init_array+0x38>)
 800377c:	4c0d      	ldr	r4, [pc, #52]	; (80037b4 <__libc_init_array+0x3c>)
 800377e:	1b64      	subs	r4, r4, r5
 8003780:	10a4      	asrs	r4, r4, #2
 8003782:	2600      	movs	r6, #0
 8003784:	42a6      	cmp	r6, r4
 8003786:	d109      	bne.n	800379c <__libc_init_array+0x24>
 8003788:	4d0b      	ldr	r5, [pc, #44]	; (80037b8 <__libc_init_array+0x40>)
 800378a:	4c0c      	ldr	r4, [pc, #48]	; (80037bc <__libc_init_array+0x44>)
 800378c:	f000 fdc0 	bl	8004310 <_init>
 8003790:	1b64      	subs	r4, r4, r5
 8003792:	10a4      	asrs	r4, r4, #2
 8003794:	2600      	movs	r6, #0
 8003796:	42a6      	cmp	r6, r4
 8003798:	d105      	bne.n	80037a6 <__libc_init_array+0x2e>
 800379a:	bd70      	pop	{r4, r5, r6, pc}
 800379c:	f855 3b04 	ldr.w	r3, [r5], #4
 80037a0:	4798      	blx	r3
 80037a2:	3601      	adds	r6, #1
 80037a4:	e7ee      	b.n	8003784 <__libc_init_array+0xc>
 80037a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80037aa:	4798      	blx	r3
 80037ac:	3601      	adds	r6, #1
 80037ae:	e7f2      	b.n	8003796 <__libc_init_array+0x1e>
 80037b0:	08004398 	.word	0x08004398
 80037b4:	08004398 	.word	0x08004398
 80037b8:	08004398 	.word	0x08004398
 80037bc:	0800439c 	.word	0x0800439c

080037c0 <__retarget_lock_init_recursive>:
 80037c0:	4770      	bx	lr

080037c2 <__retarget_lock_acquire_recursive>:
 80037c2:	4770      	bx	lr

080037c4 <__retarget_lock_release_recursive>:
 80037c4:	4770      	bx	lr
	...

080037c8 <_free_r>:
 80037c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80037ca:	2900      	cmp	r1, #0
 80037cc:	d044      	beq.n	8003858 <_free_r+0x90>
 80037ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80037d2:	9001      	str	r0, [sp, #4]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	f1a1 0404 	sub.w	r4, r1, #4
 80037da:	bfb8      	it	lt
 80037dc:	18e4      	addlt	r4, r4, r3
 80037de:	f000 f8df 	bl	80039a0 <__malloc_lock>
 80037e2:	4a1e      	ldr	r2, [pc, #120]	; (800385c <_free_r+0x94>)
 80037e4:	9801      	ldr	r0, [sp, #4]
 80037e6:	6813      	ldr	r3, [r2, #0]
 80037e8:	b933      	cbnz	r3, 80037f8 <_free_r+0x30>
 80037ea:	6063      	str	r3, [r4, #4]
 80037ec:	6014      	str	r4, [r2, #0]
 80037ee:	b003      	add	sp, #12
 80037f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80037f4:	f000 b8da 	b.w	80039ac <__malloc_unlock>
 80037f8:	42a3      	cmp	r3, r4
 80037fa:	d908      	bls.n	800380e <_free_r+0x46>
 80037fc:	6825      	ldr	r5, [r4, #0]
 80037fe:	1961      	adds	r1, r4, r5
 8003800:	428b      	cmp	r3, r1
 8003802:	bf01      	itttt	eq
 8003804:	6819      	ldreq	r1, [r3, #0]
 8003806:	685b      	ldreq	r3, [r3, #4]
 8003808:	1949      	addeq	r1, r1, r5
 800380a:	6021      	streq	r1, [r4, #0]
 800380c:	e7ed      	b.n	80037ea <_free_r+0x22>
 800380e:	461a      	mov	r2, r3
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	b10b      	cbz	r3, 8003818 <_free_r+0x50>
 8003814:	42a3      	cmp	r3, r4
 8003816:	d9fa      	bls.n	800380e <_free_r+0x46>
 8003818:	6811      	ldr	r1, [r2, #0]
 800381a:	1855      	adds	r5, r2, r1
 800381c:	42a5      	cmp	r5, r4
 800381e:	d10b      	bne.n	8003838 <_free_r+0x70>
 8003820:	6824      	ldr	r4, [r4, #0]
 8003822:	4421      	add	r1, r4
 8003824:	1854      	adds	r4, r2, r1
 8003826:	42a3      	cmp	r3, r4
 8003828:	6011      	str	r1, [r2, #0]
 800382a:	d1e0      	bne.n	80037ee <_free_r+0x26>
 800382c:	681c      	ldr	r4, [r3, #0]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	6053      	str	r3, [r2, #4]
 8003832:	440c      	add	r4, r1
 8003834:	6014      	str	r4, [r2, #0]
 8003836:	e7da      	b.n	80037ee <_free_r+0x26>
 8003838:	d902      	bls.n	8003840 <_free_r+0x78>
 800383a:	230c      	movs	r3, #12
 800383c:	6003      	str	r3, [r0, #0]
 800383e:	e7d6      	b.n	80037ee <_free_r+0x26>
 8003840:	6825      	ldr	r5, [r4, #0]
 8003842:	1961      	adds	r1, r4, r5
 8003844:	428b      	cmp	r3, r1
 8003846:	bf04      	itt	eq
 8003848:	6819      	ldreq	r1, [r3, #0]
 800384a:	685b      	ldreq	r3, [r3, #4]
 800384c:	6063      	str	r3, [r4, #4]
 800384e:	bf04      	itt	eq
 8003850:	1949      	addeq	r1, r1, r5
 8003852:	6021      	streq	r1, [r4, #0]
 8003854:	6054      	str	r4, [r2, #4]
 8003856:	e7ca      	b.n	80037ee <_free_r+0x26>
 8003858:	b003      	add	sp, #12
 800385a:	bd30      	pop	{r4, r5, pc}
 800385c:	200002d0 	.word	0x200002d0

08003860 <sbrk_aligned>:
 8003860:	b570      	push	{r4, r5, r6, lr}
 8003862:	4e0e      	ldr	r6, [pc, #56]	; (800389c <sbrk_aligned+0x3c>)
 8003864:	460c      	mov	r4, r1
 8003866:	6831      	ldr	r1, [r6, #0]
 8003868:	4605      	mov	r5, r0
 800386a:	b911      	cbnz	r1, 8003872 <sbrk_aligned+0x12>
 800386c:	f000 fcbc 	bl	80041e8 <_sbrk_r>
 8003870:	6030      	str	r0, [r6, #0]
 8003872:	4621      	mov	r1, r4
 8003874:	4628      	mov	r0, r5
 8003876:	f000 fcb7 	bl	80041e8 <_sbrk_r>
 800387a:	1c43      	adds	r3, r0, #1
 800387c:	d00a      	beq.n	8003894 <sbrk_aligned+0x34>
 800387e:	1cc4      	adds	r4, r0, #3
 8003880:	f024 0403 	bic.w	r4, r4, #3
 8003884:	42a0      	cmp	r0, r4
 8003886:	d007      	beq.n	8003898 <sbrk_aligned+0x38>
 8003888:	1a21      	subs	r1, r4, r0
 800388a:	4628      	mov	r0, r5
 800388c:	f000 fcac 	bl	80041e8 <_sbrk_r>
 8003890:	3001      	adds	r0, #1
 8003892:	d101      	bne.n	8003898 <sbrk_aligned+0x38>
 8003894:	f04f 34ff 	mov.w	r4, #4294967295
 8003898:	4620      	mov	r0, r4
 800389a:	bd70      	pop	{r4, r5, r6, pc}
 800389c:	200002d4 	.word	0x200002d4

080038a0 <_malloc_r>:
 80038a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80038a4:	1ccd      	adds	r5, r1, #3
 80038a6:	f025 0503 	bic.w	r5, r5, #3
 80038aa:	3508      	adds	r5, #8
 80038ac:	2d0c      	cmp	r5, #12
 80038ae:	bf38      	it	cc
 80038b0:	250c      	movcc	r5, #12
 80038b2:	2d00      	cmp	r5, #0
 80038b4:	4607      	mov	r7, r0
 80038b6:	db01      	blt.n	80038bc <_malloc_r+0x1c>
 80038b8:	42a9      	cmp	r1, r5
 80038ba:	d905      	bls.n	80038c8 <_malloc_r+0x28>
 80038bc:	230c      	movs	r3, #12
 80038be:	603b      	str	r3, [r7, #0]
 80038c0:	2600      	movs	r6, #0
 80038c2:	4630      	mov	r0, r6
 80038c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80038c8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800399c <_malloc_r+0xfc>
 80038cc:	f000 f868 	bl	80039a0 <__malloc_lock>
 80038d0:	f8d8 3000 	ldr.w	r3, [r8]
 80038d4:	461c      	mov	r4, r3
 80038d6:	bb5c      	cbnz	r4, 8003930 <_malloc_r+0x90>
 80038d8:	4629      	mov	r1, r5
 80038da:	4638      	mov	r0, r7
 80038dc:	f7ff ffc0 	bl	8003860 <sbrk_aligned>
 80038e0:	1c43      	adds	r3, r0, #1
 80038e2:	4604      	mov	r4, r0
 80038e4:	d155      	bne.n	8003992 <_malloc_r+0xf2>
 80038e6:	f8d8 4000 	ldr.w	r4, [r8]
 80038ea:	4626      	mov	r6, r4
 80038ec:	2e00      	cmp	r6, #0
 80038ee:	d145      	bne.n	800397c <_malloc_r+0xdc>
 80038f0:	2c00      	cmp	r4, #0
 80038f2:	d048      	beq.n	8003986 <_malloc_r+0xe6>
 80038f4:	6823      	ldr	r3, [r4, #0]
 80038f6:	4631      	mov	r1, r6
 80038f8:	4638      	mov	r0, r7
 80038fa:	eb04 0903 	add.w	r9, r4, r3
 80038fe:	f000 fc73 	bl	80041e8 <_sbrk_r>
 8003902:	4581      	cmp	r9, r0
 8003904:	d13f      	bne.n	8003986 <_malloc_r+0xe6>
 8003906:	6821      	ldr	r1, [r4, #0]
 8003908:	1a6d      	subs	r5, r5, r1
 800390a:	4629      	mov	r1, r5
 800390c:	4638      	mov	r0, r7
 800390e:	f7ff ffa7 	bl	8003860 <sbrk_aligned>
 8003912:	3001      	adds	r0, #1
 8003914:	d037      	beq.n	8003986 <_malloc_r+0xe6>
 8003916:	6823      	ldr	r3, [r4, #0]
 8003918:	442b      	add	r3, r5
 800391a:	6023      	str	r3, [r4, #0]
 800391c:	f8d8 3000 	ldr.w	r3, [r8]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d038      	beq.n	8003996 <_malloc_r+0xf6>
 8003924:	685a      	ldr	r2, [r3, #4]
 8003926:	42a2      	cmp	r2, r4
 8003928:	d12b      	bne.n	8003982 <_malloc_r+0xe2>
 800392a:	2200      	movs	r2, #0
 800392c:	605a      	str	r2, [r3, #4]
 800392e:	e00f      	b.n	8003950 <_malloc_r+0xb0>
 8003930:	6822      	ldr	r2, [r4, #0]
 8003932:	1b52      	subs	r2, r2, r5
 8003934:	d41f      	bmi.n	8003976 <_malloc_r+0xd6>
 8003936:	2a0b      	cmp	r2, #11
 8003938:	d917      	bls.n	800396a <_malloc_r+0xca>
 800393a:	1961      	adds	r1, r4, r5
 800393c:	42a3      	cmp	r3, r4
 800393e:	6025      	str	r5, [r4, #0]
 8003940:	bf18      	it	ne
 8003942:	6059      	strne	r1, [r3, #4]
 8003944:	6863      	ldr	r3, [r4, #4]
 8003946:	bf08      	it	eq
 8003948:	f8c8 1000 	streq.w	r1, [r8]
 800394c:	5162      	str	r2, [r4, r5]
 800394e:	604b      	str	r3, [r1, #4]
 8003950:	4638      	mov	r0, r7
 8003952:	f104 060b 	add.w	r6, r4, #11
 8003956:	f000 f829 	bl	80039ac <__malloc_unlock>
 800395a:	f026 0607 	bic.w	r6, r6, #7
 800395e:	1d23      	adds	r3, r4, #4
 8003960:	1af2      	subs	r2, r6, r3
 8003962:	d0ae      	beq.n	80038c2 <_malloc_r+0x22>
 8003964:	1b9b      	subs	r3, r3, r6
 8003966:	50a3      	str	r3, [r4, r2]
 8003968:	e7ab      	b.n	80038c2 <_malloc_r+0x22>
 800396a:	42a3      	cmp	r3, r4
 800396c:	6862      	ldr	r2, [r4, #4]
 800396e:	d1dd      	bne.n	800392c <_malloc_r+0x8c>
 8003970:	f8c8 2000 	str.w	r2, [r8]
 8003974:	e7ec      	b.n	8003950 <_malloc_r+0xb0>
 8003976:	4623      	mov	r3, r4
 8003978:	6864      	ldr	r4, [r4, #4]
 800397a:	e7ac      	b.n	80038d6 <_malloc_r+0x36>
 800397c:	4634      	mov	r4, r6
 800397e:	6876      	ldr	r6, [r6, #4]
 8003980:	e7b4      	b.n	80038ec <_malloc_r+0x4c>
 8003982:	4613      	mov	r3, r2
 8003984:	e7cc      	b.n	8003920 <_malloc_r+0x80>
 8003986:	230c      	movs	r3, #12
 8003988:	603b      	str	r3, [r7, #0]
 800398a:	4638      	mov	r0, r7
 800398c:	f000 f80e 	bl	80039ac <__malloc_unlock>
 8003990:	e797      	b.n	80038c2 <_malloc_r+0x22>
 8003992:	6025      	str	r5, [r4, #0]
 8003994:	e7dc      	b.n	8003950 <_malloc_r+0xb0>
 8003996:	605b      	str	r3, [r3, #4]
 8003998:	deff      	udf	#255	; 0xff
 800399a:	bf00      	nop
 800399c:	200002d0 	.word	0x200002d0

080039a0 <__malloc_lock>:
 80039a0:	4801      	ldr	r0, [pc, #4]	; (80039a8 <__malloc_lock+0x8>)
 80039a2:	f7ff bf0e 	b.w	80037c2 <__retarget_lock_acquire_recursive>
 80039a6:	bf00      	nop
 80039a8:	200002cc 	.word	0x200002cc

080039ac <__malloc_unlock>:
 80039ac:	4801      	ldr	r0, [pc, #4]	; (80039b4 <__malloc_unlock+0x8>)
 80039ae:	f7ff bf09 	b.w	80037c4 <__retarget_lock_release_recursive>
 80039b2:	bf00      	nop
 80039b4:	200002cc 	.word	0x200002cc

080039b8 <__sfputc_r>:
 80039b8:	6893      	ldr	r3, [r2, #8]
 80039ba:	3b01      	subs	r3, #1
 80039bc:	2b00      	cmp	r3, #0
 80039be:	b410      	push	{r4}
 80039c0:	6093      	str	r3, [r2, #8]
 80039c2:	da08      	bge.n	80039d6 <__sfputc_r+0x1e>
 80039c4:	6994      	ldr	r4, [r2, #24]
 80039c6:	42a3      	cmp	r3, r4
 80039c8:	db01      	blt.n	80039ce <__sfputc_r+0x16>
 80039ca:	290a      	cmp	r1, #10
 80039cc:	d103      	bne.n	80039d6 <__sfputc_r+0x1e>
 80039ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80039d2:	f000 bb73 	b.w	80040bc <__swbuf_r>
 80039d6:	6813      	ldr	r3, [r2, #0]
 80039d8:	1c58      	adds	r0, r3, #1
 80039da:	6010      	str	r0, [r2, #0]
 80039dc:	7019      	strb	r1, [r3, #0]
 80039de:	4608      	mov	r0, r1
 80039e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80039e4:	4770      	bx	lr

080039e6 <__sfputs_r>:
 80039e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039e8:	4606      	mov	r6, r0
 80039ea:	460f      	mov	r7, r1
 80039ec:	4614      	mov	r4, r2
 80039ee:	18d5      	adds	r5, r2, r3
 80039f0:	42ac      	cmp	r4, r5
 80039f2:	d101      	bne.n	80039f8 <__sfputs_r+0x12>
 80039f4:	2000      	movs	r0, #0
 80039f6:	e007      	b.n	8003a08 <__sfputs_r+0x22>
 80039f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80039fc:	463a      	mov	r2, r7
 80039fe:	4630      	mov	r0, r6
 8003a00:	f7ff ffda 	bl	80039b8 <__sfputc_r>
 8003a04:	1c43      	adds	r3, r0, #1
 8003a06:	d1f3      	bne.n	80039f0 <__sfputs_r+0xa>
 8003a08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003a0c <_vfiprintf_r>:
 8003a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a10:	460d      	mov	r5, r1
 8003a12:	b09d      	sub	sp, #116	; 0x74
 8003a14:	4614      	mov	r4, r2
 8003a16:	4698      	mov	r8, r3
 8003a18:	4606      	mov	r6, r0
 8003a1a:	b118      	cbz	r0, 8003a24 <_vfiprintf_r+0x18>
 8003a1c:	6a03      	ldr	r3, [r0, #32]
 8003a1e:	b90b      	cbnz	r3, 8003a24 <_vfiprintf_r+0x18>
 8003a20:	f7ff fdca 	bl	80035b8 <__sinit>
 8003a24:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003a26:	07d9      	lsls	r1, r3, #31
 8003a28:	d405      	bmi.n	8003a36 <_vfiprintf_r+0x2a>
 8003a2a:	89ab      	ldrh	r3, [r5, #12]
 8003a2c:	059a      	lsls	r2, r3, #22
 8003a2e:	d402      	bmi.n	8003a36 <_vfiprintf_r+0x2a>
 8003a30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003a32:	f7ff fec6 	bl	80037c2 <__retarget_lock_acquire_recursive>
 8003a36:	89ab      	ldrh	r3, [r5, #12]
 8003a38:	071b      	lsls	r3, r3, #28
 8003a3a:	d501      	bpl.n	8003a40 <_vfiprintf_r+0x34>
 8003a3c:	692b      	ldr	r3, [r5, #16]
 8003a3e:	b99b      	cbnz	r3, 8003a68 <_vfiprintf_r+0x5c>
 8003a40:	4629      	mov	r1, r5
 8003a42:	4630      	mov	r0, r6
 8003a44:	f000 fb78 	bl	8004138 <__swsetup_r>
 8003a48:	b170      	cbz	r0, 8003a68 <_vfiprintf_r+0x5c>
 8003a4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003a4c:	07dc      	lsls	r4, r3, #31
 8003a4e:	d504      	bpl.n	8003a5a <_vfiprintf_r+0x4e>
 8003a50:	f04f 30ff 	mov.w	r0, #4294967295
 8003a54:	b01d      	add	sp, #116	; 0x74
 8003a56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a5a:	89ab      	ldrh	r3, [r5, #12]
 8003a5c:	0598      	lsls	r0, r3, #22
 8003a5e:	d4f7      	bmi.n	8003a50 <_vfiprintf_r+0x44>
 8003a60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003a62:	f7ff feaf 	bl	80037c4 <__retarget_lock_release_recursive>
 8003a66:	e7f3      	b.n	8003a50 <_vfiprintf_r+0x44>
 8003a68:	2300      	movs	r3, #0
 8003a6a:	9309      	str	r3, [sp, #36]	; 0x24
 8003a6c:	2320      	movs	r3, #32
 8003a6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003a72:	f8cd 800c 	str.w	r8, [sp, #12]
 8003a76:	2330      	movs	r3, #48	; 0x30
 8003a78:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8003c2c <_vfiprintf_r+0x220>
 8003a7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003a80:	f04f 0901 	mov.w	r9, #1
 8003a84:	4623      	mov	r3, r4
 8003a86:	469a      	mov	sl, r3
 8003a88:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003a8c:	b10a      	cbz	r2, 8003a92 <_vfiprintf_r+0x86>
 8003a8e:	2a25      	cmp	r2, #37	; 0x25
 8003a90:	d1f9      	bne.n	8003a86 <_vfiprintf_r+0x7a>
 8003a92:	ebba 0b04 	subs.w	fp, sl, r4
 8003a96:	d00b      	beq.n	8003ab0 <_vfiprintf_r+0xa4>
 8003a98:	465b      	mov	r3, fp
 8003a9a:	4622      	mov	r2, r4
 8003a9c:	4629      	mov	r1, r5
 8003a9e:	4630      	mov	r0, r6
 8003aa0:	f7ff ffa1 	bl	80039e6 <__sfputs_r>
 8003aa4:	3001      	adds	r0, #1
 8003aa6:	f000 80a9 	beq.w	8003bfc <_vfiprintf_r+0x1f0>
 8003aaa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003aac:	445a      	add	r2, fp
 8003aae:	9209      	str	r2, [sp, #36]	; 0x24
 8003ab0:	f89a 3000 	ldrb.w	r3, [sl]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	f000 80a1 	beq.w	8003bfc <_vfiprintf_r+0x1f0>
 8003aba:	2300      	movs	r3, #0
 8003abc:	f04f 32ff 	mov.w	r2, #4294967295
 8003ac0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003ac4:	f10a 0a01 	add.w	sl, sl, #1
 8003ac8:	9304      	str	r3, [sp, #16]
 8003aca:	9307      	str	r3, [sp, #28]
 8003acc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003ad0:	931a      	str	r3, [sp, #104]	; 0x68
 8003ad2:	4654      	mov	r4, sl
 8003ad4:	2205      	movs	r2, #5
 8003ad6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ada:	4854      	ldr	r0, [pc, #336]	; (8003c2c <_vfiprintf_r+0x220>)
 8003adc:	f7fc fb78 	bl	80001d0 <memchr>
 8003ae0:	9a04      	ldr	r2, [sp, #16]
 8003ae2:	b9d8      	cbnz	r0, 8003b1c <_vfiprintf_r+0x110>
 8003ae4:	06d1      	lsls	r1, r2, #27
 8003ae6:	bf44      	itt	mi
 8003ae8:	2320      	movmi	r3, #32
 8003aea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003aee:	0713      	lsls	r3, r2, #28
 8003af0:	bf44      	itt	mi
 8003af2:	232b      	movmi	r3, #43	; 0x2b
 8003af4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003af8:	f89a 3000 	ldrb.w	r3, [sl]
 8003afc:	2b2a      	cmp	r3, #42	; 0x2a
 8003afe:	d015      	beq.n	8003b2c <_vfiprintf_r+0x120>
 8003b00:	9a07      	ldr	r2, [sp, #28]
 8003b02:	4654      	mov	r4, sl
 8003b04:	2000      	movs	r0, #0
 8003b06:	f04f 0c0a 	mov.w	ip, #10
 8003b0a:	4621      	mov	r1, r4
 8003b0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003b10:	3b30      	subs	r3, #48	; 0x30
 8003b12:	2b09      	cmp	r3, #9
 8003b14:	d94d      	bls.n	8003bb2 <_vfiprintf_r+0x1a6>
 8003b16:	b1b0      	cbz	r0, 8003b46 <_vfiprintf_r+0x13a>
 8003b18:	9207      	str	r2, [sp, #28]
 8003b1a:	e014      	b.n	8003b46 <_vfiprintf_r+0x13a>
 8003b1c:	eba0 0308 	sub.w	r3, r0, r8
 8003b20:	fa09 f303 	lsl.w	r3, r9, r3
 8003b24:	4313      	orrs	r3, r2
 8003b26:	9304      	str	r3, [sp, #16]
 8003b28:	46a2      	mov	sl, r4
 8003b2a:	e7d2      	b.n	8003ad2 <_vfiprintf_r+0xc6>
 8003b2c:	9b03      	ldr	r3, [sp, #12]
 8003b2e:	1d19      	adds	r1, r3, #4
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	9103      	str	r1, [sp, #12]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	bfbb      	ittet	lt
 8003b38:	425b      	neglt	r3, r3
 8003b3a:	f042 0202 	orrlt.w	r2, r2, #2
 8003b3e:	9307      	strge	r3, [sp, #28]
 8003b40:	9307      	strlt	r3, [sp, #28]
 8003b42:	bfb8      	it	lt
 8003b44:	9204      	strlt	r2, [sp, #16]
 8003b46:	7823      	ldrb	r3, [r4, #0]
 8003b48:	2b2e      	cmp	r3, #46	; 0x2e
 8003b4a:	d10c      	bne.n	8003b66 <_vfiprintf_r+0x15a>
 8003b4c:	7863      	ldrb	r3, [r4, #1]
 8003b4e:	2b2a      	cmp	r3, #42	; 0x2a
 8003b50:	d134      	bne.n	8003bbc <_vfiprintf_r+0x1b0>
 8003b52:	9b03      	ldr	r3, [sp, #12]
 8003b54:	1d1a      	adds	r2, r3, #4
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	9203      	str	r2, [sp, #12]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	bfb8      	it	lt
 8003b5e:	f04f 33ff 	movlt.w	r3, #4294967295
 8003b62:	3402      	adds	r4, #2
 8003b64:	9305      	str	r3, [sp, #20]
 8003b66:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8003c3c <_vfiprintf_r+0x230>
 8003b6a:	7821      	ldrb	r1, [r4, #0]
 8003b6c:	2203      	movs	r2, #3
 8003b6e:	4650      	mov	r0, sl
 8003b70:	f7fc fb2e 	bl	80001d0 <memchr>
 8003b74:	b138      	cbz	r0, 8003b86 <_vfiprintf_r+0x17a>
 8003b76:	9b04      	ldr	r3, [sp, #16]
 8003b78:	eba0 000a 	sub.w	r0, r0, sl
 8003b7c:	2240      	movs	r2, #64	; 0x40
 8003b7e:	4082      	lsls	r2, r0
 8003b80:	4313      	orrs	r3, r2
 8003b82:	3401      	adds	r4, #1
 8003b84:	9304      	str	r3, [sp, #16]
 8003b86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b8a:	4829      	ldr	r0, [pc, #164]	; (8003c30 <_vfiprintf_r+0x224>)
 8003b8c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003b90:	2206      	movs	r2, #6
 8003b92:	f7fc fb1d 	bl	80001d0 <memchr>
 8003b96:	2800      	cmp	r0, #0
 8003b98:	d03f      	beq.n	8003c1a <_vfiprintf_r+0x20e>
 8003b9a:	4b26      	ldr	r3, [pc, #152]	; (8003c34 <_vfiprintf_r+0x228>)
 8003b9c:	bb1b      	cbnz	r3, 8003be6 <_vfiprintf_r+0x1da>
 8003b9e:	9b03      	ldr	r3, [sp, #12]
 8003ba0:	3307      	adds	r3, #7
 8003ba2:	f023 0307 	bic.w	r3, r3, #7
 8003ba6:	3308      	adds	r3, #8
 8003ba8:	9303      	str	r3, [sp, #12]
 8003baa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003bac:	443b      	add	r3, r7
 8003bae:	9309      	str	r3, [sp, #36]	; 0x24
 8003bb0:	e768      	b.n	8003a84 <_vfiprintf_r+0x78>
 8003bb2:	fb0c 3202 	mla	r2, ip, r2, r3
 8003bb6:	460c      	mov	r4, r1
 8003bb8:	2001      	movs	r0, #1
 8003bba:	e7a6      	b.n	8003b0a <_vfiprintf_r+0xfe>
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	3401      	adds	r4, #1
 8003bc0:	9305      	str	r3, [sp, #20]
 8003bc2:	4619      	mov	r1, r3
 8003bc4:	f04f 0c0a 	mov.w	ip, #10
 8003bc8:	4620      	mov	r0, r4
 8003bca:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003bce:	3a30      	subs	r2, #48	; 0x30
 8003bd0:	2a09      	cmp	r2, #9
 8003bd2:	d903      	bls.n	8003bdc <_vfiprintf_r+0x1d0>
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d0c6      	beq.n	8003b66 <_vfiprintf_r+0x15a>
 8003bd8:	9105      	str	r1, [sp, #20]
 8003bda:	e7c4      	b.n	8003b66 <_vfiprintf_r+0x15a>
 8003bdc:	fb0c 2101 	mla	r1, ip, r1, r2
 8003be0:	4604      	mov	r4, r0
 8003be2:	2301      	movs	r3, #1
 8003be4:	e7f0      	b.n	8003bc8 <_vfiprintf_r+0x1bc>
 8003be6:	ab03      	add	r3, sp, #12
 8003be8:	9300      	str	r3, [sp, #0]
 8003bea:	462a      	mov	r2, r5
 8003bec:	4b12      	ldr	r3, [pc, #72]	; (8003c38 <_vfiprintf_r+0x22c>)
 8003bee:	a904      	add	r1, sp, #16
 8003bf0:	4630      	mov	r0, r6
 8003bf2:	f3af 8000 	nop.w
 8003bf6:	4607      	mov	r7, r0
 8003bf8:	1c78      	adds	r0, r7, #1
 8003bfa:	d1d6      	bne.n	8003baa <_vfiprintf_r+0x19e>
 8003bfc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003bfe:	07d9      	lsls	r1, r3, #31
 8003c00:	d405      	bmi.n	8003c0e <_vfiprintf_r+0x202>
 8003c02:	89ab      	ldrh	r3, [r5, #12]
 8003c04:	059a      	lsls	r2, r3, #22
 8003c06:	d402      	bmi.n	8003c0e <_vfiprintf_r+0x202>
 8003c08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003c0a:	f7ff fddb 	bl	80037c4 <__retarget_lock_release_recursive>
 8003c0e:	89ab      	ldrh	r3, [r5, #12]
 8003c10:	065b      	lsls	r3, r3, #25
 8003c12:	f53f af1d 	bmi.w	8003a50 <_vfiprintf_r+0x44>
 8003c16:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003c18:	e71c      	b.n	8003a54 <_vfiprintf_r+0x48>
 8003c1a:	ab03      	add	r3, sp, #12
 8003c1c:	9300      	str	r3, [sp, #0]
 8003c1e:	462a      	mov	r2, r5
 8003c20:	4b05      	ldr	r3, [pc, #20]	; (8003c38 <_vfiprintf_r+0x22c>)
 8003c22:	a904      	add	r1, sp, #16
 8003c24:	4630      	mov	r0, r6
 8003c26:	f000 f879 	bl	8003d1c <_printf_i>
 8003c2a:	e7e4      	b.n	8003bf6 <_vfiprintf_r+0x1ea>
 8003c2c:	0800435c 	.word	0x0800435c
 8003c30:	08004366 	.word	0x08004366
 8003c34:	00000000 	.word	0x00000000
 8003c38:	080039e7 	.word	0x080039e7
 8003c3c:	08004362 	.word	0x08004362

08003c40 <_printf_common>:
 8003c40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c44:	4616      	mov	r6, r2
 8003c46:	4699      	mov	r9, r3
 8003c48:	688a      	ldr	r2, [r1, #8]
 8003c4a:	690b      	ldr	r3, [r1, #16]
 8003c4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003c50:	4293      	cmp	r3, r2
 8003c52:	bfb8      	it	lt
 8003c54:	4613      	movlt	r3, r2
 8003c56:	6033      	str	r3, [r6, #0]
 8003c58:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003c5c:	4607      	mov	r7, r0
 8003c5e:	460c      	mov	r4, r1
 8003c60:	b10a      	cbz	r2, 8003c66 <_printf_common+0x26>
 8003c62:	3301      	adds	r3, #1
 8003c64:	6033      	str	r3, [r6, #0]
 8003c66:	6823      	ldr	r3, [r4, #0]
 8003c68:	0699      	lsls	r1, r3, #26
 8003c6a:	bf42      	ittt	mi
 8003c6c:	6833      	ldrmi	r3, [r6, #0]
 8003c6e:	3302      	addmi	r3, #2
 8003c70:	6033      	strmi	r3, [r6, #0]
 8003c72:	6825      	ldr	r5, [r4, #0]
 8003c74:	f015 0506 	ands.w	r5, r5, #6
 8003c78:	d106      	bne.n	8003c88 <_printf_common+0x48>
 8003c7a:	f104 0a19 	add.w	sl, r4, #25
 8003c7e:	68e3      	ldr	r3, [r4, #12]
 8003c80:	6832      	ldr	r2, [r6, #0]
 8003c82:	1a9b      	subs	r3, r3, r2
 8003c84:	42ab      	cmp	r3, r5
 8003c86:	dc26      	bgt.n	8003cd6 <_printf_common+0x96>
 8003c88:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003c8c:	1e13      	subs	r3, r2, #0
 8003c8e:	6822      	ldr	r2, [r4, #0]
 8003c90:	bf18      	it	ne
 8003c92:	2301      	movne	r3, #1
 8003c94:	0692      	lsls	r2, r2, #26
 8003c96:	d42b      	bmi.n	8003cf0 <_printf_common+0xb0>
 8003c98:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003c9c:	4649      	mov	r1, r9
 8003c9e:	4638      	mov	r0, r7
 8003ca0:	47c0      	blx	r8
 8003ca2:	3001      	adds	r0, #1
 8003ca4:	d01e      	beq.n	8003ce4 <_printf_common+0xa4>
 8003ca6:	6823      	ldr	r3, [r4, #0]
 8003ca8:	6922      	ldr	r2, [r4, #16]
 8003caa:	f003 0306 	and.w	r3, r3, #6
 8003cae:	2b04      	cmp	r3, #4
 8003cb0:	bf02      	ittt	eq
 8003cb2:	68e5      	ldreq	r5, [r4, #12]
 8003cb4:	6833      	ldreq	r3, [r6, #0]
 8003cb6:	1aed      	subeq	r5, r5, r3
 8003cb8:	68a3      	ldr	r3, [r4, #8]
 8003cba:	bf0c      	ite	eq
 8003cbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003cc0:	2500      	movne	r5, #0
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	bfc4      	itt	gt
 8003cc6:	1a9b      	subgt	r3, r3, r2
 8003cc8:	18ed      	addgt	r5, r5, r3
 8003cca:	2600      	movs	r6, #0
 8003ccc:	341a      	adds	r4, #26
 8003cce:	42b5      	cmp	r5, r6
 8003cd0:	d11a      	bne.n	8003d08 <_printf_common+0xc8>
 8003cd2:	2000      	movs	r0, #0
 8003cd4:	e008      	b.n	8003ce8 <_printf_common+0xa8>
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	4652      	mov	r2, sl
 8003cda:	4649      	mov	r1, r9
 8003cdc:	4638      	mov	r0, r7
 8003cde:	47c0      	blx	r8
 8003ce0:	3001      	adds	r0, #1
 8003ce2:	d103      	bne.n	8003cec <_printf_common+0xac>
 8003ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ce8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cec:	3501      	adds	r5, #1
 8003cee:	e7c6      	b.n	8003c7e <_printf_common+0x3e>
 8003cf0:	18e1      	adds	r1, r4, r3
 8003cf2:	1c5a      	adds	r2, r3, #1
 8003cf4:	2030      	movs	r0, #48	; 0x30
 8003cf6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003cfa:	4422      	add	r2, r4
 8003cfc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003d00:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003d04:	3302      	adds	r3, #2
 8003d06:	e7c7      	b.n	8003c98 <_printf_common+0x58>
 8003d08:	2301      	movs	r3, #1
 8003d0a:	4622      	mov	r2, r4
 8003d0c:	4649      	mov	r1, r9
 8003d0e:	4638      	mov	r0, r7
 8003d10:	47c0      	blx	r8
 8003d12:	3001      	adds	r0, #1
 8003d14:	d0e6      	beq.n	8003ce4 <_printf_common+0xa4>
 8003d16:	3601      	adds	r6, #1
 8003d18:	e7d9      	b.n	8003cce <_printf_common+0x8e>
	...

08003d1c <_printf_i>:
 8003d1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003d20:	7e0f      	ldrb	r7, [r1, #24]
 8003d22:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003d24:	2f78      	cmp	r7, #120	; 0x78
 8003d26:	4691      	mov	r9, r2
 8003d28:	4680      	mov	r8, r0
 8003d2a:	460c      	mov	r4, r1
 8003d2c:	469a      	mov	sl, r3
 8003d2e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003d32:	d807      	bhi.n	8003d44 <_printf_i+0x28>
 8003d34:	2f62      	cmp	r7, #98	; 0x62
 8003d36:	d80a      	bhi.n	8003d4e <_printf_i+0x32>
 8003d38:	2f00      	cmp	r7, #0
 8003d3a:	f000 80d4 	beq.w	8003ee6 <_printf_i+0x1ca>
 8003d3e:	2f58      	cmp	r7, #88	; 0x58
 8003d40:	f000 80c0 	beq.w	8003ec4 <_printf_i+0x1a8>
 8003d44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d48:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003d4c:	e03a      	b.n	8003dc4 <_printf_i+0xa8>
 8003d4e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003d52:	2b15      	cmp	r3, #21
 8003d54:	d8f6      	bhi.n	8003d44 <_printf_i+0x28>
 8003d56:	a101      	add	r1, pc, #4	; (adr r1, 8003d5c <_printf_i+0x40>)
 8003d58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003d5c:	08003db5 	.word	0x08003db5
 8003d60:	08003dc9 	.word	0x08003dc9
 8003d64:	08003d45 	.word	0x08003d45
 8003d68:	08003d45 	.word	0x08003d45
 8003d6c:	08003d45 	.word	0x08003d45
 8003d70:	08003d45 	.word	0x08003d45
 8003d74:	08003dc9 	.word	0x08003dc9
 8003d78:	08003d45 	.word	0x08003d45
 8003d7c:	08003d45 	.word	0x08003d45
 8003d80:	08003d45 	.word	0x08003d45
 8003d84:	08003d45 	.word	0x08003d45
 8003d88:	08003ecd 	.word	0x08003ecd
 8003d8c:	08003df5 	.word	0x08003df5
 8003d90:	08003e87 	.word	0x08003e87
 8003d94:	08003d45 	.word	0x08003d45
 8003d98:	08003d45 	.word	0x08003d45
 8003d9c:	08003eef 	.word	0x08003eef
 8003da0:	08003d45 	.word	0x08003d45
 8003da4:	08003df5 	.word	0x08003df5
 8003da8:	08003d45 	.word	0x08003d45
 8003dac:	08003d45 	.word	0x08003d45
 8003db0:	08003e8f 	.word	0x08003e8f
 8003db4:	682b      	ldr	r3, [r5, #0]
 8003db6:	1d1a      	adds	r2, r3, #4
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	602a      	str	r2, [r5, #0]
 8003dbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003dc0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e09f      	b.n	8003f08 <_printf_i+0x1ec>
 8003dc8:	6820      	ldr	r0, [r4, #0]
 8003dca:	682b      	ldr	r3, [r5, #0]
 8003dcc:	0607      	lsls	r7, r0, #24
 8003dce:	f103 0104 	add.w	r1, r3, #4
 8003dd2:	6029      	str	r1, [r5, #0]
 8003dd4:	d501      	bpl.n	8003dda <_printf_i+0xbe>
 8003dd6:	681e      	ldr	r6, [r3, #0]
 8003dd8:	e003      	b.n	8003de2 <_printf_i+0xc6>
 8003dda:	0646      	lsls	r6, r0, #25
 8003ddc:	d5fb      	bpl.n	8003dd6 <_printf_i+0xba>
 8003dde:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003de2:	2e00      	cmp	r6, #0
 8003de4:	da03      	bge.n	8003dee <_printf_i+0xd2>
 8003de6:	232d      	movs	r3, #45	; 0x2d
 8003de8:	4276      	negs	r6, r6
 8003dea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003dee:	485a      	ldr	r0, [pc, #360]	; (8003f58 <_printf_i+0x23c>)
 8003df0:	230a      	movs	r3, #10
 8003df2:	e012      	b.n	8003e1a <_printf_i+0xfe>
 8003df4:	682b      	ldr	r3, [r5, #0]
 8003df6:	6820      	ldr	r0, [r4, #0]
 8003df8:	1d19      	adds	r1, r3, #4
 8003dfa:	6029      	str	r1, [r5, #0]
 8003dfc:	0605      	lsls	r5, r0, #24
 8003dfe:	d501      	bpl.n	8003e04 <_printf_i+0xe8>
 8003e00:	681e      	ldr	r6, [r3, #0]
 8003e02:	e002      	b.n	8003e0a <_printf_i+0xee>
 8003e04:	0641      	lsls	r1, r0, #25
 8003e06:	d5fb      	bpl.n	8003e00 <_printf_i+0xe4>
 8003e08:	881e      	ldrh	r6, [r3, #0]
 8003e0a:	4853      	ldr	r0, [pc, #332]	; (8003f58 <_printf_i+0x23c>)
 8003e0c:	2f6f      	cmp	r7, #111	; 0x6f
 8003e0e:	bf0c      	ite	eq
 8003e10:	2308      	moveq	r3, #8
 8003e12:	230a      	movne	r3, #10
 8003e14:	2100      	movs	r1, #0
 8003e16:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003e1a:	6865      	ldr	r5, [r4, #4]
 8003e1c:	60a5      	str	r5, [r4, #8]
 8003e1e:	2d00      	cmp	r5, #0
 8003e20:	bfa2      	ittt	ge
 8003e22:	6821      	ldrge	r1, [r4, #0]
 8003e24:	f021 0104 	bicge.w	r1, r1, #4
 8003e28:	6021      	strge	r1, [r4, #0]
 8003e2a:	b90e      	cbnz	r6, 8003e30 <_printf_i+0x114>
 8003e2c:	2d00      	cmp	r5, #0
 8003e2e:	d04b      	beq.n	8003ec8 <_printf_i+0x1ac>
 8003e30:	4615      	mov	r5, r2
 8003e32:	fbb6 f1f3 	udiv	r1, r6, r3
 8003e36:	fb03 6711 	mls	r7, r3, r1, r6
 8003e3a:	5dc7      	ldrb	r7, [r0, r7]
 8003e3c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003e40:	4637      	mov	r7, r6
 8003e42:	42bb      	cmp	r3, r7
 8003e44:	460e      	mov	r6, r1
 8003e46:	d9f4      	bls.n	8003e32 <_printf_i+0x116>
 8003e48:	2b08      	cmp	r3, #8
 8003e4a:	d10b      	bne.n	8003e64 <_printf_i+0x148>
 8003e4c:	6823      	ldr	r3, [r4, #0]
 8003e4e:	07de      	lsls	r6, r3, #31
 8003e50:	d508      	bpl.n	8003e64 <_printf_i+0x148>
 8003e52:	6923      	ldr	r3, [r4, #16]
 8003e54:	6861      	ldr	r1, [r4, #4]
 8003e56:	4299      	cmp	r1, r3
 8003e58:	bfde      	ittt	le
 8003e5a:	2330      	movle	r3, #48	; 0x30
 8003e5c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003e60:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003e64:	1b52      	subs	r2, r2, r5
 8003e66:	6122      	str	r2, [r4, #16]
 8003e68:	f8cd a000 	str.w	sl, [sp]
 8003e6c:	464b      	mov	r3, r9
 8003e6e:	aa03      	add	r2, sp, #12
 8003e70:	4621      	mov	r1, r4
 8003e72:	4640      	mov	r0, r8
 8003e74:	f7ff fee4 	bl	8003c40 <_printf_common>
 8003e78:	3001      	adds	r0, #1
 8003e7a:	d14a      	bne.n	8003f12 <_printf_i+0x1f6>
 8003e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e80:	b004      	add	sp, #16
 8003e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e86:	6823      	ldr	r3, [r4, #0]
 8003e88:	f043 0320 	orr.w	r3, r3, #32
 8003e8c:	6023      	str	r3, [r4, #0]
 8003e8e:	4833      	ldr	r0, [pc, #204]	; (8003f5c <_printf_i+0x240>)
 8003e90:	2778      	movs	r7, #120	; 0x78
 8003e92:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003e96:	6823      	ldr	r3, [r4, #0]
 8003e98:	6829      	ldr	r1, [r5, #0]
 8003e9a:	061f      	lsls	r7, r3, #24
 8003e9c:	f851 6b04 	ldr.w	r6, [r1], #4
 8003ea0:	d402      	bmi.n	8003ea8 <_printf_i+0x18c>
 8003ea2:	065f      	lsls	r7, r3, #25
 8003ea4:	bf48      	it	mi
 8003ea6:	b2b6      	uxthmi	r6, r6
 8003ea8:	07df      	lsls	r7, r3, #31
 8003eaa:	bf48      	it	mi
 8003eac:	f043 0320 	orrmi.w	r3, r3, #32
 8003eb0:	6029      	str	r1, [r5, #0]
 8003eb2:	bf48      	it	mi
 8003eb4:	6023      	strmi	r3, [r4, #0]
 8003eb6:	b91e      	cbnz	r6, 8003ec0 <_printf_i+0x1a4>
 8003eb8:	6823      	ldr	r3, [r4, #0]
 8003eba:	f023 0320 	bic.w	r3, r3, #32
 8003ebe:	6023      	str	r3, [r4, #0]
 8003ec0:	2310      	movs	r3, #16
 8003ec2:	e7a7      	b.n	8003e14 <_printf_i+0xf8>
 8003ec4:	4824      	ldr	r0, [pc, #144]	; (8003f58 <_printf_i+0x23c>)
 8003ec6:	e7e4      	b.n	8003e92 <_printf_i+0x176>
 8003ec8:	4615      	mov	r5, r2
 8003eca:	e7bd      	b.n	8003e48 <_printf_i+0x12c>
 8003ecc:	682b      	ldr	r3, [r5, #0]
 8003ece:	6826      	ldr	r6, [r4, #0]
 8003ed0:	6961      	ldr	r1, [r4, #20]
 8003ed2:	1d18      	adds	r0, r3, #4
 8003ed4:	6028      	str	r0, [r5, #0]
 8003ed6:	0635      	lsls	r5, r6, #24
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	d501      	bpl.n	8003ee0 <_printf_i+0x1c4>
 8003edc:	6019      	str	r1, [r3, #0]
 8003ede:	e002      	b.n	8003ee6 <_printf_i+0x1ca>
 8003ee0:	0670      	lsls	r0, r6, #25
 8003ee2:	d5fb      	bpl.n	8003edc <_printf_i+0x1c0>
 8003ee4:	8019      	strh	r1, [r3, #0]
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	6123      	str	r3, [r4, #16]
 8003eea:	4615      	mov	r5, r2
 8003eec:	e7bc      	b.n	8003e68 <_printf_i+0x14c>
 8003eee:	682b      	ldr	r3, [r5, #0]
 8003ef0:	1d1a      	adds	r2, r3, #4
 8003ef2:	602a      	str	r2, [r5, #0]
 8003ef4:	681d      	ldr	r5, [r3, #0]
 8003ef6:	6862      	ldr	r2, [r4, #4]
 8003ef8:	2100      	movs	r1, #0
 8003efa:	4628      	mov	r0, r5
 8003efc:	f7fc f968 	bl	80001d0 <memchr>
 8003f00:	b108      	cbz	r0, 8003f06 <_printf_i+0x1ea>
 8003f02:	1b40      	subs	r0, r0, r5
 8003f04:	6060      	str	r0, [r4, #4]
 8003f06:	6863      	ldr	r3, [r4, #4]
 8003f08:	6123      	str	r3, [r4, #16]
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f10:	e7aa      	b.n	8003e68 <_printf_i+0x14c>
 8003f12:	6923      	ldr	r3, [r4, #16]
 8003f14:	462a      	mov	r2, r5
 8003f16:	4649      	mov	r1, r9
 8003f18:	4640      	mov	r0, r8
 8003f1a:	47d0      	blx	sl
 8003f1c:	3001      	adds	r0, #1
 8003f1e:	d0ad      	beq.n	8003e7c <_printf_i+0x160>
 8003f20:	6823      	ldr	r3, [r4, #0]
 8003f22:	079b      	lsls	r3, r3, #30
 8003f24:	d413      	bmi.n	8003f4e <_printf_i+0x232>
 8003f26:	68e0      	ldr	r0, [r4, #12]
 8003f28:	9b03      	ldr	r3, [sp, #12]
 8003f2a:	4298      	cmp	r0, r3
 8003f2c:	bfb8      	it	lt
 8003f2e:	4618      	movlt	r0, r3
 8003f30:	e7a6      	b.n	8003e80 <_printf_i+0x164>
 8003f32:	2301      	movs	r3, #1
 8003f34:	4632      	mov	r2, r6
 8003f36:	4649      	mov	r1, r9
 8003f38:	4640      	mov	r0, r8
 8003f3a:	47d0      	blx	sl
 8003f3c:	3001      	adds	r0, #1
 8003f3e:	d09d      	beq.n	8003e7c <_printf_i+0x160>
 8003f40:	3501      	adds	r5, #1
 8003f42:	68e3      	ldr	r3, [r4, #12]
 8003f44:	9903      	ldr	r1, [sp, #12]
 8003f46:	1a5b      	subs	r3, r3, r1
 8003f48:	42ab      	cmp	r3, r5
 8003f4a:	dcf2      	bgt.n	8003f32 <_printf_i+0x216>
 8003f4c:	e7eb      	b.n	8003f26 <_printf_i+0x20a>
 8003f4e:	2500      	movs	r5, #0
 8003f50:	f104 0619 	add.w	r6, r4, #25
 8003f54:	e7f5      	b.n	8003f42 <_printf_i+0x226>
 8003f56:	bf00      	nop
 8003f58:	0800436d 	.word	0x0800436d
 8003f5c:	0800437e 	.word	0x0800437e

08003f60 <__sflush_r>:
 8003f60:	898a      	ldrh	r2, [r1, #12]
 8003f62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f66:	4605      	mov	r5, r0
 8003f68:	0710      	lsls	r0, r2, #28
 8003f6a:	460c      	mov	r4, r1
 8003f6c:	d458      	bmi.n	8004020 <__sflush_r+0xc0>
 8003f6e:	684b      	ldr	r3, [r1, #4]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	dc05      	bgt.n	8003f80 <__sflush_r+0x20>
 8003f74:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	dc02      	bgt.n	8003f80 <__sflush_r+0x20>
 8003f7a:	2000      	movs	r0, #0
 8003f7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003f82:	2e00      	cmp	r6, #0
 8003f84:	d0f9      	beq.n	8003f7a <__sflush_r+0x1a>
 8003f86:	2300      	movs	r3, #0
 8003f88:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003f8c:	682f      	ldr	r7, [r5, #0]
 8003f8e:	6a21      	ldr	r1, [r4, #32]
 8003f90:	602b      	str	r3, [r5, #0]
 8003f92:	d032      	beq.n	8003ffa <__sflush_r+0x9a>
 8003f94:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003f96:	89a3      	ldrh	r3, [r4, #12]
 8003f98:	075a      	lsls	r2, r3, #29
 8003f9a:	d505      	bpl.n	8003fa8 <__sflush_r+0x48>
 8003f9c:	6863      	ldr	r3, [r4, #4]
 8003f9e:	1ac0      	subs	r0, r0, r3
 8003fa0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003fa2:	b10b      	cbz	r3, 8003fa8 <__sflush_r+0x48>
 8003fa4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003fa6:	1ac0      	subs	r0, r0, r3
 8003fa8:	2300      	movs	r3, #0
 8003faa:	4602      	mov	r2, r0
 8003fac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003fae:	6a21      	ldr	r1, [r4, #32]
 8003fb0:	4628      	mov	r0, r5
 8003fb2:	47b0      	blx	r6
 8003fb4:	1c43      	adds	r3, r0, #1
 8003fb6:	89a3      	ldrh	r3, [r4, #12]
 8003fb8:	d106      	bne.n	8003fc8 <__sflush_r+0x68>
 8003fba:	6829      	ldr	r1, [r5, #0]
 8003fbc:	291d      	cmp	r1, #29
 8003fbe:	d82b      	bhi.n	8004018 <__sflush_r+0xb8>
 8003fc0:	4a29      	ldr	r2, [pc, #164]	; (8004068 <__sflush_r+0x108>)
 8003fc2:	410a      	asrs	r2, r1
 8003fc4:	07d6      	lsls	r6, r2, #31
 8003fc6:	d427      	bmi.n	8004018 <__sflush_r+0xb8>
 8003fc8:	2200      	movs	r2, #0
 8003fca:	6062      	str	r2, [r4, #4]
 8003fcc:	04d9      	lsls	r1, r3, #19
 8003fce:	6922      	ldr	r2, [r4, #16]
 8003fd0:	6022      	str	r2, [r4, #0]
 8003fd2:	d504      	bpl.n	8003fde <__sflush_r+0x7e>
 8003fd4:	1c42      	adds	r2, r0, #1
 8003fd6:	d101      	bne.n	8003fdc <__sflush_r+0x7c>
 8003fd8:	682b      	ldr	r3, [r5, #0]
 8003fda:	b903      	cbnz	r3, 8003fde <__sflush_r+0x7e>
 8003fdc:	6560      	str	r0, [r4, #84]	; 0x54
 8003fde:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003fe0:	602f      	str	r7, [r5, #0]
 8003fe2:	2900      	cmp	r1, #0
 8003fe4:	d0c9      	beq.n	8003f7a <__sflush_r+0x1a>
 8003fe6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003fea:	4299      	cmp	r1, r3
 8003fec:	d002      	beq.n	8003ff4 <__sflush_r+0x94>
 8003fee:	4628      	mov	r0, r5
 8003ff0:	f7ff fbea 	bl	80037c8 <_free_r>
 8003ff4:	2000      	movs	r0, #0
 8003ff6:	6360      	str	r0, [r4, #52]	; 0x34
 8003ff8:	e7c0      	b.n	8003f7c <__sflush_r+0x1c>
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	4628      	mov	r0, r5
 8003ffe:	47b0      	blx	r6
 8004000:	1c41      	adds	r1, r0, #1
 8004002:	d1c8      	bne.n	8003f96 <__sflush_r+0x36>
 8004004:	682b      	ldr	r3, [r5, #0]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d0c5      	beq.n	8003f96 <__sflush_r+0x36>
 800400a:	2b1d      	cmp	r3, #29
 800400c:	d001      	beq.n	8004012 <__sflush_r+0xb2>
 800400e:	2b16      	cmp	r3, #22
 8004010:	d101      	bne.n	8004016 <__sflush_r+0xb6>
 8004012:	602f      	str	r7, [r5, #0]
 8004014:	e7b1      	b.n	8003f7a <__sflush_r+0x1a>
 8004016:	89a3      	ldrh	r3, [r4, #12]
 8004018:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800401c:	81a3      	strh	r3, [r4, #12]
 800401e:	e7ad      	b.n	8003f7c <__sflush_r+0x1c>
 8004020:	690f      	ldr	r7, [r1, #16]
 8004022:	2f00      	cmp	r7, #0
 8004024:	d0a9      	beq.n	8003f7a <__sflush_r+0x1a>
 8004026:	0793      	lsls	r3, r2, #30
 8004028:	680e      	ldr	r6, [r1, #0]
 800402a:	bf08      	it	eq
 800402c:	694b      	ldreq	r3, [r1, #20]
 800402e:	600f      	str	r7, [r1, #0]
 8004030:	bf18      	it	ne
 8004032:	2300      	movne	r3, #0
 8004034:	eba6 0807 	sub.w	r8, r6, r7
 8004038:	608b      	str	r3, [r1, #8]
 800403a:	f1b8 0f00 	cmp.w	r8, #0
 800403e:	dd9c      	ble.n	8003f7a <__sflush_r+0x1a>
 8004040:	6a21      	ldr	r1, [r4, #32]
 8004042:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004044:	4643      	mov	r3, r8
 8004046:	463a      	mov	r2, r7
 8004048:	4628      	mov	r0, r5
 800404a:	47b0      	blx	r6
 800404c:	2800      	cmp	r0, #0
 800404e:	dc06      	bgt.n	800405e <__sflush_r+0xfe>
 8004050:	89a3      	ldrh	r3, [r4, #12]
 8004052:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004056:	81a3      	strh	r3, [r4, #12]
 8004058:	f04f 30ff 	mov.w	r0, #4294967295
 800405c:	e78e      	b.n	8003f7c <__sflush_r+0x1c>
 800405e:	4407      	add	r7, r0
 8004060:	eba8 0800 	sub.w	r8, r8, r0
 8004064:	e7e9      	b.n	800403a <__sflush_r+0xda>
 8004066:	bf00      	nop
 8004068:	dfbffffe 	.word	0xdfbffffe

0800406c <_fflush_r>:
 800406c:	b538      	push	{r3, r4, r5, lr}
 800406e:	690b      	ldr	r3, [r1, #16]
 8004070:	4605      	mov	r5, r0
 8004072:	460c      	mov	r4, r1
 8004074:	b913      	cbnz	r3, 800407c <_fflush_r+0x10>
 8004076:	2500      	movs	r5, #0
 8004078:	4628      	mov	r0, r5
 800407a:	bd38      	pop	{r3, r4, r5, pc}
 800407c:	b118      	cbz	r0, 8004086 <_fflush_r+0x1a>
 800407e:	6a03      	ldr	r3, [r0, #32]
 8004080:	b90b      	cbnz	r3, 8004086 <_fflush_r+0x1a>
 8004082:	f7ff fa99 	bl	80035b8 <__sinit>
 8004086:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d0f3      	beq.n	8004076 <_fflush_r+0xa>
 800408e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004090:	07d0      	lsls	r0, r2, #31
 8004092:	d404      	bmi.n	800409e <_fflush_r+0x32>
 8004094:	0599      	lsls	r1, r3, #22
 8004096:	d402      	bmi.n	800409e <_fflush_r+0x32>
 8004098:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800409a:	f7ff fb92 	bl	80037c2 <__retarget_lock_acquire_recursive>
 800409e:	4628      	mov	r0, r5
 80040a0:	4621      	mov	r1, r4
 80040a2:	f7ff ff5d 	bl	8003f60 <__sflush_r>
 80040a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80040a8:	07da      	lsls	r2, r3, #31
 80040aa:	4605      	mov	r5, r0
 80040ac:	d4e4      	bmi.n	8004078 <_fflush_r+0xc>
 80040ae:	89a3      	ldrh	r3, [r4, #12]
 80040b0:	059b      	lsls	r3, r3, #22
 80040b2:	d4e1      	bmi.n	8004078 <_fflush_r+0xc>
 80040b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80040b6:	f7ff fb85 	bl	80037c4 <__retarget_lock_release_recursive>
 80040ba:	e7dd      	b.n	8004078 <_fflush_r+0xc>

080040bc <__swbuf_r>:
 80040bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040be:	460e      	mov	r6, r1
 80040c0:	4614      	mov	r4, r2
 80040c2:	4605      	mov	r5, r0
 80040c4:	b118      	cbz	r0, 80040ce <__swbuf_r+0x12>
 80040c6:	6a03      	ldr	r3, [r0, #32]
 80040c8:	b90b      	cbnz	r3, 80040ce <__swbuf_r+0x12>
 80040ca:	f7ff fa75 	bl	80035b8 <__sinit>
 80040ce:	69a3      	ldr	r3, [r4, #24]
 80040d0:	60a3      	str	r3, [r4, #8]
 80040d2:	89a3      	ldrh	r3, [r4, #12]
 80040d4:	071a      	lsls	r2, r3, #28
 80040d6:	d525      	bpl.n	8004124 <__swbuf_r+0x68>
 80040d8:	6923      	ldr	r3, [r4, #16]
 80040da:	b31b      	cbz	r3, 8004124 <__swbuf_r+0x68>
 80040dc:	6823      	ldr	r3, [r4, #0]
 80040de:	6922      	ldr	r2, [r4, #16]
 80040e0:	1a98      	subs	r0, r3, r2
 80040e2:	6963      	ldr	r3, [r4, #20]
 80040e4:	b2f6      	uxtb	r6, r6
 80040e6:	4283      	cmp	r3, r0
 80040e8:	4637      	mov	r7, r6
 80040ea:	dc04      	bgt.n	80040f6 <__swbuf_r+0x3a>
 80040ec:	4621      	mov	r1, r4
 80040ee:	4628      	mov	r0, r5
 80040f0:	f7ff ffbc 	bl	800406c <_fflush_r>
 80040f4:	b9e0      	cbnz	r0, 8004130 <__swbuf_r+0x74>
 80040f6:	68a3      	ldr	r3, [r4, #8]
 80040f8:	3b01      	subs	r3, #1
 80040fa:	60a3      	str	r3, [r4, #8]
 80040fc:	6823      	ldr	r3, [r4, #0]
 80040fe:	1c5a      	adds	r2, r3, #1
 8004100:	6022      	str	r2, [r4, #0]
 8004102:	701e      	strb	r6, [r3, #0]
 8004104:	6962      	ldr	r2, [r4, #20]
 8004106:	1c43      	adds	r3, r0, #1
 8004108:	429a      	cmp	r2, r3
 800410a:	d004      	beq.n	8004116 <__swbuf_r+0x5a>
 800410c:	89a3      	ldrh	r3, [r4, #12]
 800410e:	07db      	lsls	r3, r3, #31
 8004110:	d506      	bpl.n	8004120 <__swbuf_r+0x64>
 8004112:	2e0a      	cmp	r6, #10
 8004114:	d104      	bne.n	8004120 <__swbuf_r+0x64>
 8004116:	4621      	mov	r1, r4
 8004118:	4628      	mov	r0, r5
 800411a:	f7ff ffa7 	bl	800406c <_fflush_r>
 800411e:	b938      	cbnz	r0, 8004130 <__swbuf_r+0x74>
 8004120:	4638      	mov	r0, r7
 8004122:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004124:	4621      	mov	r1, r4
 8004126:	4628      	mov	r0, r5
 8004128:	f000 f806 	bl	8004138 <__swsetup_r>
 800412c:	2800      	cmp	r0, #0
 800412e:	d0d5      	beq.n	80040dc <__swbuf_r+0x20>
 8004130:	f04f 37ff 	mov.w	r7, #4294967295
 8004134:	e7f4      	b.n	8004120 <__swbuf_r+0x64>
	...

08004138 <__swsetup_r>:
 8004138:	b538      	push	{r3, r4, r5, lr}
 800413a:	4b2a      	ldr	r3, [pc, #168]	; (80041e4 <__swsetup_r+0xac>)
 800413c:	4605      	mov	r5, r0
 800413e:	6818      	ldr	r0, [r3, #0]
 8004140:	460c      	mov	r4, r1
 8004142:	b118      	cbz	r0, 800414c <__swsetup_r+0x14>
 8004144:	6a03      	ldr	r3, [r0, #32]
 8004146:	b90b      	cbnz	r3, 800414c <__swsetup_r+0x14>
 8004148:	f7ff fa36 	bl	80035b8 <__sinit>
 800414c:	89a3      	ldrh	r3, [r4, #12]
 800414e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004152:	0718      	lsls	r0, r3, #28
 8004154:	d422      	bmi.n	800419c <__swsetup_r+0x64>
 8004156:	06d9      	lsls	r1, r3, #27
 8004158:	d407      	bmi.n	800416a <__swsetup_r+0x32>
 800415a:	2309      	movs	r3, #9
 800415c:	602b      	str	r3, [r5, #0]
 800415e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004162:	81a3      	strh	r3, [r4, #12]
 8004164:	f04f 30ff 	mov.w	r0, #4294967295
 8004168:	e034      	b.n	80041d4 <__swsetup_r+0x9c>
 800416a:	0758      	lsls	r0, r3, #29
 800416c:	d512      	bpl.n	8004194 <__swsetup_r+0x5c>
 800416e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004170:	b141      	cbz	r1, 8004184 <__swsetup_r+0x4c>
 8004172:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004176:	4299      	cmp	r1, r3
 8004178:	d002      	beq.n	8004180 <__swsetup_r+0x48>
 800417a:	4628      	mov	r0, r5
 800417c:	f7ff fb24 	bl	80037c8 <_free_r>
 8004180:	2300      	movs	r3, #0
 8004182:	6363      	str	r3, [r4, #52]	; 0x34
 8004184:	89a3      	ldrh	r3, [r4, #12]
 8004186:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800418a:	81a3      	strh	r3, [r4, #12]
 800418c:	2300      	movs	r3, #0
 800418e:	6063      	str	r3, [r4, #4]
 8004190:	6923      	ldr	r3, [r4, #16]
 8004192:	6023      	str	r3, [r4, #0]
 8004194:	89a3      	ldrh	r3, [r4, #12]
 8004196:	f043 0308 	orr.w	r3, r3, #8
 800419a:	81a3      	strh	r3, [r4, #12]
 800419c:	6923      	ldr	r3, [r4, #16]
 800419e:	b94b      	cbnz	r3, 80041b4 <__swsetup_r+0x7c>
 80041a0:	89a3      	ldrh	r3, [r4, #12]
 80041a2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80041a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041aa:	d003      	beq.n	80041b4 <__swsetup_r+0x7c>
 80041ac:	4621      	mov	r1, r4
 80041ae:	4628      	mov	r0, r5
 80041b0:	f000 f850 	bl	8004254 <__smakebuf_r>
 80041b4:	89a0      	ldrh	r0, [r4, #12]
 80041b6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80041ba:	f010 0301 	ands.w	r3, r0, #1
 80041be:	d00a      	beq.n	80041d6 <__swsetup_r+0x9e>
 80041c0:	2300      	movs	r3, #0
 80041c2:	60a3      	str	r3, [r4, #8]
 80041c4:	6963      	ldr	r3, [r4, #20]
 80041c6:	425b      	negs	r3, r3
 80041c8:	61a3      	str	r3, [r4, #24]
 80041ca:	6923      	ldr	r3, [r4, #16]
 80041cc:	b943      	cbnz	r3, 80041e0 <__swsetup_r+0xa8>
 80041ce:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80041d2:	d1c4      	bne.n	800415e <__swsetup_r+0x26>
 80041d4:	bd38      	pop	{r3, r4, r5, pc}
 80041d6:	0781      	lsls	r1, r0, #30
 80041d8:	bf58      	it	pl
 80041da:	6963      	ldrpl	r3, [r4, #20]
 80041dc:	60a3      	str	r3, [r4, #8]
 80041de:	e7f4      	b.n	80041ca <__swsetup_r+0x92>
 80041e0:	2000      	movs	r0, #0
 80041e2:	e7f7      	b.n	80041d4 <__swsetup_r+0x9c>
 80041e4:	20000074 	.word	0x20000074

080041e8 <_sbrk_r>:
 80041e8:	b538      	push	{r3, r4, r5, lr}
 80041ea:	4d06      	ldr	r5, [pc, #24]	; (8004204 <_sbrk_r+0x1c>)
 80041ec:	2300      	movs	r3, #0
 80041ee:	4604      	mov	r4, r0
 80041f0:	4608      	mov	r0, r1
 80041f2:	602b      	str	r3, [r5, #0]
 80041f4:	f7fc fd16 	bl	8000c24 <_sbrk>
 80041f8:	1c43      	adds	r3, r0, #1
 80041fa:	d102      	bne.n	8004202 <_sbrk_r+0x1a>
 80041fc:	682b      	ldr	r3, [r5, #0]
 80041fe:	b103      	cbz	r3, 8004202 <_sbrk_r+0x1a>
 8004200:	6023      	str	r3, [r4, #0]
 8004202:	bd38      	pop	{r3, r4, r5, pc}
 8004204:	200002c8 	.word	0x200002c8

08004208 <__swhatbuf_r>:
 8004208:	b570      	push	{r4, r5, r6, lr}
 800420a:	460c      	mov	r4, r1
 800420c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004210:	2900      	cmp	r1, #0
 8004212:	b096      	sub	sp, #88	; 0x58
 8004214:	4615      	mov	r5, r2
 8004216:	461e      	mov	r6, r3
 8004218:	da0d      	bge.n	8004236 <__swhatbuf_r+0x2e>
 800421a:	89a3      	ldrh	r3, [r4, #12]
 800421c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004220:	f04f 0100 	mov.w	r1, #0
 8004224:	bf0c      	ite	eq
 8004226:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800422a:	2340      	movne	r3, #64	; 0x40
 800422c:	2000      	movs	r0, #0
 800422e:	6031      	str	r1, [r6, #0]
 8004230:	602b      	str	r3, [r5, #0]
 8004232:	b016      	add	sp, #88	; 0x58
 8004234:	bd70      	pop	{r4, r5, r6, pc}
 8004236:	466a      	mov	r2, sp
 8004238:	f000 f848 	bl	80042cc <_fstat_r>
 800423c:	2800      	cmp	r0, #0
 800423e:	dbec      	blt.n	800421a <__swhatbuf_r+0x12>
 8004240:	9901      	ldr	r1, [sp, #4]
 8004242:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004246:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800424a:	4259      	negs	r1, r3
 800424c:	4159      	adcs	r1, r3
 800424e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004252:	e7eb      	b.n	800422c <__swhatbuf_r+0x24>

08004254 <__smakebuf_r>:
 8004254:	898b      	ldrh	r3, [r1, #12]
 8004256:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004258:	079d      	lsls	r5, r3, #30
 800425a:	4606      	mov	r6, r0
 800425c:	460c      	mov	r4, r1
 800425e:	d507      	bpl.n	8004270 <__smakebuf_r+0x1c>
 8004260:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004264:	6023      	str	r3, [r4, #0]
 8004266:	6123      	str	r3, [r4, #16]
 8004268:	2301      	movs	r3, #1
 800426a:	6163      	str	r3, [r4, #20]
 800426c:	b002      	add	sp, #8
 800426e:	bd70      	pop	{r4, r5, r6, pc}
 8004270:	ab01      	add	r3, sp, #4
 8004272:	466a      	mov	r2, sp
 8004274:	f7ff ffc8 	bl	8004208 <__swhatbuf_r>
 8004278:	9900      	ldr	r1, [sp, #0]
 800427a:	4605      	mov	r5, r0
 800427c:	4630      	mov	r0, r6
 800427e:	f7ff fb0f 	bl	80038a0 <_malloc_r>
 8004282:	b948      	cbnz	r0, 8004298 <__smakebuf_r+0x44>
 8004284:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004288:	059a      	lsls	r2, r3, #22
 800428a:	d4ef      	bmi.n	800426c <__smakebuf_r+0x18>
 800428c:	f023 0303 	bic.w	r3, r3, #3
 8004290:	f043 0302 	orr.w	r3, r3, #2
 8004294:	81a3      	strh	r3, [r4, #12]
 8004296:	e7e3      	b.n	8004260 <__smakebuf_r+0xc>
 8004298:	89a3      	ldrh	r3, [r4, #12]
 800429a:	6020      	str	r0, [r4, #0]
 800429c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042a0:	81a3      	strh	r3, [r4, #12]
 80042a2:	9b00      	ldr	r3, [sp, #0]
 80042a4:	6163      	str	r3, [r4, #20]
 80042a6:	9b01      	ldr	r3, [sp, #4]
 80042a8:	6120      	str	r0, [r4, #16]
 80042aa:	b15b      	cbz	r3, 80042c4 <__smakebuf_r+0x70>
 80042ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80042b0:	4630      	mov	r0, r6
 80042b2:	f000 f81d 	bl	80042f0 <_isatty_r>
 80042b6:	b128      	cbz	r0, 80042c4 <__smakebuf_r+0x70>
 80042b8:	89a3      	ldrh	r3, [r4, #12]
 80042ba:	f023 0303 	bic.w	r3, r3, #3
 80042be:	f043 0301 	orr.w	r3, r3, #1
 80042c2:	81a3      	strh	r3, [r4, #12]
 80042c4:	89a3      	ldrh	r3, [r4, #12]
 80042c6:	431d      	orrs	r5, r3
 80042c8:	81a5      	strh	r5, [r4, #12]
 80042ca:	e7cf      	b.n	800426c <__smakebuf_r+0x18>

080042cc <_fstat_r>:
 80042cc:	b538      	push	{r3, r4, r5, lr}
 80042ce:	4d07      	ldr	r5, [pc, #28]	; (80042ec <_fstat_r+0x20>)
 80042d0:	2300      	movs	r3, #0
 80042d2:	4604      	mov	r4, r0
 80042d4:	4608      	mov	r0, r1
 80042d6:	4611      	mov	r1, r2
 80042d8:	602b      	str	r3, [r5, #0]
 80042da:	f7fc fc7a 	bl	8000bd2 <_fstat>
 80042de:	1c43      	adds	r3, r0, #1
 80042e0:	d102      	bne.n	80042e8 <_fstat_r+0x1c>
 80042e2:	682b      	ldr	r3, [r5, #0]
 80042e4:	b103      	cbz	r3, 80042e8 <_fstat_r+0x1c>
 80042e6:	6023      	str	r3, [r4, #0]
 80042e8:	bd38      	pop	{r3, r4, r5, pc}
 80042ea:	bf00      	nop
 80042ec:	200002c8 	.word	0x200002c8

080042f0 <_isatty_r>:
 80042f0:	b538      	push	{r3, r4, r5, lr}
 80042f2:	4d06      	ldr	r5, [pc, #24]	; (800430c <_isatty_r+0x1c>)
 80042f4:	2300      	movs	r3, #0
 80042f6:	4604      	mov	r4, r0
 80042f8:	4608      	mov	r0, r1
 80042fa:	602b      	str	r3, [r5, #0]
 80042fc:	f7fc fc79 	bl	8000bf2 <_isatty>
 8004300:	1c43      	adds	r3, r0, #1
 8004302:	d102      	bne.n	800430a <_isatty_r+0x1a>
 8004304:	682b      	ldr	r3, [r5, #0]
 8004306:	b103      	cbz	r3, 800430a <_isatty_r+0x1a>
 8004308:	6023      	str	r3, [r4, #0]
 800430a:	bd38      	pop	{r3, r4, r5, pc}
 800430c:	200002c8 	.word	0x200002c8

08004310 <_init>:
 8004310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004312:	bf00      	nop
 8004314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004316:	bc08      	pop	{r3}
 8004318:	469e      	mov	lr, r3
 800431a:	4770      	bx	lr

0800431c <_fini>:
 800431c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800431e:	bf00      	nop
 8004320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004322:	bc08      	pop	{r3}
 8004324:	469e      	mov	lr, r3
 8004326:	4770      	bx	lr
